// **********************************************************************************************************
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// P-Signal Strategy Â© Kharevsky
// I dedicate it BTCUSD Day strategy to my friend St.Dmitry and all crypto enthusiasts.
// A good strategy should be able to handle backtesting.
// @version=4
// **********************************************************************************************************
study("P-Signal", precision = 3)
//
// Parameters and const of P-Signal.
//
nPoints = input(title = "Number of Bars", type = input.integer, defval = 9, minval = 4, maxval = 100, group = "Parameters of observation.")
bSmooth = input(title = "Smoothing", type = input.bool,  defval = true, group = "Parameters of observation.")
int nIntr = nPoints - 1 
// 
// Horner's method for the error (Gauss) & P-Signal functions.
//
fErf(x) =>
    nT = 1.0/(1.0 + 0.5*abs(x))
    nAns = 1.0 - nT*exp(-x*x - 1.26551223 + 
     nT*( 1.00002368 + nT*( 0.37409196 + nT*( 0.09678418 + 
     nT*(-0.18628806 + nT*( 0.27886807 + nT*(-1.13520398 + 
     nT*( 1.48851587 + nT*(-0.82215223 + nT*( 0.17087277 ))))))))))
    x >= 0 ? nAns : -nAns
fPSignal(ser, int) => 
    nStDev = stdev(ser, int)
    nSma = sma(ser, int)
    fErf(nStDev > 0 ? nSma/nStDev/sqrt(2) : 1.0)
//
// Signals on Set of Frames.
//
nPSignal = fPSignal(change(ohlc4), nIntr)
nPSignal := if (bSmooth) 
    sma(nPSignal, nIntr)
ndPSignal = sign(nPSignal[0] - nPSignal[1])
//
// P-Signal plotting. 
//
hline(+1.0, color = color.new(color.orange,70), linestyle = hline.style_dotted)
hline(-1.0, color = color.new(color.orange,70), linestyle = hline.style_dotted)
plot(nPSignal, color = color.blue, style = plot.style_line)
//
// Strategy "A penny saved is a penny earnd." Caution with short!
//
//strategy.entry("long", strategy.long, 1, when = nPSignal < 0 and ndPSignal > 0)
//strategy.close("long", when = nPSignal > 0 and ndPSignal < 0)
// The end.