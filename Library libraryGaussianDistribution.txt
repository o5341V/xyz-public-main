// © Horrorin, under the terms of the Mozilla Public License 2.0. https://mozilla.org/MPL/2.0/

//@version=6

// @description This library defines a custom type `distr` representing a Gaussian (or other statistical) distribution. 
// It provides methods to calculate key statistical moments and scores, including mean, median, mode, 
// standard deviation, variance, skewness, kurtosis, and Z-scores. This library is useful for 
// analyzing probability distributions in financial data.
//
// Disclaimer:
// I am not a mathematician, but I have implemented this library to the best of my understanding and capacity.
// Please be indulgent as I tried to translate statistical concepts into code as accurately as possible.
// Feedback, suggestions, and corrections are welcome to improve the reliability and robustness of this library.
library("GaussianDistribution")

// @function Calculate the mean (average) of the distribution
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @returns Mean (μ)
export mean(float source, int length) =>
	ta.sma(source, length)

// @function Calculate the standard deviation (σ) of the distribution
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @returns Standard deviation (σ)
export stdev(float source, int length) =>
	ta.stdev(source, length)

// @function Calculate the skewness (γ₁) of the distribution
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @param mean the mean (average) of the distribution
// @param stdev the standard deviation (σ) of the distribution
// @return Skewness (γ₁)
export skewness(float source, int length, float mean, float stdev) =>
	ta.sma(math.pow(source - mean, 3), length) / math.pow(stdev, 3)

// @function Overloaded skewness to calculate from source and length
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @return Skewness (γ₁)
export skewness(float source, int length) =>
	float mean = mean(source, length)
	float stdev = stdev(source, length)
	skewness(source, length, mean, stdev)

// @function Estimate mode - Most frequent value in the distribution (approximation based on skewness)
// @param mean the mean (average) of the distribution
// @param stdev the standard deviation (σ) of the distribution
// @param skewness the skewness (γ₁) of the distribution
// @return Mode
export mode(float mean, float stdev, float skewness) =>
	mean - skewness * stdev

// @function Overloaded mode to calculate from source and length
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @return Mode
export mode(float source, int length) =>
	float mean = mean(source, length)
	float stdev = stdev(source, length)
	float skewness = skewness(source, length)
	mode(mean, stdev, skewness)

// @function Estimate median - Middle value of the distribution (approximation)
// @param mean the mean (average) of the distribution
// @param stdev the standard deviation (σ) of the distribution
// @param skewness the skewness (γ₁) of the distribution
// @return Median
export median(float mean, float stdev, float skewness) =>
	mean - (skewness * stdev / math.sqrt(3))

// @function Overloaded median to calculate from source and length
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @return Median
export median(float source, int length) =>
	float mean = mean(source, length)
	float stdev = stdev(source, length)
	float skewness = skewness(source, length)
	median(mean, stdev, skewness)

// @function Calculate variance (σ²) - Square of the standard deviation
// @param stdev the standard deviation (σ) of the distribution
// @return Variance (σ²)
export variance(float stdev) =>
	math.pow(stdev, 2)

// @function Overloaded variance to calculate from source and length
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @return Variance (σ²)
export variance(float source, int length) =>
	ta.variance(source, length)

// @function Calculate kurtosis (γ₂) - Degree of "tailedness" in the distribution
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @param mean the mean (average) of the distribution
// @param stdev the standard deviation (σ) of the distribution
// @return Kurtosis (γ₂)
export kurtosis(float source, int length, float mean, float stdev) =>
	ta.sma(math.pow(source - mean, 4), length) / math.pow(stdev, 4) - 3

// @function Overloaded kurtosis to calculate from source and length
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @return Kurtosis (γ₂)
export kurtosis(float source, int length) =>
	float mean = mean(source, length)
	float stdev = stdev(source, length)
	kurtosis(source, length, mean, stdev)

// @function Calculate Z-score (standard score) assuming a normal distribution
// @param source Distribution source (typically a price or indicator series)
// @param mean the mean (average) of the distribution
// @param stdev the standard deviation (σ) of the distribution
// @return Z-Score
export normal_score(float source, float mean, float stdev) =>
	(source - mean) / stdev

// @function Overloaded normal_score to calculate from source and length
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @return Z-Score
export normal_score(float source, int length) =>
	float mean = mean(source, length)
	float stdev = stdev(source, length)
	normal_score(source, mean, stdev)

// @function Calculate adjusted Z-score considering skewness and kurtosis
// @param source Distribution source (typically a price or indicator series)
// @param mean the mean (average) of the distribution
// @param stdev the standard deviation (σ) of the distribution
// @param skewness the skewness (γ₁) of the distribution
// @param kurtosis the "tailedness" in the distribution
// @return Z-Score
export non_normal_score(float source, float mean, float stdev, float skewness, float kurtosis) =>
	(source - mean) / (stdev * math.sqrt(1 + math.pow(skewness, 2) / 6 + kurtosis / 24))

// @function Overloaded non_normal_score to calculate from source and length
// @param source Distribution source (typically a price or indicator series)
// @param length Window length for the distribution (must be >= 30 for meaningful statistics)
// @return Z-Score
export non_normal_score(float source, int length) =>
	float mean = mean(source, length)
	float stdev = stdev(source, length)
	float skewness = skewness(source, length)
	float kurtosis = kurtosis(source, length)
	non_normal_score(source, mean, stdev, skewness, kurtosis)

// @type Custom type to represent a Gaussian distribution
// @field source Distribution source (typically a price or indicator series)
// @field length Window length for the distribution (must be >= 30 for meaningful statistics)
// @field mode Most frequent value in the distribution
// @field median Middle value separating the greater and lesser halves of the distribution
// @field mean μ (1st central moment) - Average of the distribution
// @field stdev σ or standard deviation (square root of the variance) - Measure of dispersion
// @field variance σ² (2nd central moment) - Squared standard deviation
// @field skewness γ₁ (3rd central moment) - Asymmetry of the distribution
// @field kurtosis γ₂ (4th central moment) - Degree of "tailedness" relative to a normal distribution
// @field normal_score Z-score assuming normal distribution
// @field non_normal_score Adjusted Z-score considering skewness and kurtosis
export type distr
	float source
	int length
	float mode
	float median
	float mean
	float stdev
	float variance
	float skewness
	float kurtosis
	float normal_score
	float non_normal_score

// @function Initialize all statistical fields of the `distr` type
export method init(distr this) =>
	// Check if length >= 30
	if this.length < 30
		runtime.error("Length must be at least 30 for meaningful statistics")
	this.mean := mean(this.source, this.length)
	this.stdev := stdev(this.source, this.length)
	// Check if standard deviation is not null
	if this.stdev == 0
		runtime.error("Standard deviation must not be zero")
	this.skewness := skewness(this.source, this.length, this.mean, this.stdev)
	this.mode := mode(this.mean, this.stdev, this.skewness)
	this.median := median(this.mean, this.stdev, this.skewness)
	this.variance := variance(this.stdev)
	this.kurtosis := kurtosis(this.source, this.length, this.mean, this.stdev)
	this.normal_score := normal_score(this.source, this.mean, this.stdev)
	this.non_normal_score := non_normal_score(this.source, this.mean, this.stdev, this.skewness, this.kurtosis)

// @function Overloaded initializer to set source and length
export method init(distr this, float source, int length) =>
	this.source := source
	this.length := length
	this.init()

//** DEMO **//

// Inputs
src = input.source(close, "Source for Distribution")
len = input.int(50, "Length for Distribution", minval=30)
htf = request.security(syminfo.tickerid, "5", src)

// Initialize distribution
distr dist = distr.new(src, len)
dist.init()

// Plots results
plot(dist.mean, title="Mean", color=color.blue, display = display.all)
plot(dist.median, title="Median", color=color.red, display = display.all)
plot(dist.mode, title="Mode", color=color.green, display = display.all)
plot(dist.stdev, title="Standard Deviation", color=color.orange, display = display.all)
plot(dist.variance, title="Variance", color=color.purple, display = display.all)
plot(dist.skewness, title="Skewness", color=color.yellow, display = display.all)
plot(dist.kurtosis, title="Kurtosis", color=color.gray, display = display.all)
plot(dist.normal_score, title="Normal Score", color=color.aqua, display = display.all)
plot(dist.non_normal_score, title="Non-Normal Score", color=color.fuchsia, display = display.all)