// @ Julien_Eche
// Copyright (c) 2024-present, Julien Eche
// Kalman Filter Oscillator v4 script may be freely distributed under the terms of the GPL-3.0 license.

//@version=5
indicator("Kalman Filter Oscillator v4", overlay=false)

// Inputs with tooltips
input_sigma = input.float(1.0, "Sigma", minval=0.1, maxval=10, tooltip="Controls the smoothness of the Kalman Filter. Lower values (e.g., closer to 0.1) make the filter more sensitive to rapid price changes, capturing short-term fluctuations. Higher values (e.g., closer to 10) smooth out noise and focus on longer-term trends.")
input_tau = input.float(0.01, "Tau", minval=0.001, maxval=1, tooltip="Determines how quickly the filter reacts to price changes. Smaller values (closer to 0.001) make the filter react faster to market movements, while larger values (closer to 1) slow its responsiveness, emphasizing stability.")
input_period = input.int(14, "Period", minval=1, tooltip="Specifies the number of candles used to calculate the high and low values for the oscillator. A shorter period (e.g., 5) makes the indicator more sensitive to recent price changes, while a longer period (e.g., 50) captures broader trends.")
input_M1 = input.float(1.0, "M1 (Short-Term Weight)", tooltip="Adjusts the influence of the short-term component on the combined oscillator. Increasing this value gives more importance to short-term price movements.")
input_M2 = input.float(1.0, "M2 (Long-Term Weight)", tooltip="Adjusts the influence of the long-term component on the combined oscillator. Increasing this value gives more importance to the long-term trend, reducing sensitivity to short-term noise.")
input_N1 = input.float(0.5, "N1 (Short-Term Adjustment)", tooltip="Fine-tunes the short-term filter's response to oscillator changes. Lower values (e.g., 0.1) make it more stable, while higher values (e.g., 1.0) increase its responsiveness.")
input_N2 = input.float(0.9, "N2 (Long-Term Adjustment)", tooltip="Fine-tunes the long-term filter's response to oscillator changes. Lower values (e.g., 0.1) prioritize stability over sensitivity, while higher values (e.g., 1.0) make it more reactive to trend shifts.")
input_q1 = input.float(0.4, "Q1 (Short-Term Noise)", tooltip="Represents the process noise for the short-term component. Higher values allow the short-term state to adapt more flexibly to price changes, while lower values constrain its variability.")
input_q2 = input.float(0.4, "Q2 (Long-Term Noise)", tooltip="Represents the process noise for the long-term component. Higher values make the long-term state more adaptable to trends, while lower values keep it more consistent.")
input_r = input.float(0.7, "R (Measurement Noise)", tooltip="Controls how much the filter trusts observed price changes. Lower values give more weight to the price data, making the filter more reactive. Higher values smooth out noise by reducing the influence of individual price changes.")

input_high_level = input.float(60, title="High Level")
input_low_level = input.float(15, title="Low Level")

display_choice = input.string("Combined Oscillator", title="Select View Mode", 
                               options=["Combined Oscillator", "Short-Term Trend", "Long-Term Trend"])

// Kalman Filter Variables
var float[] state_short = array.new_float(2, 0.0)
var float[] state_long = array.new_float(2, 0.0)
var float[] cov_matrix_short = array.new_float(4, 0.0)
var float[] cov_matrix_long = array.new_float(4, 0.0)
var float result = na
var float result_short = na
var float result_long = na
array.set(cov_matrix_short, 0, 1.0)
array.set(cov_matrix_short, 3, 1.0)
array.set(cov_matrix_long, 0, 1.0)
array.set(cov_matrix_long, 3, 1.0)

var float[] Q_matrix = array.new_float(4, 0.0)
array.set(Q_matrix, 0, input_q1 * input_q1)
array.set(Q_matrix, 1, input_q1 * input_q2)
array.set(Q_matrix, 2, input_q1 * input_q2)
array.set(Q_matrix, 3, input_q2 * input_q2)

var float R = input_r * input_r

// Function to calculate oscillator extrema
f_calc_extrema_oscillator(price) =>
    lowest = ta.lowest(low, input_period)
    highest = ta.highest(high, input_period)
    highest != lowest ? (price - lowest) / (highest - lowest) * 100 : na

// Function to update Kalman filter
f_update_kalman_filter(state, cov_matrix, obs, F, Q, R, H, c) =>
    pred_state = array.new_float(2, 0.0)
    pred_cov = array.new_float(4, 0.0)
    for i = 0 to 1
        value = 0.0
        for j = 0 to 1
            value += array.get(F, i * 2 + j) * array.get(state, j)
        value += array.get(c, i)
        array.set(pred_state, i, value)
    for i = 0 to 1
        for j = 0 to 1
            value = 0.0
            for k = 0 to 1
                value += array.get(F, i * 2 + k) * array.get(cov_matrix, k * 2 + j)
            array.set(pred_cov, i * 2 + j, value)
    for i = 0 to 1
        for j = 0 to 1
            value = array.get(pred_cov, i * 2 + j)
            for k = 0 to 1
                value += array.get(pred_cov, i * 2 + k) * array.get(F, j * 2 + k)
            if i == j
                value += array.get(Q, i * 2 + j)
            array.set(pred_cov, i * 2 + j, value)
    innovation = obs - array.get(pred_state, 0)
    S = array.get(pred_cov, 0) + R
    K = array.new_float(2, 0.0)
    for i = 0 to 1
        array.set(K, i, array.get(pred_cov, i * 2) / S)
    for i = 0 to 1
        array.set(state, i, array.get(pred_state, i) + array.get(K, i) * innovation)
    for i = 0 to 1
        for j = 0 to 1
            value = array.get(pred_cov, i * 2 + j) - array.get(K, i) * array.get(pred_cov, j)
            array.set(cov_matrix, i * 2 + j, value)
    array.get(state, 0)

// Calculate oscillator and Kalman filter states
oscillator = f_calc_extrema_oscillator(close)
if not na(oscillator)
    F = array.new_float(4, 0.0)
    array.set(F, 0, 1.0)
    array.set(F, 1, 1.0)
    array.set(F, 3, 1.0)
    H = array.new_float(2, 0.0)
    array.set(H, 0, 1.0)
    c_short = array.new_float(2, input_M1 - input_N1 * oscillator)
    c_long = array.new_float(2, input_M2 - input_N2 * oscillator)
    result_short := f_update_kalman_filter(state_short, cov_matrix_short, oscillator, F, Q_matrix, R, H, c_short)
    result_long := f_update_kalman_filter(state_long, cov_matrix_long, oscillator, F, Q_matrix, R, H, c_long)
    result := (result_short * input_M1 + result_long * input_M2) / (input_M1 + input_M2)

// Plot the selected line based on user choice
plot(display_choice == "Combined Oscillator" ? result : na, color=color.blue, title="Combined Oscillator")
plot(display_choice == "Short-Term Trend" ? result_short : na, color=color.orange, title="Short-Term Trend")
plot(display_choice == "Long-Term Trend" ? result_long : na, color=color.purple, title="Long-Term Trend")

// Adjust background levels based on selected line
bg_selected_line = display_choice == "Combined Oscillator" ? result : display_choice == "Short-Term Trend" ? result_short : result_long
bg_uptrend = bg_selected_line > input_high_level
bg_downtrend = bg_selected_line < input_low_level

bgcolor(bg_uptrend ? color.new(color.green, 85) : na, title="Uptrend Background")
bgcolor(bg_downtrend ? color.new(color.red, 85) : na, title="Downtrend Background")

// Plot horizontal levels
hline(input_high_level, "High Level", color=color.red, linestyle=hline.style_dotted)
hline(input_low_level, "Low Level", color=color.green, linestyle=hline.style_dotted)
