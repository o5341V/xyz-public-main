// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © LuxAlgo

//@version=5
indicator("Relative Strength Orbital Graph [LuxAlgo]", "LuxAlgo - RSOG", max_lines_count  = 500, max_bars_back    = 500, max_labels_count = 500)
//---------------------------------------------------------------------------------------------------------------------}
//Settings
//---------------------------------------------------------------------------------------------------------------------{
length = input.int(20, 'Calculation Window', minval = 2)

//Symbol A
symABool = input.bool(true,'Symbol A', inline = 'inline0')

symACol = input.color(color.teal,'', inline = 'inline0')

symA = input.symbol('AMD','', inline = 'inline0')

//Symbol B
symBBool = input.bool(true,'Symbol B', inline = 'inline1')

symBCol = input.color(color.yellow,'', inline = 'inline1')

symB = input.symbol('GOOG','', inline = 'inline1')

//Symbol C
symCBool = input.bool(true,'Symbol C', inline = 'inline2')

symCCol = input.color(color.blue,'', inline = 'inline2')

symC = input.symbol('MSFT','', inline = 'inline2')

//Symbol D
symDBool = input.bool(true,'Symbol D', inline = 'inline3')

symDCol = input.color(color.purple,'', inline = 'inline3')

symD = input.symbol('TSLA','', inline = 'inline3')

//Symbol E
symEBool = input.bool(true,'Symbol E', inline = 'inline4')

symECol = input.color(color.orange,'', inline = 'inline4')

symE = input.symbol('AAPL','', inline = 'inline4')

//Benchmark
symBench = input.symbol('SPX','Benchmark')

//Style
trailLen = input.int(10, 'Trail Length', minval = 2, group = 'Graph Settings')

res = input.float(100, 'Scatter Plot Resolution', minval = 0, group = 'Graph Settings')

//---------------------------------------------------------------------------------------------------------------------}
//UDT
//---------------------------------------------------------------------------------------------------------------------{
type rs_components
    float ratio
    float momentum

type area_components
    box area
    label lbl

//---------------------------------------------------------------------------------------------------------------------}
//Functions
//---------------------------------------------------------------------------------------------------------------------{
bench = request.security(symBench,timeframe.period,close)

//Relative Srength Ratio/Momentum Function
rs_ratio_mom(src)=>
    rs = src / bench
    wma_rs = ta.wma(rs, length)
    
    rs_ratio = ta.wma(rs / wma_rs, length) * 100
    rs_mom = rs_ratio / ta.wma(rs_ratio, length) * 100
    
    [rs_ratio,rs_mom]

method add_components(array<rs_components> id, ratio, momentum)=>
    id.unshift(rs_components.new(ratio, momentum))

    if id.size() > trailLen
        id.pop()

method display_trail(array<rs_components> id, css, labels_matrix, labels_idx)=>
    coords = array.new<chart.point>(0)
    get_row = labels_matrix.row(labels_idx)

    n = bar_index

    max_width  = 0
    max_height = 0.
    for [index, element] in id
        max_width := math.max(int(math.abs(element.ratio - 100) * res), max_width) 
        max_height := math.max(math.abs(element.momentum - 100), max_height)

        point = chart.point.from_index(n + int((element.ratio - 100) * res), element.momentum)

        coords.push(point)
        get_row.get(index).set_point(point)

    polyline.delete(polyline.new(coords, line_color = css)[1])

    [max_width, max_height]

//---------------------------------------------------------------------------------------------------------------------}
//Initial Lines/Labels
//---------------------------------------------------------------------------------------------------------------------{
var labels_matrix = matrix.new<label>(0,0)

if barstate.isfirst
    for i = 0 to 4
        array_labels = array.new_label(0)
        
        text_col = switch i
            0 => symACol
            1 => symBCol
            2 => symCCol
            3 => symDCol
            4 => symECol

        for j = 0 to trailLen-1          
            array.push(array_labels
              , label.new(na
              , na
              , text  = j == 0 ? '◆' : '●' 
              , style = label.style_label_center
              , size  = j == 0 ? size.small : size.tiny
              , color = color.new(#2157f3, 100)
              , textcolor = text_col))

        matrix.add_row(labels_matrix, i, array_labels)
    
//---------------------------------------------------------------------------------------------------------------------}
//securities
//---------------------------------------------------------------------------------------------------------------------{
var rs_components_A = array.new<rs_components>(0)
var rs_components_B = array.new<rs_components>(0)
var rs_components_C = array.new<rs_components>(0)
var rs_components_D = array.new<rs_components>(0)
var rs_components_E = array.new<rs_components>(0)

[symA_ratio, symA_mom] = request.security(symA
  , timeframe.period
  , rs_ratio_mom(close))

if symA_ratio != symA_ratio[1]
    rs_components_A.add_components(symA_ratio, symA_mom)

[symB_ratio, symB_mom] = request.security(symB
  , timeframe.period
  , rs_ratio_mom(close))

if symB_ratio != symB_ratio[1]
    rs_components_B.add_components(symB_ratio, symB_mom)

[symC_ratio, symC_mom] = request.security(symC
  , timeframe.period
  , rs_ratio_mom(close))

if symC_ratio != symC_ratio[1]
    rs_components_C.add_components(symC_ratio, symC_mom)

[symD_ratio, symD_mom] = request.security(symD
  , timeframe.period
  , rs_ratio_mom(close))

if symD_ratio != symD_ratio[1]
    rs_components_D.add_components(symD_ratio, symD_mom)

[symE_ratio, symE_mom] = request.security(symE
  , timeframe.period
  , rs_ratio_mom(close))

if symE_ratio != symE_ratio[1]
    rs_components_E.add_components(symE_ratio, symE_mom)

//---------------------------------------------------------------------------------------------------------------------}
//Display Scatter Plot
//---------------------------------------------------------------------------------------------------------------------{
n = bar_index

//Axis
var ratio_axis = label.new(na, na, 'RS-Ratio', color = color(na), textcolor = chart.fg_color, style = label.style_label_up, size = size.small)
var mom_axis = label.new(na, na, 'RS-Momentum', color = color(na), textcolor = chart.fg_color, style = label.style_label_right, size = size.small)

//Areas
var improving = area_components.new(
  box.new(na, na, na, na, na, bgcolor = color.new(#2962ff, 80)),
  label.new(na, na, 'Improving', color = color(na), size = size.small, textcolor = #2962ff, style = label.style_label_right)
  )

var leading = area_components.new(
  box.new(na, na, na, na, na, bgcolor = color.new(#089981, 80)),
  label.new(na, na, 'Leading', color = color(na), size = size.small, textcolor = #089981, style = label.style_label_left)
  )

var lagging = area_components.new(
  box.new(na, na, na, na, na, bgcolor = color.new(#f23645, 80)),
  label.new(na, na, 'Lagging', color = color(na), size = size.small, textcolor = #f23645, style = label.style_label_right)
  )

var weakening = area_components.new(
  box.new(na, na, na, na, na, bgcolor = color.new(color.gray, 80)),
  label.new(na, na, 'Weakening', color = color(na), size = size.small, textcolor = color.gray, style = label.style_label_left)
  )

//Symbol Legends
var tb = table.new(position.middle_right, 1, 5, frame_color = na)

if barstate.isfirst
    if symABool
        table.cell(tb, 0, 0, '◆ ' + syminfo.ticker(symA), text_color  = symACol, text_halign = text.align_left)
      
    if symBBool
        table.cell(tb,0 , 1, '◆ ' + syminfo.ticker(symB), text_color  = symBCol, text_halign = text.align_left)
      
    if symCBool
        table.cell(tb, 0, 2, '◆ ' + syminfo.ticker(symC), text_color  = symCCol, text_halign = text.align_left)
      
    if symDBool
        table.cell(tb, 0, 3, '◆ ' + syminfo.ticker(symD), text_color  = symDCol, text_halign = text.align_left)
      
    if symEBool
        table.cell(tb, 0, 4, '◆ ' + syminfo.ticker(symE), text_color  = symECol, text_halign = text.align_left)
    
//Scatter Plot
if barstate.islast
    max_loc   = 0
    max_range = 0.
    
    rs_ratio       = 0.
    rs_mom         = 0.
    color plot_css = na
    
    max_width = 0
    max_height = 0.

    if symABool
        [max_width_A, max_height_A] = rs_components_A.display_trail(symACol, labels_matrix, 0)
        max_width  := max_width_A
        max_height := max_height_A

    if symBBool
        [max_width_B, max_height_B] = rs_components_B.display_trail(symBCol, labels_matrix, 1)
        max_width  := math.max(max_width_B, max_width)
        max_height := math.max(max_height_B, max_height)

    if symCBool
        [max_width_C, max_height_C] = rs_components_C.display_trail(symCCol, labels_matrix, 2)
        max_width  := math.max(max_width_C, max_width)
        max_height := math.max(max_height_C, max_height)

    if symDBool
        [max_width_D, max_height_D] = rs_components_D.display_trail(symDCol, labels_matrix, 3)
        max_width  := math.max(max_width_D, max_width)
        max_height := math.max(max_height_D, max_height)

    if symEBool
        [max_width_E, max_height_E] = rs_components_E.display_trail(symECol, labels_matrix, 4)
        max_width  := math.max(max_width_E, max_width)
        max_height := math.max(max_height_E, max_height)

    //Set Areas
    improving.area.set_lefttop(n - max_width, 100 + max_height)
    improving.area.set_rightbottom(n, 100)
    improving.lbl.set_xy(n - max_width, 100 + max_height)

    leading.area.set_lefttop(n + max_width, 100 + max_height)
    leading.area.set_rightbottom(n, 100)
    leading.lbl.set_xy(n + max_width, 100 + max_height)

    lagging.area.set_lefttop(n - max_width, 100)
    lagging.area.set_rightbottom(n, 100 - max_height)
    lagging.lbl.set_xy(n - max_width, 100 - max_height)
    
    weakening.area.set_lefttop(n, 100)
    weakening.area.set_rightbottom(n + max_width, 100 - max_height)
    weakening.lbl.set_xy(n + max_width, 100 - max_height)

    //Axis
    ratio_axis.set_xy(n, 100 - max_height)
    mom_axis.set_xy(n - max_width, 100)

//---------------------------------------------------------------------------------------------------------------------}