// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Julien_Eche

//@version=5
indicator("Adaptive Trend Projection", overlay=true)

lengthInput1 = 20
lengthInput2 = 40
lengthInput3 = 60
lengthInput4 = 80
lengthInput5 = 100
lengthInput6 = 120
lengthInput7 = 140
lengthInput8 = 160
lengthInput9 = 180
lengthInput10 = 200

// Line style inputs
linewidth = input(1, "Line Width")
highlightedLinewidth = input(3, "Highlighted Line Width")
lineStyleString = input.string("Dotted", title="Line Style", options=["Solid", "Dashed", "Dotted"])
linestyle = lineStyleString == "Solid" ? line.style_solid : (lineStyleString == "Dashed" ? line.style_dashed : line.style_dotted)

sourceInput = input(hlc3, title="Source")

forecast = 50

// Input to show/hide the table
showTable = input(true, "Show Table")

// Function to calculate slope
calcSlope(source, length) =>
    max_bars_back(source, 5000)
    if not barstate.islast or length <= 1
        [float(na), float(na), float(na)]
    else
        sumX = 0.0
        sumY = 0.0
        sumXSqr = 0.0
        sumXY = 0.0
        for i = 0 to length - 1 by 1
            val = source[i]  // Use the original source values
            per = i + 1.0
            sumX += per
            sumY += val
            sumXSqr += per * per
            sumXY += val * per
        slope = (length * sumXY - sumX * sumY) / (length * sumXSqr - sumX * sumX)
        average = sumY / length
        intercept = average - slope * sumX / length + slope
        [slope, average, intercept]

// Function to calculate deviation
calcDev(source, length, slope, average, intercept) =>
    upDev = 0.0
    dnDev = 0.0
    stdDevAcc = 0.0
    dsxx = 0.0
    dsyy = 0.0
    dsxy = 0.0
    periods = length - 1
    daY = intercept + slope * periods / 2
    val = intercept
    for j = 0 to periods by 1
        price = high[j] - val  // Use the original high values
        if price > upDev
            upDev := price
        price := val - low[j]  // Use the original low values
        if price > dnDev
            dnDev := price
        price := source[j]  // Use the original source values
        dxt = price - average
        dyt = val - daY
        price -= val
        stdDevAcc += price * price
        dsxx += dxt * dxt
        dsyy += dyt * dyt
        dsxy += dxt * dyt
        val += slope
    stdDev = math.sqrt(stdDevAcc / (periods == 0 ? 1 : periods))
    pearsonR = dsxx == 0 or dsyy == 0 ? 0 : dsxy / math.sqrt(dsxx * dsyy)
    [stdDev, pearsonR, upDev, dnDev]

// Calculate slopes and deviations for each length
[s1, a1, i1] = calcSlope(sourceInput, lengthInput1)
[s2, a2, i2] = calcSlope(sourceInput, lengthInput2)
[s3, a3, i3] = calcSlope(sourceInput, lengthInput3)
[s4, a4, i4] = calcSlope(sourceInput, lengthInput4)
[s5, a5, i5] = calcSlope(sourceInput, lengthInput5)
[s6, a6, i6] = calcSlope(sourceInput, lengthInput6)
[s7, a7, i7] = calcSlope(sourceInput, lengthInput7)
[s8, a8, i8] = calcSlope(sourceInput, lengthInput8)
[s9, a9, i9] = calcSlope(sourceInput, lengthInput9)
[s10, a10, i10] = calcSlope(sourceInput, lengthInput10)

// Calculate deviations for each length
[stdDev1, pearsonR1, upDev1, dnDev1] = calcDev(sourceInput, lengthInput1, s1, a1, i1)
[stdDev2, pearsonR2, upDev2, dnDev2] = calcDev(sourceInput, lengthInput2, s2, a2, i2)
[stdDev3, pearsonR3, upDev3, dnDev3] = calcDev(sourceInput, lengthInput3, s3, a3, i3)
[stdDev4, pearsonR4, upDev4, dnDev4] = calcDev(sourceInput, lengthInput4, s4, a4, i4)
[stdDev5, pearsonR5, upDev5, dnDev5] = calcDev(sourceInput, lengthInput5, s5, a5, i5)
[stdDev6, pearsonR6, upDev6, dnDev6] = calcDev(sourceInput, lengthInput6, s6, a6, i6)
[stdDev7, pearsonR7, upDev7, dnDev7] = calcDev(sourceInput, lengthInput7, s7, a7, i7)
[stdDev8, pearsonR8, upDev8, dnDev8] = calcDev(sourceInput, lengthInput8, s8, a8, i8)
[stdDev9, pearsonR9, upDev9, dnDev9] = calcDev(sourceInput, lengthInput9, s9, a9, i9)
[stdDev10, pearsonR10, upDev10, dnDev10] = calcDev(sourceInput, lengthInput10, s10, a10, i10)

// Find the highest Pearson's R value
highestPearsonR = math.max(pearsonR1, pearsonR2, pearsonR3, pearsonR4, pearsonR5, pearsonR6, pearsonR7, pearsonR8, pearsonR9, pearsonR10)

selectedLength = highestPearsonR == pearsonR1 ? lengthInput1 : (highestPearsonR == pearsonR2 ? lengthInput2 : (highestPearsonR == pearsonR3 ? lengthInput3 : (highestPearsonR == pearsonR4 ? lengthInput4 : (highestPearsonR == pearsonR5 ? lengthInput5 : (highestPearsonR == pearsonR6 ? lengthInput6 : (highestPearsonR == pearsonR7 ? lengthInput7 : (highestPearsonR == pearsonR8 ? lengthInput8 : (highestPearsonR == pearsonR9 ? lengthInput9 : lengthInput10))))))))

if selectedLength == 200 or selectedLength == 180
    forecast := 25
if selectedLength == 140 or selectedLength == 160
    forecast := 20
if selectedLength == 100 or selectedLength == 120
    forecast := 15
if selectedLength == 60 or selectedLength == 80
    forecast := 10
if selectedLength == 20 or selectedLength == 40
    forecast := 5

// Function to draw a line with selected style, color, and width
DrawLine(x1, y1, x2, y2, emphasizeLastPoint) =>
    clr = y1 < y2 ? color.teal : color.red
    lineStyle = emphasizeLastPoint ? line.style_solid : linestyle
    lineWidth = emphasizeLastPoint ? highlightedLinewidth : linewidth
    line.new(x1, y1, x2, y2, xloc.bar_index, color=clr, width=lineWidth, style=lineStyle)

// Calculate the slope of the linear regression line
slope = (ta.linreg(sourceInput, selectedLength, 0) - nz(ta.linreg(sourceInput, selectedLength, 1))) / 1

// If it is the last bar of historical data, then draw lines representing the forecast and show the table
if barstate.islast
    y1 = close
    totalGain = 0.0
    for i = 1 to forecast
        y2 = y1 + slope
        totalGain := totalGain + ((y2 - y1) / y1) * 100
        if i == forecast
            // Highlight the last point with a different style
            clr = y1 < y2 ? color.teal : color.red
            line.new(bar_index + i - 1, y1, bar_index + i, y2, width=highlightedLinewidth, color=clr, style=line.style_solid)
        else
            DrawLine(bar_index + i - 1, y1, bar_index + i, y2, false)
        y1 := y2

    // Calculate the duration in periods
    duration = forecast

    // Create a table with 3 rows and 3 columns if the user chooses to show the table
    if showTable
        table t = table.new(position = position.top_right, columns = 1, rows = 2)
        
        // Calculate the confidence level based on the highest Pearson's R
        confidenceLevel = ""
        if highestPearsonR < 0.6
            confidenceLevel := "Neutral"
        else if highestPearsonR < 0.85
            confidenceLevel := "Moderate"
        else if highestPearsonR < 0.9
            confidenceLevel := "High"
        else if highestPearsonR < 0.95
            confidenceLevel := "Very High"
        else if highestPearsonR < 0.98
            confidenceLevel := "Very High"
        else
            confidenceLevel := "Ultra High"
    
        table.cell(t, 0, 0, "Trend Projection Reliability: " + confidenceLevel, text_color=color.silver, text_size=size.normal)
        gainLossText = "Expected Performance: " + str.tostring(totalGain >= 0 ? totalGain : totalGain * -1, "#.##") + "%"
        textColor = totalGain >= 0 ? color.teal : color.red
        table.cell(t, 0, 1, gainLossText, text_color=textColor, text_size=size.normal)
