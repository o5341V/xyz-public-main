//This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
//© BobRivera990

//@version=5
indicator("[Weekly Volume Heatmap]", overlay = false)

// ——————————[Constants and inputs]———————————————————————————————————————————————————————————————————————————————————————————— {

// ———————————————————————— << Constants used in inputs >>

// Groups
var string GP01         = "Background Color"
var string GP02         = "Text Color"

// Colors 
var color  LOW_COLOR    = color.rgb(255,   241,    118,    0)
var color  HIGH_COLOR   = color.rgb(233,   30,     99,     0)

// inputs
cellLowColorInput  = input.color(LOW_COLOR,            "Low Color",                inline = "01", group = GP01)
cellHighColorInput = input.color(HIGH_COLOR,           "High Color",               inline = "02", group = GP01)

textLowColorInput  = input.color(color.black,          "Low Color",                inline = "03", group = GP02)
textHighColorInput = input.color(color.yellow,         "High Color",               inline = "04", group = GP02)

// ————— Constants used in calculations

var bool IS_CORRECT_TIMEFRAME = timeframe.isminutes and timeframe.multiplier == 60

// Dialog Box Messages
var string DBOX_TIMEFRAME   = "Please use 1-hour timeframe!!!"
var string DBOX_DATA        = "The data vendor doesn't provide volume data for this symbol!"

// } ————————[Constants and inputs]

// ——————————[functions]——————————————————————————————————————————————————————————————————————————————————————————————————————— {

// Calculate the average trading volume (in each 1-hour period)
getAvgVol(_cumArray, _cntArray, _index) =>
    float   _cum = array.get(_cumArray, _index)
    int     _cnt = array.get(_cntArray, _index)

    float   _avgVol = _cnt == 0 ? 0 : _cum / _cnt
    
// Calculate the minimum average trading volume
getMinVol(_sunAvgArray, _monAvgArray, _tueAvgArray, _wedAvgArray, _thrAvgArray, _friAvgArray, _satAvgArray) =>
    float _min1 = array.min(_sunAvgArray)
    float _min2 = array.min(_monAvgArray)
    float _min3 = array.min(_tueAvgArray)
    float _min4 = array.min(_wedAvgArray)
    float _min5 = array.min(_thrAvgArray)
    float _min6 = array.min(_friAvgArray)
    float _min7 = array.min(_satAvgArray)
    
    float _minVol = math.min(_min1, _min2, _min3, _min4, _min5, _min6, _min7)

// Calculate the maximum average trading volume
getMaxVol(_sunAvgArray, _monAvgArray, _tueAvgArray, _wedAvgArray, _thrAvgArray, _friAvgArray, _satAvgArray) =>
    float _max1 = array.max(_sunAvgArray)
    float _max2 = array.max(_monAvgArray)
    float _max3 = array.max(_tueAvgArray)
    float _max4 = array.max(_wedAvgArray)
    float _max5 = array.max(_thrAvgArray)
    float _max6 = array.max(_friAvgArray)
    float _max7 = array.max(_satAvgArray)
    
    float _maxVol = math.max(_max1, _max2, _max3, _max4, _max5, _max6, _max7)
    
// Calculate average weekly trading volume
getTotalVol(_sunAvgArray, _monAvgArray, _tueAvgArray, _wedAvgArray, _thrAvgArray, _friAvgArray, _satAvgArray) =>
    float _sum1 = array.sum(_sunAvgArray)
    float _sum2 = array.sum(_monAvgArray)
    float _sum3 = array.sum(_tueAvgArray)
    float _sum4 = array.sum(_wedAvgArray)
    float _sum5 = array.sum(_thrAvgArray)
    float _sum6 = array.sum(_friAvgArray)
    float _sum7 = array.sum(_satAvgArray)
    
    float _totalVol = _sum1 + _sum2 + _sum3 + _sum4 + _sum5 + _sum6 + _sum7

// A function to fill a cell of the table
fillCell(_table, _columnId, _rowId, _avgArray, _minVol, _maxVol , _totalVol) =>
    float   _avgVol     = array.get(_avgArray, _columnId - 1)
    float   _share      = _avgVol / _totalVol
    string  _cellText   = str.tostring(_share, "0.00%")
    color   _bgColor    = color.from_gradient(_avgVol, _minVol, _maxVol, cellLowColorInput,  cellHighColorInput)
    color   _textColor  = color.from_gradient(_avgVol, _minVol, _maxVol, textLowColorInput,  textHighColorInput)
    
    table.cell(_table, _columnId, _rowId, _cellText, text_color = _textColor, bgcolor = _bgColor)

// A function to fill a column of the table    
fillColumn(_table, _columnId, _sunAvgArray, _monAvgArray, _tueAvgArray, _wedAvgArray, _thrAvgArray, _friAvgArray, _satAvgArray, _minVol, _maxVol , _totalVol) =>
    string _header = str.tostring(_columnId - 1, "00")
    table.cell(_table,  _columnId,  0, _header , text_color = color.white, bgcolor = color.black)
    
    fillCell(_table,    _columnId,  1,  _sunAvgArray,   _minVol,    _maxVol ,   _totalVol)
    fillCell(_table,    _columnId,  2,  _monAvgArray,   _minVol,    _maxVol ,   _totalVol)
    fillCell(_table,    _columnId,  3,  _tueAvgArray,   _minVol,    _maxVol ,   _totalVol)
    fillCell(_table,    _columnId,  4,  _wedAvgArray,   _minVol,    _maxVol ,   _totalVol)
    fillCell(_table,    _columnId,  5,  _thrAvgArray,   _minVol,    _maxVol ,   _totalVol)
    fillCell(_table,    _columnId,  6,  _friAvgArray,   _minVol,    _maxVol ,   _totalVol)
    fillCell(_table,    _columnId,  7,  _satAvgArray,   _minVol,    _maxVol ,   _totalVol)
    
showDialog(_dialogBox, _dialog) =>
    table.cell(_dialogBox,   0,  0,  _dialog,   text_color = color.red,     text_size = size.large)
    
// } ————————[functions]

// ——————————[calculations]———————————————————————————————————————————————————————————————————————————————————————————————————— {

// Arrays that store the total trading volume for each 1-hour period of a day
var float[] sunCumArray = array.new_float(24, 0.0)
var float[] monCumArray = array.new_float(24, 0.0)
var float[] tueCumArray = array.new_float(24, 0.0)
var float[] wedCumArray = array.new_float(24, 0.0)
var float[] thuCumArray = array.new_float(24, 0.0)
var float[] friCumArray = array.new_float(24, 0.0)
var float[] satCumArray = array.new_float(24, 0.0)

// Arrays that store the number of repetitions of each 1-hour period of a day
var int[]   sunCntArray = array.new_int(24, 0)
var int[]   monCntArray = array.new_int(24, 0)
var int[]   tueCntArray = array.new_int(24, 0)
var int[]   wedCntArray = array.new_int(24, 0)
var int[]   thuCntArray = array.new_int(24, 0)
var int[]   friCntArray = array.new_int(24, 0)
var int[]   satCntArray = array.new_int(24, 0)

// Arrays that store the average trading volume for each 1-hour period of a day
var float[] sunAvgArray = array.new_float(24, 0)
var float[] monAvgArray = array.new_float(24, 0)
var float[] tueAvgArray = array.new_float(24, 0)
var float[] wedAvgArray = array.new_float(24, 0)
var float[] thuAvgArray = array.new_float(24, 0)
var float[] friAvgArray = array.new_float(24, 0)
var float[] satAvgArray = array.new_float(24, 0)


var float   minVOl      = na
var float   maxVol      = na
var float   totalVol    = na

var bool    cndNoData   = false

// Day of week (of current bar)
int barDay  = dayofweek(time)
// Hour (of current bar)
int barHour = hour(time)

if IS_CORRECT_TIMEFRAME
    // Calculate the total  trading volume (for each 1-hour period) bar by bar and store it in CumArrays
    // Calculate the number of repetitions (of  each 1-hour period) bar by bar and store it in CntArrays
    switch barDay
        1 => array.set(sunCumArray, barHour, array.get(sunCumArray, barHour) + nz(volume)), array.set(sunCntArray, barHour, array.get(sunCntArray, barHour) + 1)
        2 => array.set(monCumArray, barHour, array.get(monCumArray, barHour) + nz(volume)), array.set(monCntArray, barHour, array.get(monCntArray, barHour) + 1)
        3 => array.set(tueCumArray, barHour, array.get(tueCumArray, barHour) + nz(volume)), array.set(tueCntArray, barHour, array.get(tueCntArray, barHour) + 1)
        4 => array.set(wedCumArray, barHour, array.get(wedCumArray, barHour) + nz(volume)), array.set(wedCntArray, barHour, array.get(wedCntArray, barHour) + 1)
        5 => array.set(thuCumArray, barHour, array.get(thuCumArray, barHour) + nz(volume)), array.set(thuCntArray, barHour, array.get(thuCntArray, barHour) + 1)
        6 => array.set(friCumArray, barHour, array.get(friCumArray, barHour) + nz(volume)), array.set(friCntArray, barHour, array.get(friCntArray, barHour) + 1)
        7 => array.set(satCumArray, barHour, array.get(satCumArray, barHour) + nz(volume)), array.set(satCntArray, barHour, array.get(satCntArray, barHour) + 1)
     
    if barstate.islast 
        // In the last bar, calculate the average trading volume for each 1-hour period and store it in the AvgArrays
        float _avg = na
        for _hour = 0 to 23
            _avg := getAvgVol(sunCumArray, sunCntArray, _hour)
            array.set(sunAvgArray, _hour, _avg)
            
            _avg := getAvgVol(monCumArray, monCntArray, _hour)
            array.set(monAvgArray, _hour, _avg)
            
            _avg := getAvgVol(tueCumArray, tueCntArray, _hour)
            array.set(tueAvgArray, _hour, _avg)
            
            _avg := getAvgVol(wedCumArray, wedCntArray, _hour)
            array.set(wedAvgArray, _hour, _avg)
            
            _avg := getAvgVol(thuCumArray, thuCntArray, _hour)
            array.set(thuAvgArray, _hour, _avg)
            
            _avg := getAvgVol(friCumArray, friCntArray, _hour)
            array.set(friAvgArray, _hour, _avg)
            
            _avg := getAvgVol(satCumArray, satCntArray, _hour)
            array.set(satAvgArray, _hour, _avg)
            
            // The minimum trading volume over all 1-hour periods of the week
            minVOl      := getMinVol(sunAvgArray,    monAvgArray, tueAvgArray, wedAvgArray, thuAvgArray, friAvgArray, satAvgArray)
            // The maximum trading volume over all 1-hour periods of the week
            maxVol      := getMaxVol(sunAvgArray,    monAvgArray, tueAvgArray, wedAvgArray, thuAvgArray, friAvgArray, satAvgArray)
            // The average weekly trading volume
            totalVol    := getTotalVol(sunAvgArray,  monAvgArray, tueAvgArray, wedAvgArray, thuAvgArray, friAvgArray, satAvgArray)
            
            cndNoData := totalVol > 0 

// } ————————[calculations]

// ——————————[Drawing Tools]——————————————————————————————————————————————————————————————————————————————————————————————————— {

var table mainTable = table.new(position.bottom_center,   25,   8, bgcolor = color.white)
var table dialogBox = table.new(position.middle_center, 1,    1, bgcolor = color.yellow)

if barstate.islast
    if IS_CORRECT_TIMEFRAME and cndNoData 
    
        table.cell(mainTable, 0, 0, "",     text_color = color.white,   bgcolor = color.black)
        
        // Display the title of each row of the table
        table.cell(mainTable, 0, 1, "Sun",  text_color = color.white,   bgcolor = color.black)
        table.cell(mainTable, 0, 2, "Mon",  text_color = color.white,   bgcolor = color.black)
        table.cell(mainTable, 0, 3, "Tue",  text_color = color.white,   bgcolor = color.black)
        table.cell(mainTable, 0, 4, "Wed",  text_color = color.white,   bgcolor = color.black)
        table.cell(mainTable, 0, 5, "Thu",  text_color = color.white,   bgcolor = color.black)
        table.cell(mainTable, 0, 6, "Fri",  text_color = color.white,   bgcolor = color.black)
        table.cell(mainTable, 0, 7, "Sat",  text_color = color.white,   bgcolor = color.black)
        
        // Fill the remaining cells of the table
        for _columnId = 1 to 24
            fillColumn(mainTable, _columnId, sunAvgArray, monAvgArray, tueAvgArray, wedAvgArray, thuAvgArray, friAvgArray, satAvgArray, minVOl, maxVol , totalVol)
    
    // Ask the user (if necessary) to use the appropriate timeframe
    if not IS_CORRECT_TIMEFRAME
        showDialog(dialogBox, DBOX_TIMEFRAME)
    else if not cndNoData
        showDialog(dialogBox, DBOX_DATA)

// } ————————[Drawing Tools]