// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © PineCodersTASC
//  TASC Issue: July 2024 - Vol. 42
//     Article: Trading Opening Gaps
//              And Extreme Closes In Stocks.
//  Article By: Perry J. Kaufman
//    Language: TradingView's Pine Script™ v5
// Provided By: PineCoders, for tradingview.com

//@version=5
string title  = 'TASC 2024.07 Gaps and Extreme Closes'
string stitle = 'G&C'
indicator(title, stitle, false)

//#region   Inputs:
string it0  = "Opening Gaps"
string it1  = "Extreme Closes"
string it2  = "Upward"
string it3  = "Downward"
string out1 = input.string(it0, "Output",    [it0, it1])
string out2 = input.string(it2, "Direction", [it2, it3])
//#endregion

//#region   Data structures:
type Threshold
    int   gap_freq_up   = 0
    int   gap_freq_dn   = 0
    float gap_up        = 0.0
    float gap_dn        = 0.0
    float gap_up_pb     = 0.0
    float gap_dn_pb     = 0.0
    float gap_up_close  = 0.0
    float gap_dn_close  = 0.0
    int   close_freq_up = 0
    int   close_freq_dn = 0
    float close_up      = 0.0
    float close_dn      = 0.0
    float next_open_up  = 0.0
    float next_open_dn  = 0.0
    float next_close_up = 0.0
    float next_close_dn = 0.0

type Data
    array<float>          thresholds
    map<float, Threshold> bins
//#endregion

//#region   Functions:
get_data () =>
    // Gap bins threshold levels:
    // ( 0.01, 0.03, 0.05, 0.07, 0.09, 0.11, >0.11 )
    var thresholds = array.new<float>(7)
    var bins = map.new<float, Threshold>()
    if barstate.isfirst
        float x = -0.01
        for _i = 0 to 6
            x += 0.02
            thresholds.set(_i, x)
            bins.put(x, Threshold.new())
    // Gap logic:
    float gap = open / close[1] - 1.0
    // opening gap higher:
    if gap > 0.0
        int saveindex = 0
        bool found = false
        for _i = 0 to 6
            if not found
                if gap < thresholds.get(_i)
                    found := true
                    bini = bins.get(thresholds.get(_i))
                    bini.gap_freq_up += 1
                    bini.gap_up += gap
                    saveindex := _i
        if not found
            bini = bins.get(thresholds.get(6))
            bini.gap_freq_up += 1
            bini.gap_up += gap
            saveindex := 6
        // pullback from gap higher:
        bini = bins.get(thresholds.get(saveindex))
        float gap_pb = low / open - 1.0
        bini.gap_up_pb += gap_pb
        // close relative to gap open:
        float gap_close = close / open - 1.0
        bini.gap_up_close += gap_close
    // opening gap lower:
    if gap < 0.0
        float agap = math.abs(gap)
        int saveindex = 0
        bool found = false
        for _i = 0 to 6
            if not found
                if agap < thresholds.get(_i)
                    found := true
                    bini = bins.get(thresholds.get(_i))
                    bini.gap_freq_dn += 1
                    bini.gap_dn += agap
                    saveindex := _i
        if not found
            bini = bins.get(thresholds.get(6))
            bini.gap_freq_dn += 1
            bini.gap_dn += agap
            saveindex := 6
        // upward pullback from gap lower:
        bini = bins.get(thresholds.get(saveindex))
        float gap_pb = high / open - 1.0
        bini.gap_dn_pb += gap_pb
        // close relative to gap open:
        float gap_close = close / open - 1.0
        bini.gap_dn_close += gap_close
    // Extreme close logic:
    float extreme_close = close / close[1] - 1.0
    // extreme close higher:
    if extreme_close > 0.0
        int saveindex = 0
        bool found = false
        for _i = 0 to 6
            if not found
                if extreme_close < thresholds.get(_i)
                    found := true
                    bini = bins.get(thresholds.get(_i))
                    bini.close_freq_up += 1
                    bini.close_up += extreme_close
                    saveindex := _i
        if not found
            bini = bins.get(thresholds.get(6))
            bini.close_freq_up += 1
            bini.close_up += extreme_close
            saveindex := 6
        // next open and close:
        bini = bins.get(thresholds.get(saveindex))
        bini.next_open_up += open / close[1] - 1.0
        bini.next_close_up += close / close[1] - 1.0
    // extreme close lower:
    if extreme_close < 0.0
        float aextreme_close = math.abs(extreme_close)
        int saveindex = 0
        bool found = false
        for _i = 0 to 6
            if not found
                if aextreme_close < thresholds.get(_i)
                    found := true
                    bini = bins.get(thresholds.get(_i))
                    bini.close_freq_dn += 1
                    bini.close_dn += aextreme_close
                    saveindex := _i
        if not found
            bini = bins.get(thresholds.get(6))
            bini.close_freq_up += 1
            bini.close_up += aextreme_close
            saveindex := 6
        // next open and close:
        bini = bins.get(thresholds.get(saveindex))
        bini.next_open_dn += open / close[1] - 1.0
        bini.next_close_dn += close / close[1] - 1.0
    Data data = Data.new(thresholds, bins)
    data
//#endregion

//#region   Data to lists:
method get_gaps_up_freq (Data data) =>
    array<int> _freq = array.new<int>(7, int(na))
    for [_i, _thrs] in data.thresholds
        _freq.set(_i, data.bins.get(_thrs).gap_freq_up)
    _freq

method get_gaps_dn_freq (Data data) =>
    array<int> _freq = array.new<int>(7, int(na))
    for [_i, _thrs] in data.thresholds
        _freq.set(_i, data.bins.get(_thrs).gap_freq_dn)
    _freq

method get_gaps_up_pb (Data data) =>
    array<float> _pb = array.new<float>(7, float(na))
    for [_i, _thrs] in data.thresholds
        float _pbi = data.bins.get(_thrs).gap_up_pb
        int   _fqi = data.bins.get(_thrs).gap_freq_up
        if _fqi != 0 // protect against div by 0
            _pb.set(_i, _pbi / _fqi)
    _pb

method get_gaps_dn_pb (Data data) =>
    array<float> _pb = array.new<float>(7, float(na))
    for [_i, _thrs] in data.thresholds
        float _pbi = data.bins.get(_thrs).gap_dn_pb
        int   _fqi = data.bins.get(_thrs).gap_freq_dn
        if _fqi != 0 // protect against div by 0
            _pb.set(_i, _pbi / _fqi)
    _pb

method get_gaps_up_close_vs_open (Data data) =>
    array<float> _cvo = array.new<float>(7, float(na))
    for [_i, _thrs] in data.thresholds
        float _pi = data.bins.get(_thrs).gap_up_close
        int  _fqi = data.bins.get(_thrs).gap_freq_up
        if _fqi != 0 // protect against div by 0
            _cvo.set(_i, _pi / _fqi)
    _cvo

method get_gaps_dn_close_vs_open (Data data) =>
    array<float> _cvo = array.new<float>(7, float(na))
    for [_i, _thrs] in data.thresholds
        float _pi = data.bins.get(_thrs).gap_dn_close
        int  _fqi = data.bins.get(_thrs).gap_freq_dn
        if _fqi != 0 // protect against div by 0
            _cvo.set(_i, _pi / _fqi)
    _cvo

method get_close_up_freq (Data data) =>
    array<int> _freq = array.new<int>(7, int(na))
    for [_i, _thrs] in data.thresholds
        _freq.set(_i, data.bins.get(_thrs).close_freq_up)
    _freq

method get_close_dn_freq (Data data) =>
    array<int> _freq = array.new<int>(7, int(na))
    for [_i, _thrs] in data.thresholds
        _freq.set(_i, data.bins.get(_thrs).close_freq_dn)
    _freq

method get_close_up_next_open (Data data) =>
    array<float> _pb = array.new<float>(7, float(na))
    for [_i, _thrs] in data.thresholds
        float _pi = data.bins.get(_thrs).next_open_up
        int   _fi = data.bins.get(_thrs).close_freq_up
        if _fi != 0 // protect against div by 0
            _pb.set(_i, _pi / _fi)
    _pb

method get_close_dn_next_open (Data data) =>
    array<float> _pb = array.new<float>(7, float(na))
    for [_i, _thrs] in data.thresholds
        float _pi = data.bins.get(_thrs).next_open_dn
        int   _fi = data.bins.get(_thrs).close_freq_dn
        if _fi != 0 // protect against div by 0
            _pb.set(_i, _pi / _fi)
    _pb

method get_close_up_next_close (Data data) =>
    array<float> _cvo = array.new<float>(7, float(na))
    for [_i, _thrs] in data.thresholds
        float _pi = data.bins.get(_thrs).next_close_up
        int   _fi = data.bins.get(_thrs).close_freq_up
        if _fi != 0 // protect against div by 0
            _cvo.set(_i, _pi / _fi)
    _cvo

method get_close_dn_next_close (Data data) =>
    array<float> _cvo = array.new<float>(7, float(na))
    for [_i, _thrs] in data.thresholds
        float _pi = data.bins.get(_thrs).next_close_dn
        int   _fi = data.bins.get(_thrs).close_freq_dn
        if _fi != 0 // protect against div by 0
            _cvo.set(_i, _pi / _fi)
    _cvo
//#endregion

//#region   Table:
method gap_table (Data data, bool gaps, bool dir) =>
    table _tbl = table.new(position.bottom_center, 8, 5)
    string _title = switch gaps
        true  => dir ? 'GAP UP' : 'GAP DOWN'
        false => dir ? 'CLOSE UP' : 'CLOSE DOWN'
    color _col_bg = color.rgb(200, 208, 231)
    color _col_bg_title = color.rgb(160, 170, 180)
    color _col_bg_dir = dir ? color.lime : color.orange
    _tbl.cell(0, 0, _title, bgcolor=_col_bg_title)
    _tbl.cell(7, 0, _title, bgcolor=_col_bg_title)
    _tbl.merge_cells(0, 0, 7, 0)
    _tbl.cell(0, 1, 'Ranges:', bgcolor=_col_bg_dir)
    _tbl.cell(0, 2, 'Frequency:', bgcolor=_col_bg_dir)
    _tbl.cell(0, 3, 'Pullback:', bgcolor=_col_bg_dir)
    _tbl.cell(0, 4, 'Close vs Open:', bgcolor=_col_bg_dir)
    array<int> _freq  = switch gaps 
        true  => dir ? data.get_gaps_up_freq() :
                       data.get_gaps_dn_freq()
        false => dir ? data.get_close_up_freq() :
                       data.get_close_dn_freq()
    array<float> _pb  = switch gaps 
        true  => dir ? data.get_gaps_up_pb() :
                       data.get_gaps_dn_pb()
        false => dir ? data.get_close_up_next_open() :
                       data.get_close_dn_next_open()
    array<float> _cvo  = switch gaps 
        true  => dir ? data.get_gaps_up_close_vs_open() :
                       data.get_gaps_dn_close_vs_open()
        false => dir ? data.get_close_up_next_close() :
                       data.get_close_dn_next_close()
    for [_i, _thrs] in data.thresholds
        _r = str.tostring(_i*2-1)+'-'+str.tostring(_i*2+1)+'%'
        _tbl.cell(1+_i, 1, _r, bgcolor=_col_bg_dir)
        _tbl.cell(1+_i, 2, str.format('{0,number,integer}', 
                             _freq.get(_i)), bgcolor=_col_bg)
        _tbl.cell(1+_i, 3, str.format('{0,number,#.##%}', 
                             _pb.get(_i)), bgcolor=_col_bg)
        _tbl.cell(1+_i, 4, str.format('{0,number,#.##%}', 
                             _cvo.get(_i)), bgcolor=_col_bg)
    _tbl.cell(1, 1, '<1%', bgcolor=_col_bg_dir)
    _tbl.cell(7, 1, '>11%', bgcolor=_col_bg_dir)
    _tbl
//#endregion

//#region   Calculations:
bool  gaps = out1 == it0
bool  dir  = out2 == it2
data = get_data()
if barstate.islastconfirmedhistory
    table tb = data.gap_table(gaps, dir)
//#endregion
