// This work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © Trendoscope Pty Ltd
//                                       ░▒             
//                                  ▒▒▒   ▒▒      
//                              ▒▒▒▒▒     ▒▒      
//                      ▒▒▒▒▒▒▒░     ▒     ▒▒          
//                  ▒▒▒▒▒▒           ▒     ▒▒          
//             ▓▒▒▒       ▒        ▒▒▒▒▒▒▒▒▒▒▒  
//   ▒▒▒▒▒▒▒▒▒▒▒ ▒        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒         
//   ▒  ▒       ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░        
//   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒         
//   ▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒                       
//    ▒▒▒▒▒         ▒▒▒▒▒▒▒                            
//                 ▒▒▒▒▒▒▒▒▒                           
//                ▒▒▒▒▒ ▒▒▒▒▒                          
//               ░▒▒▒▒   ▒▒▒▒▓      ████████╗██████╗ ███████╗███╗   ██╗██████╗  ██████╗ ███████╗ ██████╗ ██████╗ ██████╗ ███████╗
//              ▓▒▒▒▒     ▒▒▒▒      ╚══██╔══╝██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔═══██╗██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔════╝
//              ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒        ██║   ██████╔╝█████╗  ██╔██╗ ██║██║  ██║██║   ██║███████╗██║     ██║   ██║██████╔╝█████╗ 
//             ▒▒▒▒▒       ▒▒▒▒▒       ██║   ██╔══██╗██╔══╝  ██║╚██╗██║██║  ██║██║   ██║╚════██║██║     ██║   ██║██╔═══╝ ██╔══╝  
//            ▒▒▒▒▒         ▒▒▒▒▒      ██║   ██║  ██║███████╗██║ ╚████║██████╔╝╚██████╔╝███████║╚██████╗╚██████╔╝██║     ███████╗
//             ▒▒             ▒                        
//@version=5
indicator("Oscillator Scatterplot Analysis [Trendoscope®]")
import TradingView/ta/7
import HeWhoMustNotBeNamed/ta/1 as eta
import Trendoscope/Graph/2 as gr

sourceType = input.string('rsi', 'Indicator', ['rsi', 'cci', 'cmo', 'cog', 'mfi', 'roc', 'price'], tooltip = 'Indicator Source',
                 group='Oscillator', display = display.none)
length = input.int(14, 'Length', minval=5, step=5, tooltip = 'Oscillator Length', group = 'Oscillator', display = display.none)
bandType = input.string('bb', 'OB/OS Method', ['bb', 'kc', 'dc1', 'dc2'], tooltip = 'Different ways to identify overbought-oversold criteria. Here we are using bands instead of constant values',
                         group = 'Band', display = display.none)
bandLength = input.int(20, 'Length', minval=5, step=5, tooltip = 'Band Length', group = 'Band', display = display.none)
multiplier = input.float(2, 'Multiplier', minval=0.5, step=0.5, tooltip = 'Band multiplier to be used for BB and KC', group = 'Band', display = display.none)

graphType = input.enum(gr.GraphType.scatterplot, 'Type', group='Graph', display = display.none, tooltip = 'Graph Type - scatterlpot or heatmap')
plotColor = input.color(color.yellow, 'Plot Color', group='Graph', display = display.none, tooltip = 'Color in which the graph needs to be plotted')
plotsize = input.string(size.large, 'Plot Size', [size.tiny, size.small, size.normal, size.large, size.huge], 'Size of the cells in the table', group = 'Graph', display = display.none)
rows = input.int(30, 'Rows', display = display.none, group = 'Graph', tooltip = 'Number of rows per quadrant')
columns = input.int(30, 'Columns', display = display.none, group='Graph', tooltip = 'Number of columns per quadrant')
outliers = input.int(20, 'Outliers', minval=0, maxval=30, step=5, group='Graph', display = display.none,
                 tooltip = 'Data outlier as percentage. The graph will ignore first and last X% of data for the calculation of min and max range for plotting')

oscillator(simple string oscillatorType="rsi", simple int length=14, simple int shortLength = 13, simple int longLength = 25,
                     float source = close, float highSource = high, float lowSource = low)=>
    oscillator =  switch oscillatorType
        "cci" => ta.cci(source, length)
    	"cmo" => ta.cmo(source, length)
    	"cog" => ta.cog(source, length)
    	"mfi" => ta.mfi(source, length)
    	"roc" => ta.roc(source, length)
    	"rsi" => ta.rsi(source, length)
    	=> ta.rsi(source, length)

dc(float source, float highSource, float lowSource, simple int length)=> [source, ta.highest(highSource, length), ta.lowest(lowSource, length)]
dc(float source, simple int length)=> dc(source, source, source, length)
kc(float source, float highSource, float lowSource, simple int length, simple float multiplier)=>
    iTr = math.max(source, highSource, lowSource) - math.min(source, highSource, lowSource)
    iAtr = ta.sma(iTr, length)
    middle = ta.sma(source, length)
    [middle, middle+iAtr*multiplier, middle-iAtr*multiplier]

oscillatorBands(simple string bandType = 'bb', float source, float highSource, float lowSource, simple int bandLength, simple float bandMultiplier)=>
    [middle, upperBand, lowerBand] = switch bandType
        'bb' => ta.bb(source, bandLength, bandMultiplier)
        'kc' => kc(source, highSource, lowSource, bandLength, bandMultiplier)
        'dc1' => dc(source, bandLength)
        'dc2' => dc(source, highSource, lowSource, bandLength)

osc = sourceType == 'price'? close : oscillator(sourceType, length)
oscHigh = sourceType == 'price'? high : oscillator(sourceType, length, source = high)
oscLow = sourceType == 'price'? low: oscillator(sourceType, length, source=low)

[middle, overbought, oversold] = oscillatorBands(bandType, osc, oscHigh, oscLow, bandLength, multiplier)
plot(osc, 'Oscillator', color=color.purple)
plot(overbought, 'Overbought', color=color.red)
plot(oversold, 'Oversold', color=color.green)

var trend = 0
crossover = ta.crossover(osc, oversold)
crossunder = ta.crossunder(osc, overbought)
trend := crossover? 1 : crossunder? -1 : trend

var lastPriceRef = close
var lastBarRef = 0

var gr.Graph graph = gr.Graph.new(gr.GraphProperties.new(rows, columns, graphType, plotColor, plotsize, outliers = outliers)).init()

      
if (math.abs (ta.change(trend)) == 2)
    priceDiff = lastPriceRef - close
    barDiff = bar_index - lastBarRef
    dir = math.sign(-trend)

    float x = priceDiff
    float y = dir*barDiff

    graph.add(gr.Coordinate.new(x, y))

    lastPriceRef := close
    lastBarRef := bar_index


if(barstate.islast)
    graph.calculate().paint().paintQuadrantSummary()
