// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC Dy-NC-SA 4.0) https://creativecommons.org/licenses/Dy-nc-sa/4.0/
// © LuxAlgo

//@version=5
indicator("EquiVolume [LuxAlgo]", max_boxes_count=500, max_lines_count=500, overlay=false)
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
oltf  = 'Intrabar Analysis'
opt   = input.string(   'Chart'  , title=    'options'    ,                             options=['Chart', 'Volume']                                                   )
ltf   = input.bool  (    true   , title=      'LTF'      , group=oltf , inline='ltf' , tooltip='Lower Time Frame'                                                    )           
tf    = input.string(     '1'    , title='               ', group=oltf , inline='ltf' , options=['1', '2', '3', '5', '10', '15', '30', '45', '60', '90', '120', '240'])
cv    = input.string(  'volume'  , title='Type %'         , group=oltf ,                options=['volume', '#bars']                                                   )
minW  = input.int   (      1     , title='minimum width'  , group='Width boxes (bars)', minval=0                                                                      )
maxW  = input.int   (     20     , title='maximum width'  , group='Width boxes (bars)', minval=1                                                                      )
cUP   = input.color (color.teal, title=        ''       ,              inline='c'                                                                                   ) 
cDN   = input.color (color.red , title=        ''       ,              inline='c'                                                                                   ) 

//-----------------------------------------------------------------------------}
//User Defined Types
//-----------------------------------------------------------------------------{
type ohlcv 
    float o 
    float h 
    float l 
    float c 
    float v 
    float Cu
    float Cd
    float Vu
    float Vd

type bin 
    box bx1
    box bx2
    line l1
    line l2
    ohlcv i  

//-----------------------------------------------------------------------------}
//Variables
//-----------------------------------------------------------------------------{
var bin[] aBin = array.new<bin>()

var float mxV  = 0.
var float mnV  = 10e16
var int tfM500 = (timeframe.in_seconds(timeframe.period) * 1000) * 500

//-----------------------------------------------------------------------------}
//Function
//-----------------------------------------------------------------------------{
get() => [math.max(math.sign(close - open)         , 0), math.max(math.sign(open - close)         , 0)
      ,   math.max(math.sign(close - open) * volume, 0), math.max(math.sign(open - close) * volume, 0)]

//-----------------------------------------------------------------------------}
//General Calculations
//-----------------------------------------------------------------------------{
tsL   = timeframe.in_seconds(tf)
tsC   = timeframe.in_seconds(timeframe.period)
tsCm  = tsC / 60

tfInt = math.round(str.tonumber(tf) * math.max(1, tsC / tsL / 1440)) // when tsC / tsL > 1440 -> adjustment
tf   :=            str.tostring(      math.min(   tsCm, tfInt     )) 
tf   := timeframe.isseconds ? '' : tf

isC   = opt == 'Chart'
isV   = cv  == 'volume'
n     =   bar_index

//-----------------------------------------------------------------------------}
//Calculations
//-----------------------------------------------------------------------------{
[pos, neg, posv, negv] = request.security_lower_tf(syminfo.tickerid, tf, get())

if chart.right_visible_bar_time - time < tfM500 
 and not (time >= chart.right_visible_bar_time) 
    if volume > mxV 
        mxV := volume
    if volume < mnV 
        mnV := volume
    aBin.unshift(
     bin.new(
      bx1 = box.new(
       na
     , na
     , na
     , na
      )
     , bx2 = 
       isC and 
       ltf 
     ? box.new(
       na
     , na
     , na
     , na
      ) : na
     , l1 = line.new(
       na
     , na
     , na
     , na
      )
     , l2 = 
       isC and 
       ltf    
     ? line.new(
       na
     , na
     , na
     , na
      ) : na
     , i = ohlcv.new(
       open
     , high
     , low
     , close
     , volume
     , pos.sum ()
     , neg.sum ()     
     , posv.sum()
     , negv.sum()
      )
     ))

if time == chart.right_visible_bar_time
    sz    = aBin.size()  
    diff  = mxV  -  mnV
    left  = n
    right = n
    if sz > 0
        for i = 0 to sz    -1
            o      = aBin.get   (i).i.o
            h      = aBin.get   (i).i.h
            l      = aBin.get   (i).i.l
            c      = aBin.get   (i).i.c
            v      = aBin.get   (i).i.v
            mx     = math.max   (o , c)
            mn     = math.min   (o , c)
            w      = math.round((v - mnV)  / diff * maxW) + minW
            right := left
            left  := math.max   (0 , right - w)
            col    = c > o  ?  cUP : cDN
            if not isC or (isC and not ltf)
                aBin.get(i).bx1.set_lefttop     (left , isC ? mx : v)
                aBin.get(i).bx1.set_rightbottom (right, isC ? mn : 0)
                aBin.get(i).bx1.set_bgcolor     ( col )
                aBin.get(i).bx1.set_border_color(isC  ? col : color.new(color.black, 0))
            else 
                df = mx - mn
                u  = aBin.get(i).i.Cu           , vu  = aBin.get(i).i.Vu
                d  = aBin.get(i).i.Cd           , vd  = aBin.get(i).i.Vd
                aBin.get(i).bx1.set_lefttop     (left , c > o ? mn + (isV ? (df * vu / v) : (df * u / (u + d))) : mx)
                aBin.get(i).bx1.set_rightbottom (right, c > o ? mn : mx - (isV ? (df * vd / v ): (df * d / (u + d))))
                aBin.get(i).bx1.set_bgcolor     ( col )
                aBin.get(i).bx1.set_border_color( col )
                aBin.get(i).bx2.set_lefttop     (left , c > o ? mx : mx - (isV ? (df * vd / v ): (df * d / (u + d))))
                aBin.get(i).bx2.set_rightbottom (right, c > o ? mn + (isV ? (df * vu / v) : (df * u / (u + d))) : mn)
                aBin.get(i).bx2.set_bgcolor     (color(na))
                aBin.get(i).bx2.set_border_color( col )
            if isC
                if not ltf
                    aBin.get(i).l1.set_xy1(math.round(math.avg(right, left)),  h)
                    aBin.get(i).l1.set_xy2(math.round(math.avg(right, left)),  l)
                    aBin.get(i).l1.set_color                  ( col )
                else
                    aBin.get(i).l1.set_xy1(math.round(math.avg(right, left)),  h)
                    aBin.get(i).l1.set_xy2(math.round(math.avg(right, left)), mx)
                    aBin.get(i).l1.set_color                  ( col )                
                    aBin.get(i).l2.set_xy1(math.round(math.avg(right, left)),  l)
                    aBin.get(i).l2.set_xy2(math.round(math.avg(right, left)), mn)
                    aBin.get(i).l2.set_color                  ( col )  

//-----------------------------------------------------------------------------}
//Table
//-----------------------------------------------------------------------------{
if barstate.islastconfirmedhistory and isC and ltf and tsL / 60 != math.min(tsCm, tfInt)
    var tb = table.new(position = position.top_right, columns = 1, rows = 1, bgcolor = color(na))
    table.cell(tb, 0, 0, text_color=#FF0000, text = 'chosen LTF: ' + str.tostring(tsL / 60) + ' "\noutput LTF: ' + str.tostring(math.round(math.min(tsCm, tfInt), 2)) + ' "')

//-----------------------------------------------------------------------------}