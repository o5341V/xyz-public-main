// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © QuantAlgo

//@version=5
indicator("Dynamic Score Supertrend [QuantAlgo]", overlay=true, timeframe="", timeframe_gaps=true)

//              ╔════════════════════════════════╗              //
//              ║      USER-DEFINED SETTINGS     ║              //
//              ╚════════════════════════════════╝              //

// Input Groups
var string atr_settings      = "════════ ATR Settings ════════"
var string score_settings    = "════════ Dynamic Score Settings ════════"
var string bar_coloring      = "════════ Bar Coloring ════════"

// Descriptions for inputs (Tooltips)
tooltip_atr_length           = "Length of the Average True Range (ATR) used to calculate the Supertrend bands. A higher length will make the Supertrend smoother."
tooltip_atr_multiplier       = "Multiplier applied to the ATR value to calculate the Supertrend bands. Increasing the multiplier will widen the bands, making trend changes less frequent."
tooltip_window_length        = "The length of the window over which the dynamic score is calculated. A longer window will consider more data points, resulting in a slower but more stable score."
tooltip_uptrend_threshold    = "Threshold value above which an uptrend is detected. Increase to make trend signals less sensitive."
tooltip_downtrend_threshold  = "Threshold value below which a downtrend is detected. Decrease to make trend signals less sensitive."
tooltip_bar_coloring         = "Enable or disable bar coloring based on the detected trend direction."
tooltip_bg_coloring          = "Enable or disable background coloring based on trend direction."

// ATR Settings
atr_length                   = input.int(14, "ATR Length", group=atr_settings, tooltip=tooltip_atr_length)
atr_multiplier               = input.float(2.0, "ATR Multiplier", group=atr_settings, tooltip=tooltip_atr_multiplier)

// Dynamic Score Settings
window_len                   = input.int(50, "Window Length", group=score_settings, tooltip=tooltip_window_length)
uptrend_threshold            = input.int(40, "Uptrend Threshold", group=score_settings, tooltip=tooltip_uptrend_threshold)
downtrend_threshold          = input.int(-10, "Downtrend Threshold", group=score_settings, tooltip=tooltip_downtrend_threshold)

// Bar Coloring Settings
up_color                     = input.color(#00ffaa, "Uptrend Color", group=bar_coloring, tooltip="Color of the bars during an uptrend.")
down_color                   = input.color(#ff0000, "Downtrend Color", group=bar_coloring, tooltip="Color of the bars during a downtrend.")
bar                          = input.bool(true, "Color Bars?", group=bar_coloring, tooltip=tooltip_bar_coloring)
bg_coloring                  = input.bool(false, "Background Coloring?", group=bar_coloring, tooltip=tooltip_bg_coloring)

//              ╔════════════════════════════════╗              //
//              ║      SUPERTREND CALCULATION    ║              //
//              ╚════════════════════════════════╝              //

atr_value = ta.atr(atr_length)
upper_band = ta.sma(close, atr_length) + atr_value * atr_multiplier
lower_band = ta.sma(close, atr_length) - atr_value * atr_multiplier

supertrend_direction = close > upper_band ? 1 : close < lower_band ? -1 : na

//              ╔════════════════════════════════╗              //
//              ║   QUANT ALGO'S DYNAMIC SCORE   ║              //
//              ╚════════════════════════════════╝              //

var float[] score_array = array.new_float(window_len, 0)

dynamic_score() =>
    float score = 0.0
    for i = 0 to window_len - 1
        float comparison = close > upper_band[i + 1] ? 1 : close < lower_band[i + 1] ? -1 : 0
        array.set(score_array, i, comparison)
        score += comparison
    score

trend_score = dynamic_score()

//              ╔════════════════════════════════╗              //
//              ║         TREND DETECTION        ║              //
//              ╚════════════════════════════════╝              //

bool long_condition  = trend_score > uptrend_threshold
bool short_condition = trend_score < downtrend_threshold

var int trend_direction_final = 0

if (long_condition and not short_condition)
    trend_direction_final := 1
else if (short_condition)
    trend_direction_final := -1

//              ╔════════════════════════════════╗              //
//              ║         VISUALIZATION          ║              //
//              ╚════════════════════════════════╝              //

// Plot Supertrend lines with gradient fill between trend lines and body middle
bullish_trend_plot     = plot(trend_direction_final == 1 ? lower_band : na, color=color.new(up_color, 10), linewidth=3, style=plot.style_linebr)
bearish_trend_plot     = plot(trend_direction_final == -1 ? upper_band : na, color=color.new(down_color, 10), linewidth=3, style=plot.style_linebr)
body_middle            = plot((open + close) / 2, "Body Middle", display=display.none)

fill(body_middle, bullish_trend_plot, color=color.new(up_color, 70))
fill(body_middle, bearish_trend_plot, color=color.new(down_color, 70))

// Add markers for trend shifts (Bullish and Bearish)
plotshape(ta.crossover(trend_direction_final, 0) ? lower_band : na, "Bullish Trend", shape.labelup, location.absolute, up_color, text="𝑳", textcolor=#000000, size=size.small)
plotshape(ta.crossunder(trend_direction_final, 0) ? upper_band : na, "Bearish Trend", shape.labeldown, location.absolute, down_color, text="𝑺", textcolor=#ffffff, size=size.small)

// Paint bar colors based on the detected trend direction
barcolor(trend_direction_final == 1 and bar ? color.new(up_color, 15) : na)
barcolor(trend_direction_final == -1 and bar ? color.new(down_color, 15) : na)

// Highlight background based on trend direction if enabled
bgcolor(bg_coloring and trend_direction_final == 1 ? color.new(up_color, 80) : na)
bgcolor(bg_coloring and trend_direction_final == -1 ? color.new(down_color, 80) : na)

//              ╔════════════════════════════════╗              //
//              ║             ALERTS             ║              //
//              ╚════════════════════════════════╝              //

alertcondition(long_condition,  title="Dynamic Score Supertrend Long",  message="Dynamic Score Supertrend Long Signal on {{ticker}}")
alertcondition(short_condition, title="Dynamic Score Supertrend Short", message="Dynamic Score Supertrend Short Signal on {{ticker}}")

//              ╔════════════════════════════════╗              //
//              ║           CREATED BY           ║              //
//              ╚════════════════════════════════╝              //

// ██████╗ ██╗   ██╗ █████╗ ███╗   ██╗████████╗     █████╗ ██╗      ██████╗  ██████╗ 
//██╔═══██╗██║   ██║██╔══██╗████╗  ██║╚══██╔══╝    ██╔══██╗██║     ██╔════╝ ██╔═══██╗
//██║   ██║██║   ██║███████║██╔██╗ ██║   ██║       ███████║██║     ██║  ███╗██║   ██║
//██║▄▄ ██║██║   ██║██╔══██║██║╚██╗██║   ██║       ██╔══██║██║     ██║   ██║██║   ██║
//╚██████╔╝╚██████╔╝██║  ██║██║ ╚████║   ██║       ██║  ██║███████╗╚██████╔╝╚██████╔╝
// ╚══▀▀═╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝       ╚═╝  ╚═╝╚══════╝ ╚═════╝  ╚═════╝