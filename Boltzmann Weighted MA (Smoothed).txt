// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Kazo_/
//@version=5
indicator("Boltzmann Weighted MA (Smoothed)", overlay=true, precision=4)

// ╔═══════════════════════════════════════════════════════════════════════════════╗
// ║                                                                               ║
// ║                        Boltzmann Weighted Moving Average                      ║
// ║                                                                               ║
// ║ This indicator uses a Boltzmann-inspired weighting scheme to emphasize        ║
// ║ recent data over older data. The weight for each data point i is calculated   ║
// ║ as:                                                                           ║
// ║                                                                               ║
// ║         weight_i = exp(-Energy_i / (k_B * T))                                 ║
// ║                                                                               ║
// ║ - "Energy" increases with how far back in time the data point is.             ║
// ║ - T (Temperature) controls the decay of weights: lower T = faster decay,      ║
// ║   giving more importance to recent data; higher T = more even weighting.      ║
// ║                                                                               ║
// ║ After computing the weighted average, an EMA smooths the result to reduce     ║
// ║ noise. The line color changes with the slope of the smoothed curve:           ║
// ║ green if rising (bullish), red if falling (bearish).                          ║
// ║                                                                               ║
// ╚═══════════════════════════════════════════════════════════════════════════════╝

//-----------------------------------------------------------
// INPUT PARAMETERS
//-----------------------------------------------------------
period     = input.int(20, "Boltzmann Window Period")
T          = input.float(0.5, "Temperature (T)", step=0.1)
alpha      = input.float(0.2, "Alpha (Energy Scale)", step=0.1)
smoothLen  = input.int(5, "EMA Smoothing Period")

//-----------------------------------------------------------
// CALCULATE BOLTZMANN WEIGHTED MA
//-----------------------------------------------------------

k_B = 1.0 // Boltzmann constant (fixed at 1)
var float sum_weights = 0.0
var float sum_price   = 0.0

sum_weights := 0.0
sum_price   := 0.0

// Calculate Boltzmann-weighted sum over the specified window
for i = 0 to period - 1
    energy = alpha * i
    weight = math.exp(-energy / (k_B * T))
    sum_weights += weight
    sum_price   += close[i] * weight

boltzmann_ma = sum_price / sum_weights

// Apply smoothing using an EMA
smoothed_ma = ta.ema(boltzmann_ma, smoothLen)

    // Determine color based on slope (bullish or bearish)
is_bullish = smoothed_ma > smoothed_ma[1]
line_color = is_bullish ? #00ffbb : #ff0000

plot(smoothed_ma, "Smoothed Boltzmann MA", color=line_color, linewidth=2)
