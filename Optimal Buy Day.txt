// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/

// ~~ Â© Zeiierman {
//@version=5
indicator("Optimal Buy Day (Zeiierman)",overlay=true)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Only run on Daily {
if timeframe.period!="D"
    runtime.error("Please go to the Daily Timeframe")
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Tooltips {
t1 = "Define the starting year for the investment simulation. Increasing the start year begins the simulation later, while decreasing it starts earlier and may cover a longer historical period."
t2 = "Set the initial amount of capital to begin the investment simulation. Increasing the capital will simulate a higher initial investment, while decreasing it will simulate a lower initial investment."
t3 = "Specify the monthly contribution to the investment. A higher contribution increases the amount invested each month, potentially leading to more shares purchased over time. Lowering it will decrease the monthly investment amount."
t4 = "Toggle the display of the summary table on the chart, which shows key investment metrics like Most Shares and Best Price based on the simulation."
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Inputs {
startYear    = input.int(2015,"Start Year", group="", inline="", tooltip=t1)
capital      = input.int(10000,"Capital", group="", inline="", tooltip=t2)
contribution = input.int(500,"Monthly Contribution", group="", inline="", tooltip=t3)

Size = input.string("Auto","Table Size",["Auto","Tiny","Small","Normal","Large","Huge"], group="", inline="style")
pos     = input.string(position.top_right, title="",options =[position.top_right,position.top_center,
 position.top_left,position.bottom_right,position.bottom_center,position.bottom_left,position.middle_right,position.middle_left], inline="style", tooltip="")

SummaryTable = input.bool(true, title="Summary Table", group="Summary Table", inline="Summary Table", tooltip=t4)
SizeSummary  = input.string("Auto","",["Auto","Tiny","Small","Normal","Large","Huge"], group="Summary Table", inline="Summary Table", tooltip="")
Summarypos   = input.string(position.bottom_right, title="",options =[position.top_right,position.top_center,
 position.top_left,position.bottom_right,position.bottom_center,position.bottom_left,position.middle_right,position.middle_left], group="Summary Table", inline="Summary Table", tooltip="")
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Variables & Arrays {
switch_(i_)=>
    s_ = switch i_
        "Auto"   => size.auto
        "Tiny"   => size.tiny
        "Small"  => size.small
        "Normal" => size.normal
        "Large"  => size.large
        "Huge"   => size.huge
size        = switch_(Size)
SummarySize = switch_(SizeSummary)

var days   = matrix.new<float>(31,5,0.0)
var random = array.new<float>(2,0.0)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Main {
if year>=startYear
    days.set(dayofmonth-1,3,open)
    if month!=month[1]
        //First values
        if days.col(0).sum()==0
            for i=0 to dayofmonth[1]-1
                if days.get(i,3)!=0
                    shares = math.floor(capital/days.get(i,3))
                    if shares>=1
                        days.set(i,0,shares)
                        days.set(i,1,days.get(i,3))
                        days.set(i,2,1)
                else //Add capital to the closed days
                    days.set(i,4,capital)
            //Generate random buy date
            generate = int(math.random(0,dayofmonth[1]-1))
            while days.get(generate,3)==0
                generate := int(math.random(0,dayofmonth[1]-1))
            random.set(0,math.floor(capital/days.get(generate,3)))
            random.set(1,days.get(generate,3))
            //Add capital for remaining days
            if dayofmonth[1]<31
                for i=dayofmonth[1]-1 to 30
                    days.set(i,4,capital)
        else
            for i=0 to dayofmonth[1]-1
                if days.get(i,3)!=0
                    prevShares = days.get(i,0)
                    avgPrice = days.get(i,1)
                    price = days.get(i,3)
                    shares= math.floor((contribution+days.get(i,4))/price)
                    if shares>=1
                        newAvg = ((prevShares*avgPrice)+(shares*price))/(prevShares+shares)
                        days.set(i,0,days.get(i,0)+shares)
                        days.set(i,1,newAvg)
                        days.set(i,4,0)
                        days.set(i,2,days.get(i,2)+1)
                else //Add contribution to the closed days
                    days.set(i,4,contribution)
            //Generate random buy date
            generate = int(math.random(0,dayofmonth[1]-1))
            while days.get(generate,3)==0
                generate := int(math.random(0,dayofmonth[1]-1))
            prevShares = random.get(0)            
            avgPrice = random.get(1)
            price = days.get(generate,3)
            shares= math.floor(contribution/price)
            newAvg = ((prevShares*avgPrice)+(shares*price))/(prevShares+shares)
            random.set(0,random.get(0)+shares)
            random.set(1,newAvg)
            //Add contribution for remaining days
            if dayofmonth[1]<31
                for i=dayofmonth[1]-1 to 30
                    days.set(i,4,contribution)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}

// ~~ Output {
var tbl          = table.new(pos,10,17,chart.bg_color,chart.bg_color,2,chart.bg_color,2)
var summaryTable = table.new(Summarypos, 2, 5, border_width = 1)
if barstate.islast
    //Headers
    tbl.cell(0,0,"Day",text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))
    tbl.cell(1,0,"Shares",text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))
    tbl.cell(2,0,"Avg Price",text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))
    tbl.cell(3,0,"Buys",text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))

    tbl.cell(4,0,"Day",text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))
    tbl.cell(5,0,"Shares",text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))
    tbl.cell(6,0,"Avg Price",text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))
    tbl.cell(7,0,"Buys",text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))

    days.remove_col(3)
    days.remove_col(3)

    sharesGradient = days.col(0)
    priceGradient  = days.col(1)

    for i=0 to days.rows()-1
        tbl.cell(i<16?0:4,i<16?i+1:i-15,str.tostring(i+1),text_color=color.white,text_size=size,bgcolor=color.new(color.blue,15))
        for j=0 to days.columns()-1
            tbl.cell(i<16?j+1:j+5,i<16?i+1:i-15,
             str.tostring(days.get(i,j),j==1?"#.##":"#"),text_color=color.white,text_size=size,
             bgcolor=j==0?color.from_gradient(days.get(i,j),sharesGradient.min(),sharesGradient.max(),color.rgb(8, 78, 11),color.new(color.lime,15)):
             j==1?color.from_gradient(days.get(i,j),priceGradient.min(),priceGradient.max(),color.new(color.lime,15),color.rgb(19, 86, 21)):
             color.new(#3bc1ff, 15))
    
    if SummaryTable
        table.cell(summaryTable, 0, 0, "Most Shares ",text_color=color.white,text_size=SummarySize, bgcolor=color.new(color.green, 15))
        table.cell(summaryTable, 1, 0, "Best Price " ,text_color=color.white,text_size=SummarySize,bgcolor=color.new(color.green, 15))
        table.cell(summaryTable, 0, 1, "Day " + str.tostring(sharesGradient.indexof(sharesGradient.max()) + 1) + ": " + str.tostring(sharesGradient.max()),text_color=color.white,text_size=SummarySize,bgcolor=color.new(color.green, 0))
        table.cell(summaryTable, 1, 1, "Day " + str.tostring(priceGradient.indexof(priceGradient.min()) + 1) + ": " + str.tostring(priceGradient.min(), "#.##"),text_color=color.white,text_size=SummarySize,bgcolor=color.new(color.green, 0))
        table.cell(summaryTable, 0, 2, "Randomized Shares",text_color=color.white,text_size=SummarySize,bgcolor=color.new(color.blue, 15))
        table.cell(summaryTable, 1, 2, "Randomized Price",text_color=color.white,text_size=SummarySize,bgcolor=color.new(color.blue, 15))
        table.cell(summaryTable, 0, 3, str.tostring(random.get(0)),text_color=color.white,text_size=SummarySize, bgcolor=color.new(color.blue, 15))
        table.cell(summaryTable, 1, 3, str.tostring(random.get(1), "#.##"),text_color=color.white,text_size=SummarySize,bgcolor=color.new(color.blue, 15))
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}