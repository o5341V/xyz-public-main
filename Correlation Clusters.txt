// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© LuxAlgo

//@version=5
indicator('Correlation Clusters [LuxAlgo]','LuxAlgo - Correlation Clusters',overlay=true,scale=scale.none)
//---------------------------------------------------------------------------------------------------------------------}
//CONSTANTS & STRINGS & INPUTS
//---------------------------------------------------------------------------------------------------------------------{
RED                     = #F23645
GREEN                   = #089981
PINK                    = #F06292

BARS                    = 'Bars'
TIME                    = 'Time'
ALL_DATA                = 'All Data'

DAY                     = 'Day'
WEEK                    = 'Week'
MONTH                   = 'Month'
QUARTER                 = 'Quarter'
YEAR                    = 'Year'

CLUSTERS_GROUP          = 'CLUSTERS'
REFERENCE_GROUP         = 'TICKER OF REFERENCE'
TICKERS_GROUP           = 'CORRELATION TICKERS'
STYLE_GROUP             = 'STYLE'

executionWindowTooltip  = 'Choose how the tool collects data, filter data by number of bars, time or no filtering at all, using all available data.'
barWindowTooltip        = 'Number of bars for data collection when the `Bars` execution window mode is active.'
timeWindowTooltip       = 'Time window for data collection when the `Time` execution window mode is active. These are full periods, so `Day` means the last 24 hours, `Week` means the last 7 days, and so on.'
clustersTooltip         = 'Number of clusters to detect up to 10. Only clusters with data points are displayed.'
clusterThresholdTooltip = 'Number used to compare a new centroid within the same cluster. The lower the number, the more accurate the centroid will be.'
maxIterationsTooltip    = 'Maximum number of calculations to detect a cluster. A high value may lead to a timeout runtime error (loop takes too long).'
useChartTickerTooltip   = 'Enable/disable the use of the current chart ticker to get the correlation against all other tickers selected by the user.'
ticker00Tooltip         = 'Custom ticker to get the correlation against all the other tickers selected by the user.'
ticker01Tooltip         = 'Select the 10 tickers for which you wish to obtain the correlation against the reference ticker.'
textSizeTooltip         = 'Select the size of the text to be displayed.'
displaySizeTooltip      = 'Select the size of the correlation chart to be displayed, up to 500 bars.'
boxHeightTooltip        = 'Select the height of the boxes to be displayed. A high height will cause overlapping if the boxes are close together.'
cluster1ColorTooltip    = 'Choose a custom colour for each cluster.'

executionWindowInput    = input.string( BARS,   'Execution Window Mode',    tooltip = executionWindowTooltip,   options=[BARS,TIME,ALL_DATA])
barWindowInput          = input.int(    50,     'Execute on Last X Bars',   tooltip = barWindowTooltip,         minval=10)
timeWindowInput         = input.string( DAY,    'Execute on Last',          tooltip = timeWindowTooltip,        options=[DAY,WEEK,MONTH,QUARTER,YEAR])

clustersInput           = input.int(    3,      'Number of Clusters',               group = CLUSTERS_GROUP,     tooltip = clustersTooltip,          minval=2,       maxval=10)
clusterThresholdInput   = input.float(  0.001,  'Cluster Threshold',                group = CLUSTERS_GROUP,     tooltip = clusterThresholdTooltip,  minval=0.000001,step=0.0005)
maxIterationsInput      = input.int(    500,    'Max Iterations',                   group = CLUSTERS_GROUP,     tooltip = maxIterationsTooltip,     minval=100)

useChartTickerInput     = input.bool(   false,  'Use Chart Ticker as Reference',    group = REFERENCE_GROUP,    tooltip = useChartTickerTooltip)
ticker00Input           = ticker.modify(input.symbol('SPY','Custom Ticker',         group = REFERENCE_GROUP,    tooltip = ticker00Tooltip))

ticker01Input           = ticker.modify(input.symbol('NVDA','',     group = TICKERS_GROUP,  tooltip = ticker01Tooltip,  inline = 'line 1'))
ticker02Input           = ticker.modify(input.symbol('MSFT','',     group = TICKERS_GROUP,  tooltip = '',               inline = 'line 1'))
ticker03Input           = ticker.modify(input.symbol('GOOG','',     group = TICKERS_GROUP,  tooltip = '',               inline = 'line 2'))
ticker04Input           = ticker.modify(input.symbol('USDJPY','',   group = TICKERS_GROUP,  tooltip = '',               inline = 'line 2'))
ticker05Input           = ticker.modify(input.symbol('BTCUSD','',   group = TICKERS_GROUP,  tooltip = '',               inline = 'line 3'))
ticker06Input           = ticker.modify(input.symbol('EURUSD','',   group = TICKERS_GROUP,  tooltip = '',               inline = 'line 3'))
ticker07Input           = ticker.modify(input.symbol('ETHUSD','',   group = TICKERS_GROUP,  tooltip = '',               inline = 'line 4'))
ticker08Input           = ticker.modify(input.symbol('GLD','',      group = TICKERS_GROUP,  tooltip = '',               inline = 'line 4'))
ticker09Input           = ticker.modify(input.symbol('TLT','',      group = TICKERS_GROUP,  tooltip = '',               inline = 'line 5'))
ticker10Input           = ticker.modify(input.symbol('IWM','',      group = TICKERS_GROUP,  tooltip = '',               inline = 'line 5'))

textSizeInput           = input.string( size.auto,      'Text Size',    group = STYLE_GROUP,    tooltip = textSizeTooltip,      options = [size.auto,size.tiny,size.small,size.normal,size.large])
displaySizeInput        = input.int(    200,            'Display Size', group = STYLE_GROUP,    tooltip = displaySizeTooltip,   minval = 50, maxval=500)
boxHeightInput          = input.float(  0.05,           'Box Height',   group = STYLE_GROUP,    tooltip = boxHeightTooltip,     step = 0.01)
cluster1ColorInput      = input.color(  GREEN,          'Clusters 1',   group = STYLE_GROUP,    tooltip = cluster1ColorTooltip, inline = 'color line 1')
cluster2ColorInput      = input.color(color.blue,     '2',            group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 1')
cluster3ColorInput      = input.color(color.fuchsia,  'Clusters 3',   group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 2')
cluster4ColorInput      = input.color(RED,              '4',            group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 2')
cluster5ColorInput      = input.color(color.maroon,   'Clusters 5',   group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 3')
cluster6ColorInput      = input.color(color.navy,     '6',            group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 3')
cluster7ColorInput      = input.color(color.olive,    'Clusters 7',   group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 4')
cluster8ColorInput      = input.color(color.orange,   '8',            group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 4')
cluster9ColorInput      = input.color(color.purple,   'Clusters 9',   group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 5')
cluster10ColorInput     = input.color(  PINK,           '10',           group = STYLE_GROUP,    tooltip = '',                   inline = 'color line 5')  

//---------------------------------------------------------------------------------------------------------------------}
//DATA STRUCTURES & VARIABLES
//---------------------------------------------------------------------------------------------------------------------{
// @type                UDT representing a data point (ticker and correlation)
// @field tag           name of the ticker
// @field correlation   correlation against the ticker of reference
type dataPoint    
    string tag
    float correlation = 0

// @type                UDT representing a cluster
// @field centroid      arithmetic mean of all the correlations within the cluster          
// @field dataPoints    collection of all the data points within the cluster          
// @field correlations  collection of all the correlations within the cluster          
// @field clusterColor  colour of the cluster
type cluster
    float centroid
    array<dataPoint> dataPoints
    array<float> correlations
    color clusterColor

// @variable                    storage for dataPoint UDTs
var array<dataPoint> dataPoints = array.new<dataPoint>(10,na)
// @variable                    storage for cluster UDTs
var array<cluster> clusters     = array.new<cluster>()
// @variable                    storage for all correlation coefficients
var array<float> coefficients   = array.new<float>(10,na)
// @variable                    milliseconds on 24 hours
var millisecondsDay             = 1000 * 60 * 60 * 24
// @variable                    time offset to use in execution window check
var timeOffset                  = switch timeWindowInput
    DAY     => millisecondsDay
    WEEK    => millisecondsDay * 7
    MONTH   => millisecondsDay * 30
    QUARTER => millisecondsDay * 90
    YEAR    => millisecondsDay * 365

//---------------------------------------------------------------------------------------------------------------------}
//USER-DEFINED FUNCTIONS
//---------------------------------------------------------------------------------------------------------------------{
// @function                Calculates the correlation coefficient between two tickers, resetting the calculations if `resetCondition` is true.
// @param ticker1           (string) The name of the first ticker
// @param ticker2           (string) The name of the second ticker
// @param resetCondition    (bool) condition to reset the calculations
// @returns                 float
getCorrelationCoefficient(string ticker1, string ticker2, bool resetCondition) =>

    var int occurrences                         = 0
    var float sumPriceTicker1                   = 0
    var float sumPriceTicker2                   = 0
    var float sumSquaredPriceTicker1            = 0
    var float sumSquaredPriceTicker2            = 0
    var float sumSquaredPriceTicker1ByTicker2   = 0

    priceTicker1                                = request.security(ticker1, timeframe.period, close)
    priceTicker2                                = request.security(ticker2, timeframe.period, close)
   
    if resetCondition
        occurrences                             := 1
        sumPriceTicker1                         := priceTicker1
        sumPriceTicker2                         := priceTicker2
        sumSquaredPriceTicker1                  := priceTicker1 * priceTicker1
        sumSquaredPriceTicker2                  := priceTicker2 * priceTicker2
        sumSquaredPriceTicker1ByTicker2         := priceTicker1 * priceTicker2

    else if priceTicker1 != priceTicker1[1] and priceTicker2 != priceTicker2[1]
        occurrences                             += 1
        sumPriceTicker1                         += priceTicker1
        sumPriceTicker2                         += priceTicker2
        sumSquaredPriceTicker1                  += priceTicker1 * priceTicker1
        sumSquaredPriceTicker2                  += priceTicker2 * priceTicker2
        sumSquaredPriceTicker1ByTicker2         += priceTicker1 * priceTicker2

    varianceTicker1                             = sumSquaredPriceTicker1 / occurrences          - ( (sumPriceTicker1 / occurrences) * (sumPriceTicker1 / occurrences) )
    varianceTicker2                             = sumSquaredPriceTicker2 / occurrences          - ( (sumPriceTicker2 / occurrences) * (sumPriceTicker2 / occurrences) )
    covarianceTicker1AndTicker2                 = sumSquaredPriceTicker1ByTicker2 / occurrences - ( (sumPriceTicker1 / occurrences) * (sumPriceTicker2 / occurrences) )

    correlationCoefficient                      = covarianceTicker1AndTicker2 / math.sqrt( varianceTicker1 * varianceTicker2 )

    correlationCoefficient

// @function        Helper function to get ticker name from string formatted as `EXCHANGE:TICKER`
// @param ticker    (string) The name of the ticker in the format `EXCHANGE:TICKER`
// @returns         string
getTickerName(string ticker) => str.substring(ticker, str.pos(ticker, ':') + 1)

// @function        Initialize the dataPoints array with each ticker name
// @returns         void      
initializeDataPoints() =>
    dataPoints.set(0,dataPoint.new(getTickerName(ticker01Input)))
    dataPoints.set(1,dataPoint.new(getTickerName(ticker02Input)))
    dataPoints.set(2,dataPoint.new(getTickerName(ticker03Input)))
    dataPoints.set(3,dataPoint.new(getTickerName(ticker04Input)))
    dataPoints.set(4,dataPoint.new(getTickerName(ticker05Input)))
    dataPoints.set(5,dataPoint.new(getTickerName(ticker06Input)))
    dataPoints.set(6,dataPoint.new(getTickerName(ticker07Input)))
    dataPoints.set(7,dataPoint.new(getTickerName(ticker08Input)))
    dataPoints.set(8,dataPoint.new(getTickerName(ticker09Input)))
    dataPoints.set(9,dataPoint.new(getTickerName(ticker10Input)))

// @function        calculate the correlation coefficient for each ticker
// @returns         void
updateCorrelationCoefficients() =>
    
    parsedReferenceTicker   = useChartTickerInput ? syminfo.tickerid : ticker00Input
    dataPoint point         = na

    point                   := dataPoints.get(0)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker01Input,false)
    coefficients.set(0,point.correlation)

    point                   := dataPoints.get(1)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker02Input,false)
    coefficients.set(1,point.correlation)

    point                   := dataPoints.get(2)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker03Input,false)
    coefficients.set(2,point.correlation)

    point                   := dataPoints.get(3)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker04Input,false)
    coefficients.set(3,point.correlation)

    point                   := dataPoints.get(4)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker05Input,false)
    coefficients.set(4,point.correlation)

    point                   := dataPoints.get(5)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker06Input,false)
    coefficients.set(5,point.correlation)

    point                   := dataPoints.get(6)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker07Input,false)
    coefficients.set(6,point.correlation)

    point                   := dataPoints.get(7)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker08Input,false)
    coefficients.set(7,point.correlation)

    point                   := dataPoints.get(8)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker09Input,false)
    coefficients.set(8,point.correlation)

    point                   := dataPoints.get(9)
    point.correlation       := getCorrelationCoefficient(parsedReferenceTicker,ticker10Input,false)
    coefficients.set(9,point.correlation)
    
// @function        get custom cluster color from index        
// @param index     number of cluster
// @returns         color ID
getClusterColor(int index) =>
    switch index
        1 => cluster1ColorInput
        2 => cluster2ColorInput
        3 => cluster3ColorInput
        4 => cluster4ColorInput
        5 => cluster5ColorInput
        6 => cluster6ColorInput
        7 => cluster7ColorInput
        8 => cluster8ColorInput
        9 => cluster9ColorInput
        10 => cluster10ColorInput

// @function        calculate clusters for all data points
// @returns         int         
updateClusters() =>    
    
    // initializing clusters
    clusters.clear()    
    baseClusterIndex    = int(100/clustersInput)
    baseColorIndex      = int(255/clustersInput)

    for index = 1 to clustersInput
        centroid = coefficients.percentile_linear_interpolation(index*baseClusterIndex)        
        clusters.push(cluster.new(centroid,array.new<dataPoint>(),array.new<float>(),getClusterColor(index)))    

    // finding clusters
    bool finalClusters = false
    int iterations = 0

    while (not finalClusters and iterations < maxIterationsInput)

        // flush each cluster data
        for eachCluster in clusters
            eachCluster.dataPoints.clear()
            eachCluster.correlations.clear()

        // clustering dataPoints
        for [dataPointIndex, eachDataPoint] in dataPoints
            
            distanceFromCentroid = array.new<float>()            
            for [clusterIndex,eachCluster] in clusters                
                distanceFromCentroid.push(math.abs(eachDataPoint.correlation - eachCluster.centroid))

            currentCluster = distanceFromCentroid.indexof(distanceFromCentroid.min())

            if currentCluster != -1
                clusters.get(currentCluster).dataPoints.push(eachDataPoint)
                clusters.get(currentCluster).correlations.push(eachDataPoint.correlation)

        // updating cluster centroids
        modifiedClusters = 0
        for eachCluster in clusters
            centroid        = eachCluster.correlations.avg()
            centroidDelta   = math.abs(centroid - eachCluster.centroid)
            if centroidDelta > clusterThresholdInput                
                eachCluster.centroid    := centroid                
                modifiedClusters        += 1

        // all best centroids found, exiting loop
        if modifiedClusters == 0
            finalClusters := true

        iterations += 1

// @function        draw all displayable data with lines, labels and boxes
// @returns         box ID
drawClusters() =>
    startBarIndex   = last_bar_index + 20
    endBarIndex     = last_bar_index + displaySizeInput
    
    line.new(chart.point.new(na,startBarIndex,1.0),chart.point.new(na,startBarIndex,-1.0),color=chart.fg_color,width=3)
    label.new(chart.point.new(na,startBarIndex,1.0),'+1',xloc.bar_index,yloc.price,color(na),label.style_label_right,chart.fg_color,size.normal)
    label.new(chart.point.new(na,startBarIndex,-1.0),'-1',xloc.bar_index,yloc.price,color(na),label.style_label_right,chart.fg_color,size.normal)          

    maxDataPoints = 0    
    for eachCluster in clusters
        maxDataPoints := math.max(maxDataPoints,eachCluster.dataPoints.size())
    
    boxHeight           = boxHeightInput
    boxHeightOffset     = 0.1 * boxHeight 
    boxWidth            = int(0.1*(endBarIndex - startBarIndex))
    axisZeroBarIndex    = math.min(startBarIndex + maxDataPoints * boxWidth + 9, endBarIndex)
    referenceBarIndex   = startBarIndex + int(0.5*(axisZeroBarIndex-startBarIndex))

    line.new(chart.point.new(na,startBarIndex,0.0),chart.point.new(na,axisZeroBarIndex,0.0),color=chart.fg_color,width=3)
    label.new(chart.point.new(na,axisZeroBarIndex,0.0),'0',xloc.bar_index,yloc.price,color(na),label.style_label_left,chart.fg_color,size.normal)
    label.new(chart.point.new(na,referenceBarIndex,1.0),'Reference: '+getTickerName(useChartTickerInput ? syminfo.tickerid : ticker00Input),xloc.bar_index,yloc.price,color(na),label.style_label_down,chart.fg_color,size.normal)

    for eachCluster in clusters

        if eachCluster.dataPoints.size() > 0
            line.new(chart.point.new(na,startBarIndex + 1,eachCluster.centroid),chart.point.new(na,axisZeroBarIndex,eachCluster.centroid),color=eachCluster.clusterColor,style = line.style_dotted,width=2)

            for [dataPointIndex,eachDataPoint] in eachCluster.dataPoints
                boxBarIndex = startBarIndex + dataPointIndex * boxWidth
                topLeft     = chart.point.new(na,boxBarIndex + 1,eachDataPoint.correlation + boxHeight - boxHeightOffset)    
                bottomRight = chart.point.new(na,boxBarIndex + boxWidth - 1,eachDataPoint.correlation - boxHeight + boxHeightOffset)
                box.new(topLeft,bottomRight,color(na),0,xloc = xloc.bar_index,bgcolor = eachCluster.clusterColor,text=eachDataPoint.tag,text_color = chart.fg_color,text_size = textSizeInput)

//---------------------------------------------------------------------------------------------------------------------}
//MUTABLE VARIABLES & EXECUTION
//---------------------------------------------------------------------------------------------------------------------{
// @variable        check if current bar is inside execution window
insideExecutionWindow = switch executionWindowInput    
    BARS => bar_index >= last_bar_index - barWindowInput
    TIME => time >= timenow - timeOffset
    => true

if barstate.isfirst
    initializeDataPoints()

// allow execution
if insideExecutionWindow
    // calculate coefficients once per bar
    updateCorrelationCoefficients()

    if barstate.islast
        // calculate clusters once before plotting the data
        updateClusters()

        // draw all alements
        drawClusters()

//---------------------------------------------------------------------------------------------------------------------}