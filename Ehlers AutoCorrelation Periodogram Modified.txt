// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ©ImmortalFreedom

//@version=5
indicator('[Excalibur] Ehlers AutoCorrelation Periodogram Modified', 'EACPM', false, format.price, 1)

colorize(series float power,
         simple  bool originalColorScheme) =>
    // Heatmap Color Helper Function
    int red = 255
    int grn = 0
    if power > 0.5
        grn := int(510.0 * (power - 0.5))
    else
        red := int(510.0 * power)
    if grn == 255
        color.rgb(red, grn, 180)
    else
        if originalColorScheme
            color.rgb(red, grn, 0)
        else
            if power > 0.5
                color.rgb(grn, grn, 255 - grn)
            else
                color.rgb(grn, 0, red)

hp1st(series float Series,
      simple float Period) =>
    // John Ehlers' 1st Order High Pass Function
    var float afreq =  2.0 * math.pi / Period
    var float coef1 = (1.0 - math.sin(afreq)) / math.cos(afreq)
    var float coef0 = (1.0 + coef1) * 0.5
    float mom = Series - nz(Series[1], Series)
    float  HP = na, HP := coef0 *    mom +
                          coef1 * nz(HP[1])

hp2nd(series float Series,
      simple float Period) =>
    // John Ehlers' 2nd Order High Pass Function
    var float afreq =  math.sqrt( 2.0) * math.pi / Period
    var float alpha = (math.cos(afreq) + math.sin(afreq) - 1.0) / math.cos(afreq)
    var float coef0 =  math.pow(1.0 - alpha  / 2.0, 2.0)
    var float coef1 =          (1.0 - alpha) * 2.0
    var float coef2 =  math.pow(1.0 - alpha,   2.0)
    float series1 = nz(Series[1], Series)
    float whiten  =   (Series - 2.0 * series1 + nz(Series[2], series1))
    float HP = na, HP := coef0 *    whiten +
                         coef1 * nz(HP[1]) -
                         coef2 * nz(HP[2])

sups(series float Series,
     simple float Period) =>
    // John Ehlers' SuperSmoother Function
    float smooth = na
    if bar_index==0 or Period<2.0
        smooth := Series
    else
        var float afreq =  math.sqrt(2.0) * math.pi / Period
        var float alpha =  math.exp(-afreq)
        var float coef2 = -math.pow( alpha,   2)
        var float coef1 =  math.cos( afreq) * 2.0 * alpha
        var float coef0 =  1.0 - coef1 - coef2
        float     sma2  =  math.avg(Series, nz(Series[1], Series))
        smooth := coef0 *     sma2      +
                  coef1 * nz(smooth[1]) +
                  coef2 * nz(smooth[2])

roof(series float             Series=close,
     simple float      LowPassPeriod=  7.5,    // Lowpass period of roofing filter
     simple int       HighPassPeriod=   49,    // Highpass period of roofing filter
     simple bool   HighPassSelection= true) => // Optional parameter to select either a 2nd or 1st order highpass filter for the roofing filter
    // Custom Roofing Filter
    switch HighPassSelection
        true => sups(hp2nd(Series, HighPassPeriod), LowPassPeriod)
        =>      sups(hp1st(Series, HighPassPeriod), LowPassPeriod)


acs( series float     PassbandSeries,          // Passband series data on which a spectrum is to be generated from
     simple int   AutoCorrelationLag=    3,    // AutoCorrelation lag period
     simple float     PowerThreshold= 0.05,    // Threshold value to mitigate noisiness or sudden jumps in the dominant cycle
     simple float           Contrast=  3.0,    // Value to improve contrast of color and the resolution of the spectral measurements
     simple string   FourierFiltAlgo='ESS',    // Enables/disables smoothing of Fourier spectral components
     simple int    FourierFiltPeriod=   10) => // Fourier filter smoothing period
    // AutoCorrelation Spectrum Function
    var     int autoCorrelationLag_M1 = AutoCorrelationLag - 1
    var  array<float> aFourierFactors =  array.new<float>(50)
    var matrix<float> mSmoothingCoefs = matrix.new<float>(50, 3)
    if barstate.isfirst //⮟⮟⮟⮟⮟ Precalculate Coefficients and Fourier Factors ⮟⮟⮟⮟⮟
        for int p=6 to 49
            if FourierFiltAlgo == 'ESS'
                float afreq =  math.sqrt(2.0) * math.pi / math.min(p, FourierFiltPeriod)
                float alpha =  math.exp(-afreq)
                float coef2 = -math.pow( alpha,   2) 
                float coef1 =  math.cos( afreq) * 2.0 * alpha
                mSmoothingCoefs.set(p, 2,               coef2)
                mSmoothingCoefs.set(p, 1,       coef1        )
                mSmoothingCoefs.set(p, 0, 1.0 - coef1 - coef2)
            else
                float coef0 =  2.0 / (FourierFiltPeriod + 1)
                mSmoothingCoefs.set(p, 1, 1.0 - coef0)
                mSmoothingCoefs.set(p, 0,       coef0)
            aFourierFactors.set(p, 2.0 * math.pi / p)
    
    float passbandSeries2           =  math.pow(PassbandSeries, 2)
    array<float> aAutoCorrelationsR = array.new<float>(50, 0.0)
    for int p=0 to 49 //⮟⮟⮟⮟⮟ Calculate AutoCorrelations ⮟⮟⮟⮟⮟
        float Ex =0.0, float Ey =0.0, float Exy=0.0
        float Exx=0.0, float Eyy=0.0
        for int i=0 to autoCorrelationLag_M1
            float t = i + p
            float X = nz(PassbandSeries[i])
    		float Y = nz(PassbandSeries[t])
            Ex  += X
            Exy += X * Y
    	    Ey  +=     Y
            Exx += nz(passbandSeries2[i])
            Eyy += nz(passbandSeries2[t])
        float numerator   =  (AutoCorrelationLag * Exy - Ex * Ey)
        float denominator =  (AutoCorrelationLag * Exx - Ex * Ex) *
                             (AutoCorrelationLag * Eyy - Ey * Ey)
    	if denominator > 0.0
            aAutoCorrelationsR.set(p, numerator / math.sqrt(denominator))
    
    array<float> aSpectralComps = array.new<float>(50)
    for int p=6 to 49 //⮟⮟⮟⮟⮟ Decompose Fourier Components ⮟⮟⮟⮟⮟
        float realPart = 0.0
    	float imagPart = 0.0
        float angularFreqFactor = aFourierFactors.get(p)
        for int i=0 to 49
            float ACi = aAutoCorrelationsR.get(i)
    		realPart += math.cos(angularFreqFactor * i) * ACi
    		imagPart += math.sin(angularFreqFactor * i) * ACi
    	aSpectralComps.set(p, math.pow(realPart, 2) +
                              math.pow(imagPart, 2))
    
    array<float> aSmoothedFourierComps = array.new<float>(50)
    switch FourierFiltAlgo
        'ESS' =>
            for int p=6 to 49 //⮟⮟⮟⮟⮟ Fourier Components SuperSmoothed ⮟⮟⮟⮟⮟
                float currFourierMagnitude = aSpectralComps.get(p)
                float superSmoothCoef2    = mSmoothingCoefs.get(p, 2)
                float superSmoothCoef1    = mSmoothingCoefs.get(p, 1)
                float superSmoothCoef0    = mSmoothingCoefs.get(p, 0)
                float lastFourierSmoothed = currFourierMagnitude
                float prevFourierSmoothed = currFourierMagnitude
                if not na(aSmoothedFourierComps[1]) // Check for prior series array NOT being `na`(undefined)
                    lastFourierSmoothed := array.get(aSmoothedFourierComps[1], p) // Obtains last existing series array element
                    if not na(aSmoothedFourierComps[2]) // Check for prior series array NOT being `na`(undefined)
                        prevFourierSmoothed := array.get(aSmoothedFourierComps[2], p) // Obtains previous existing series array element
                    else
                        prevFourierSmoothed := lastFourierSmoothed // Substitution value when `na` is present
                aSmoothedFourierComps.set(p, superSmoothCoef0 * currFourierMagnitude +
                                             superSmoothCoef1 *  lastFourierSmoothed +
                                             superSmoothCoef2 *  prevFourierSmoothed) // SuperSmoother Coefficients on Fourier series arrays
        'EMA' =>
            for int p=6 to 49 //⮟⮟⮟⮟⮟ Fourier Components EMA Smoothed ⮟⮟⮟⮟⮟
                float currFourierMagnitude = aSpectralComps.get(p)
                float lastFourierSmoothed  = currFourierMagnitude
                if not na(aSmoothedFourierComps[1]) // Check for prior series array NOT being `na`(undefined)
                    lastFourierSmoothed := array.get(aSmoothedFourierComps[1], p) // Obtains last existing series array element
                aSmoothedFourierComps.set(p, mSmoothingCoefs.get(p, 0) * currFourierMagnitude +
                                             mSmoothingCoefs.get(p, 1) * lastFourierSmoothed) // Ehlers' original EMA on Fourier series arrays
        => // 'NONE'
            for int p=6 to 49
                aSmoothedFourierComps.set(p, aSpectralComps.get(p))
    
    float peakPower = aSmoothedFourierComps.get(6)
    for int p=7 to 49 //⮟⮟⮟⮟⮟ Find Peak Power Component ⮟⮟⮟⮟⮟
        float spectralComponent = aSmoothedFourierComps.get(p)
        if spectralComponent > peakPower
    	    peakPower := spectralComponent
    
    float dividend = 0.0
    float divisor  = 0.0
    for int p=6 to 49 //⮟⮟⮟⮟⮟ Determine Dominant Cycle Period ⮟⮟⮟⮟⮟
        float spectriNormalized = math.pow(aSmoothedFourierComps.get(p) / peakPower, Contrast)
        if spectriNormalized > PowerThreshold
            dividend += spectriNormalized * p
            divisor  += spectriNormalized
        aSpectralComps.set(p, spectriNormalized) // Reassign normalized spectral components for periodogram
    var float DOMINANT_CYCLE = 7
    if divisor > 0.25
        DOMINANT_CYCLE := math.max(7, dividend / divisor)
    
    [DOMINANT_CYCLE, aSpectralComps] // tuple returns


string grp0 = 'Source Options'
string selectSourceOrSine  = input.string('Source', 'Source Selection', group=grp0, inline='1', options=['Source','SineWave'])
float  source              = input.source(   hlcc4,                 '', group=grp0, inline='1', tooltip='This can be sourced to other generators/indicators')
float  sineWavePeriod      = input.float (    16.0,'  SineWave Period', group=grp0, minval=6.0, tooltip='Wavelength of the sinusoidal wave in bars')
string grp1 = 'Roofing Filter Options'
float  roofingFilterLP     = input.float (  7.5, 'Roofing Filter: Low-Pass Period', group=grp1,  minval=7.0,  step=0.5,   maxval=30.0)
int    roofingFilterHP     = input.int   (   49,         '       High-Pass Period', group=grp1,  minval=49)
bool   highpassSelection   = input.bool  ( true,    '     High-Pass Filter Choice', group=grp1, tooltip="true == Ehlers' 2nd Order High Pass\nfalse == Ehlers' 1st Order High Pass")
string grp2 = 'Spectral Controls'
int    autoCorrelationLag  = input.int   (    3,      'AutoCorrelation Lag', group=grp2, minval=2)
string fourierCoefsFilter  = input.string('ESS', 'Fourier Smoothing Method', group=grp2, inline='2', options=['ESS','EMA','NONE'], tooltip="ESS -> Ehlers' SuperSmoother\nEMA -> Basic EMA")
int    fourierSmoothPeriod = input.int   (    9,                         '', group=grp2, inline='2',  minval=7)
float  powerThreshold      = input.float ( 0.05,          'Power Threshold', group=grp2, minval=0.05,   step=0.05, tooltip='This affects the spectral values')
float  heatMapContrast     = input.float (  2.5,         'HeatMap Contrast', group=grp2, minval=1.0,    step=0.5,  tooltip='This affects both the coloring and the spectral values')
bool   heatMapColorScheme  = input.bool  ( true,    'Original Color Scheme', group=grp2)
string grp3 = 'Dominant Cycle Options'
string dominantCycleType   = input.string(   'Float',   'Dominant Cycle Type', group=grp3, options=['Float','Integer*'])
string dominantCycleForm   = input.string('Smoothed',   'Dominant Cycle Form', group=grp3, options=['Smoothed','Floor*','Round*'])
float  smoothDominantCycle = input.float (       7.0, 'Smooth Dominant Cycle', group=grp3,  minval=1.0)

float price                              = selectSourceOrSine=='Source' ? source * 10.0 : math.sin(bar_index * 6.2831853 / sineWavePeriod) * 21.0 + 28.0
float roofingFilter                      = roof(price, roofingFilterLP, roofingFilterHP, highpassSelection)
[dominantCycle, aSpectralPowerEstimates] =  acs(roofingFilter, autoCorrelationLag, powerThreshold, heatMapContrast, fourierCoefsFilter, fourierSmoothPeriod)

dominantCycle := if dominantCycleType=='Integer*'
    switch dominantCycleForm
        'Round*' => int(math.round(dominantCycle))
        =>          int(           dominantCycle)
else
    switch dominantCycleForm
        'Smoothed' => math.max(7.0, sups(dominantCycle, smoothDominantCycle))
        'Round*'   => math.round(dominantCycle)
        =>            math.floor(dominantCycle)

plot(selectSourceOrSine=='Source' ? na : price, 'SineWave', #FFFFFF)
plot(                            dominantCycle,   'DomCyc', #8000FF, 2)

//===== The Periodogram =====//
var hline06 = hline( 6, color=#00000000), var hline07 = hline( 7, color=#00000000), var hline08 = hline( 8, color=#00000000), var hline09 = hline( 9, color=#00000000), var hline10 = hline(10, color=#00000000)
var hline11 = hline(11, color=#00000000), var hline12 = hline(12, color=#00000000), var hline13 = hline(13, color=#00000000), var hline14 = hline(14, color=#00000000), var hline15 = hline(15, color=#00000000)
var hline16 = hline(16, color=#00000000), var hline17 = hline(17, color=#00000000), var hline18 = hline(18, color=#00000000), var hline19 = hline(19, color=#00000000), var hline20 = hline(20, color=#00000000)
var hline21 = hline(21, color=#00000000), var hline22 = hline(22, color=#00000000), var hline23 = hline(23, color=#00000000), var hline24 = hline(24, color=#00000000), var hline25 = hline(25, color=#00000000)
var hline26 = hline(26, color=#00000000), var hline27 = hline(27, color=#00000000), var hline28 = hline(28, color=#00000000), var hline29 = hline(29, color=#00000000), var hline30 = hline(30, color=#00000000)
var hline31 = hline(31, color=#00000000), var hline32 = hline(32, color=#00000000), var hline33 = hline(33, color=#00000000), var hline34 = hline(34, color=#00000000), var hline35 = hline(35, color=#00000000)
var hline36 = hline(36, color=#00000000), var hline37 = hline(37, color=#00000000), var hline38 = hline(38, color=#00000000), var hline39 = hline(39, color=#00000000), var hline40 = hline(40, color=#00000000)
var hline41 = hline(41, color=#00000000), var hline42 = hline(42, color=#00000000), var hline43 = hline(43, color=#00000000), var hline44 = hline(44, color=#00000000), var hline45 = hline(45, color=#00000000)
var hline46 = hline(46, color=#00000000), var hline47 = hline(47, color=#00000000), var hline48 = hline(48, color=#00000000), var hline49 = hline(49, color=#00000000), var hline50 = hline(50, color=#00000000)

fill(hline06, hline07, colorize(aSpectralPowerEstimates.get( 6), heatMapColorScheme))
fill(hline07, hline08, colorize(aSpectralPowerEstimates.get( 7), heatMapColorScheme))
fill(hline08, hline09, colorize(aSpectralPowerEstimates.get( 8), heatMapColorScheme))
fill(hline09, hline10, colorize(aSpectralPowerEstimates.get( 9), heatMapColorScheme))
fill(hline10, hline11, colorize(aSpectralPowerEstimates.get(10), heatMapColorScheme))
fill(hline11, hline12, colorize(aSpectralPowerEstimates.get(11), heatMapColorScheme))
fill(hline12, hline13, colorize(aSpectralPowerEstimates.get(12), heatMapColorScheme))
fill(hline13, hline14, colorize(aSpectralPowerEstimates.get(13), heatMapColorScheme))
fill(hline14, hline15, colorize(aSpectralPowerEstimates.get(14), heatMapColorScheme))
fill(hline15, hline16, colorize(aSpectralPowerEstimates.get(15), heatMapColorScheme))
fill(hline16, hline17, colorize(aSpectralPowerEstimates.get(16), heatMapColorScheme))
fill(hline17, hline18, colorize(aSpectralPowerEstimates.get(17), heatMapColorScheme))
fill(hline18, hline19, colorize(aSpectralPowerEstimates.get(18), heatMapColorScheme))
fill(hline19, hline20, colorize(aSpectralPowerEstimates.get(19), heatMapColorScheme))
fill(hline20, hline21, colorize(aSpectralPowerEstimates.get(20), heatMapColorScheme))
fill(hline21, hline22, colorize(aSpectralPowerEstimates.get(21), heatMapColorScheme))
fill(hline22, hline23, colorize(aSpectralPowerEstimates.get(22), heatMapColorScheme))
fill(hline23, hline24, colorize(aSpectralPowerEstimates.get(23), heatMapColorScheme))
fill(hline24, hline25, colorize(aSpectralPowerEstimates.get(24), heatMapColorScheme))
fill(hline25, hline26, colorize(aSpectralPowerEstimates.get(25), heatMapColorScheme))
fill(hline26, hline27, colorize(aSpectralPowerEstimates.get(26), heatMapColorScheme))
fill(hline27, hline28, colorize(aSpectralPowerEstimates.get(27), heatMapColorScheme))
fill(hline28, hline29, colorize(aSpectralPowerEstimates.get(28), heatMapColorScheme))
fill(hline29, hline30, colorize(aSpectralPowerEstimates.get(29), heatMapColorScheme))
fill(hline30, hline31, colorize(aSpectralPowerEstimates.get(30), heatMapColorScheme))
fill(hline31, hline32, colorize(aSpectralPowerEstimates.get(31), heatMapColorScheme))
fill(hline32, hline33, colorize(aSpectralPowerEstimates.get(32), heatMapColorScheme))
fill(hline33, hline34, colorize(aSpectralPowerEstimates.get(33), heatMapColorScheme))
fill(hline34, hline35, colorize(aSpectralPowerEstimates.get(34), heatMapColorScheme))
fill(hline35, hline36, colorize(aSpectralPowerEstimates.get(35), heatMapColorScheme))
fill(hline36, hline37, colorize(aSpectralPowerEstimates.get(36), heatMapColorScheme))
fill(hline37, hline38, colorize(aSpectralPowerEstimates.get(37), heatMapColorScheme))
fill(hline38, hline39, colorize(aSpectralPowerEstimates.get(38), heatMapColorScheme))
fill(hline39, hline40, colorize(aSpectralPowerEstimates.get(39), heatMapColorScheme))
fill(hline40, hline41, colorize(aSpectralPowerEstimates.get(40), heatMapColorScheme))
fill(hline41, hline42, colorize(aSpectralPowerEstimates.get(41), heatMapColorScheme))
fill(hline42, hline43, colorize(aSpectralPowerEstimates.get(42), heatMapColorScheme))
fill(hline43, hline44, colorize(aSpectralPowerEstimates.get(43), heatMapColorScheme))
fill(hline44, hline45, colorize(aSpectralPowerEstimates.get(44), heatMapColorScheme))
fill(hline45, hline46, colorize(aSpectralPowerEstimates.get(45), heatMapColorScheme))
fill(hline46, hline47, colorize(aSpectralPowerEstimates.get(46), heatMapColorScheme))
fill(hline47, hline48, colorize(aSpectralPowerEstimates.get(47), heatMapColorScheme))
fill(hline48, hline49, colorize(aSpectralPowerEstimates.get(48), heatMapColorScheme))
fill(hline49, hline50, colorize(aSpectralPowerEstimates.get(49), heatMapColorScheme))