// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © ImmortalFreedom


//@version=5
indicator("Synthetic Price Action Generator", "SPAG", precision=3)

// ############################################ START COPY BOUNDARY ############################################

GROUP1 = "================ SPAG Close Controls ================"
GROUP2 = "============= Additional SPAG Controls =============="
nptIV  = input.int  (   50,                  "Initial Value", group=GROUP1, tooltip="This will be the starting value at\nbar_index==0, eventually gravitating\ntowards ≅50 at last_bar_index.\n\nOn the All chart you may influence\nthe trend of price values using this")
nptMPA = input.float( 0.45,       "Manipulate Price Action*", group=GROUP1, minval=-0.0 , maxval=0.95 , step=0.01   , tooltip="This acts as a randomness reset capability,\nenabling quick cycling through synthetic\nwaveforms of interest with your keyboard keys")
nptPCR = input.float(0.004,    "Perturbate close Randomness", group=GROUP1, minval=0.002, maxval=0.013, step=0.00005, tooltip="Just another way to manipulate randomness\nof close. Adjustments approaching minval\nor maxval values will diminish randomness")
nptPM  = input.float(  1.0,               "Price Multiplier", group=GROUP2,                             step=0.005  , tooltip="This can reduce the values of price action. For\ninstance, you can see what an indicator does\non open/high/low/close values of less than 1.0.\nUse of a negative number will yield an oscilator")
nptPHL = input.float( 0.19, "Perturbate high/low Volatility", group=GROUP2, minval= 0.07, maxval=0.27 , step=0.01   , tooltip="Increasing this value will lengthen the\naverage wick length, while decreasing it\nwill result in reduced average wick length")
nptOCV = input.float( 0.07,      "Variability of open/close", group=GROUP2, minval=-0.07, maxval=0.07 , step=0.01   , tooltip="A value of 0.0 will result\nin close equating to open[1]")

spg( float        InitialCloseValue=50.0 ,
     float    ManipulatePriceAction=0.45 ,
     float PertubateCloseRandomness=0.004,
     float  PerturbateHighLowValues=0.19 ,
     float     OpenCloseVariability=0.07 ,
     float          PriceMultiplier=1.0  ) => // Synthetic Price Generator Function
    var PRICE_MULT = PriceMultiplier==0 ? 0.001 : PriceMultiplier
    var SIGN_OF_PM = -1 == math.sign(PriceMultiplier)
    temp = 1.0 - PertubateCloseRandomness
    float CLOSE = na, CLOSE := PertubateCloseRandomness * math.random(100) + temp * nz(CLOSE[1])
    if bar_index == 0
        CLOSE := InitialCloseValue
	temp := 1 - ManipulatePriceAction
    rand4High  = math.random(.25)
    HighValue  = 0.0, HighValue := ManipulatePriceAction * rand4High + temp * nz(HighValue[1], rand4High)
    HighValue -= nz(HighValue[1]) - HighValue
    HIGH       = math.max(CLOSE, CLOSE + HighValue * PerturbateHighLowValues)
    rand4Low  = math.random(.25)
    LowValue  = 0.0, LowValue := ManipulatePriceAction * rand4Low + temp * nz(LowValue[1], rand4Low)
    LowValue -= nz(LowValue[1]) - LowValue
    LOW       = math.min(CLOSE, CLOSE - LowValue * PerturbateHighLowValues)
    OPEN  = CLOSE[1] + math.avg(rand4High, rand4Low) * (bar_index % 2 ? -1 : 1) * nptOCV
    Open  = SIGN_OF_PM ? ( OPEN - 50) * PriceMultiplier :  OPEN * PRICE_MULT
    High  = SIGN_OF_PM ? ( HIGH - 50) * PriceMultiplier :  HIGH * PRICE_MULT
    Low   = SIGN_OF_PM ? (  LOW - 50) * PriceMultiplier :   LOW * PRICE_MULT
    Close = SIGN_OF_PM ? (CLOSE - 50) * PriceMultiplier : CLOSE * PRICE_MULT
    [Open, High, Low, Close] // Tuple return

[Open, High, Low, Close] = spg(nptIV, nptMPA, nptPCR, nptPHL, nptOCV, nptPM)

HCC3  = math.avg( High, Close, Close) // Bonus calculation that a curious few may eventually find a use for
OCC3  = math.avg( Open, Close, Close) // Bonus calculation that a curious few may eventually find a use for
//===== How TV calculates the    ====//
//===== built-in variables below ====//
HL2   = math.avg( High,   Low)
HLC3  = math.avg( High,   Low, Close)
HLCC4 = math.avg( Open,  High, Close, Close)
OHLC4 = math.avg( Open,  High,   Low, Close)

//    NOTE: Overwrites existing built-in variables to provide ease of indicator evaluation once inserted into your script
// PURPOSE: This exists so you don't have to modify a tremendous amount of your existing code, inducing potential errata
//   USAGE: Uncomment the following lines to apply these synthetic values to your indicator after placement in the very top of your script
// open  = Open
// high  = High
// low   = Low
// close = Close
// hl2   = HL2
// hlc3  = HLC3
// hlcc4 = HLCC4
// ohlc4 = OHLC4

// ############################################# END COPY BOUNDARY #############################################

plotcandle(Open, High, Low, Close, "", Close>Open ? #00CC00 : #CC0000, #FFFF0080, bordercolor=#00000000)
plot(math.sign(nptPM)==-1 ? 0.0 : na, "", #808080, trackprice=true, show_last=1)