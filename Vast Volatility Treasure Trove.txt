//  Use and reuse of this code is governed by the terms of the Attribution-NonCommercial-ShareAlike 4.0 International License. https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode.txt
// © ImmortalFreedom

//@version=5
indicator("[Pandora] Vast Volatility Treasure Trove", 'VVTT')


var int volatilityPeriod = input.int(10, 'Volatility Period', minval=1)


// ╔═════════════════════╗
// ║  Popular Varieties  ║
// ╚═════════════════════╝
const string pop = 'POPULARS:'

parkinson(simple int    Period=10,
          simple bool Unbiased=false,
          series float    High=high,
          series float     Low=low) =>
    //≡≡≡≡≡ Parkinson Volatility ≡≡≡≡≡//
    if Period > 0
        const float  LOG16 = math.log(16.0)
        var int  period_S1 =  Period - 1
        var float uDivisor = (Period - 1) * LOG16 // unbiased
        var float bDivisor =  Period      * LOG16 //   biased
        float logRatioCalc = math.pow(math.log(High / Low), 2)
        float E=0.0, for int i=0 to period_S1
            E += nz(logRatioCalc[i])
        if Unbiased
            math.sqrt(E / uDivisor)
        else
            math.sqrt(E / bDivisor)
    else
        0.0 // na

var bool  pShow  = input.bool (     true,                                      '', group=pop, inline='PV')
var color pColor = input.color(#804000, '                 Parkinson Volatility', group=pop, inline='PV')
var bool  pBias  = input.bool (    false,                             '←Unbiased', group=pop, inline='PV')
plot( not pShow ? na : parkinson( volatilityPeriod, pBias), '',    pColor, 3)


parkinson2(simple int    Period=10,
           simple bool Unbiased=false,
           series float    High=high,
           series float     Low=low) =>
    //≡≡≡≡≡ Alternate Parkinson Volatility ≡≡≡≡≡// (Simpler Calculation)
    if Period > 0
        const float LOG16R = 1.0 / math.log(16.0)
        var int  period_S1 = Period - 1
        float logRatioCalc = math.pow(math.log(High / Low), 2) * LOG16R
        float E=0.0, for int i=0 to period_S1
            E += nz(logRatioCalc[i])
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)
    else
        0.0 // na

var bool  p2Show  = input.bool (     true,                                 '', group=pop, inline='P2V')
var color p2Color = input.color(#FF8000, '  Alternate Parkinson Volatility', group=pop, inline='P2V')
var bool  p2Bias  = input.bool (    false,                        '←Unbiased', group=pop, inline='P2V')
plot( not p2Show ? na : parkinson2(volatilityPeriod, p2Bias), '', p2Color)


garmanKlass( simple int    Period=10,
             simple bool Unbiased=false,
             series float    Open=open,
             series float    High=high,
             series float     Low=low,
             series float   Close=close) =>
    //≡≡≡≡≡ Garman-Klass Volatility ≡≡≡≡≡//
    if Period > 0
        const float LOG4_1 = math.log(4.0) - 1.0 // 2.0 * math.log(2.0) - 1.0
        var int  period_S1 = Period - 1
        float logRatioCalc = math.pow(math.log(High  /  Low), 2) * 0.5 -
                             math.pow(math.log(Close / Open), 2) * LOG4_1
        float E=0.0, for int i=0 to period_S1
            E += nz(logRatioCalc[i])
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)
    else
        0.0 // na

var bool  gkShow  = input.bool  (     true,                                   '', group=pop, inline='GKV')
var color gkColor = input.color (#440044, '           Garman-Klass Volatility', group=pop, inline='GKV')
var bool  gkBias  = input.bool  (    false,                          '←Unbiased', group=pop, inline='GKV')
plot( not gkShow ? na : garmanKlass(volatilityPeriod, gkBias), '', gkColor, 3)


rogersSatchellYoon(simple int    Period=10,
                   simple bool Unbiased=false,
                   series float    Open=open,
                   series float    High=high,
                   series float     Low=low,
                   series float   Close=close) =>
    //≡≡≡≡≡ Rogers-Satchell-Yoon Volatility ≡≡≡≡≡//
    if Period > 0
        var int  period_S1 = Period - 1
        float logHighOpen  = math.log(High  / Open)
        float logCloseOpen = math.log(Close / Open)
        float logLowOpen   = math.log(Low   / Open)
        float logRatioCalc = logHighOpen * (logHighOpen - logCloseOpen) +
                              logLowOpen * ( logLowOpen - logCloseOpen)
        float E=0.0, for int i=0 to period_S1 
            E += nz(logRatioCalc[i])
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)
    else
        0.0 // na

var bool  rsShow  = input.bool (     true,                                '', group=pop, inline='RSV')
var color rsColor = input.color(#000080, 'Rogers-Satchell-Yoon Volatility', group=pop, inline='RSV')
var bool  rsBias  = input.bool (    false,                       '←Unbiased', group=pop, inline='RSV')
plot( not rsShow ? na : rogersSatchellYoon(volatilityPeriod, rsBias), '', rsColor, 5)


rogersSatchellYoon2( simple int    Period=10,
                     simple bool Unbiased=false,
                     series float    Open=open,
                     series float    High=high,
                     series float     Low=low,
                     series float   Close=close) =>
    //≡≡≡≡≡ Rogers-Satchell-Yoon Volatility ≡≡≡≡≡//
    if Period > 0
        var int  period_S1 = Period - 1
        float logRatioCalc = math.log(High  / Close) *
                             math.log(High  /  Open) +
                             math.log(Close /   Low) *
                             math.log(Open  /   Low)
        float E=0.0, for int i=0 to period_S1 
            E += nz(logRatioCalc[i])
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)
    else
        0.0 // na

var bool  rsyShow  = input.bool (     true,                                '', group=pop, inline='RSYV')
var color rsyColor = input.color(#0055FF, 'Rogers-Satchell-Yoon Volatility', group=pop, inline='RSYV')
var bool  rsyBias  = input.bool (    false,                       '←Unbiased', group=pop, inline='RSYV')
plot( not rsyShow ? na : rogersSatchellYoon2(volatilityPeriod, rsyBias), '', rsyColor)


yangZhang(simple int    Period=10,
          simple bool Unbiased=false,
          simple float   Alpha=1.34,
          series float    Open=open,
          series float    High=high,
          series float     Low=low,
          series float   Close=close) =>
    //≡≡≡≡≡ Yang-Zhang Volatility ≡≡≡≡≡//
    if Period > 1
        var int  period_S1 = Period - 1
        var float    kappa = (1.0 - Alpha) / (Alpha + (Period + 1) / (Period - 1))
        var float   lambda =  1.0 - kappa
        float logHighOpen  = math.log(High  / Open)
        float logCloseOpen = math.log(Close / Open)
        float logLowOpen   = math.log(Low   / Open)
        float logOpenPrior = math.log(Open / nz(Close[1], Close))
        float avgOpenPrior = 0.0
        float avgCloseOpen = 0.0
        for int i=0 to period_S1
            avgOpenPrior += nz(logOpenPrior[i])
            avgCloseOpen += nz(logCloseOpen[i])
        avgOpenPrior /= Period
        avgCloseOpen /= Period
        float logRatioCalc = logHighOpen * (logHighOpen - logCloseOpen) +
                             logLowOpen * ( logLowOpen - logCloseOpen)
        float volatilityON = 0.0
        float volatilityRS = 0.0
        float volatilityCO = 0.0
        for int i=0 to period_S1
            volatilityON += math.pow(nz(logOpenPrior[i]) - avgOpenPrior, 2) //     "Overnight" Volatility
            volatilityRS +=          nz(logRatioCalc[i])                    // Rogers-Satchell Volatility
            volatilityCO += math.pow(nz(logCloseOpen[i]) - avgCloseOpen, 2) //   Close-to-Open Volatility
        volatilityON /= Unbiased ? period_S1 : Period
        volatilityRS /= Unbiased ? period_S1 : Period
        volatilityCO /= Unbiased ? period_S1 : Period
        math.sqrt(volatilityON +
          kappa * volatilityCO +
         lambda * volatilityRS)
    else
        0.0 // na

var bool  yzShow  = input.bool (     true,                                    '', group=pop, inline='YZV')
var color yzColor = input.color(#FF0000, '              Yang-Zhang Volatility', group=pop, inline='YZV')
var bool  yzBias  = input.bool (     true,                           '←Unbiased', group=pop, inline='YZV')
var float yzAlpha = input.float(     1.34,         '                         α:', group=pop, inline='YZV', minval=1.0, maxval=1.5, step=0.02)
plot( not yzShow ? na : yangZhang(volatilityPeriod, yzBias, yzAlpha), '', yzColor, 3)


yangZhangMod(simple int    Period=10,
             simple bool Unbiased=false,
             simple float   Alpha=1.34,
             series float    Open=open,
             series float    High=high,
             series float     Low=low,
             series float   Close=close) =>
    //≡≡≡≡≡ Yang-Zhang (Modified) Volatility ≡≡≡≡≡// ***EXPERIMENTAL***
    if Period > 1
        var int  period_S1 = Period - 1
        var float    kappa = (1.0 - Alpha) / (Alpha + (Period + 1) / (Period - 1))
        var float   lambda =  1.0 - kappa
        float logHighOpen  = math.log(High  / Open)
        float logCloseOpen = math.log(Close / Open)
        float logLowOpen   = math.log(Low   / Open)
        float logOpenPrior = math.log(Open  / nz(Close[1], Close))
        float logRatioCalc = logHighOpen * (logHighOpen - logCloseOpen) +
                             logLowOpen * ( logLowOpen - logCloseOpen)
        float volatilityON = 0.0
        float volatilityRS = 0.0
        float volatilityCO = 0.0
        for int i=0 to period_S1
            volatilityON += math.pow(nz(logOpenPrior[i]), 2) //     "Overnight" Volatility
            volatilityRS +=          nz(logRatioCalc[i])     // Rogers-Satchell Volatility
            volatilityCO += math.pow(nz(logCloseOpen[i]), 2) //   Close-to-Open Volatility
        volatilityON /= Unbiased ? period_S1 : Period
        volatilityRS /= Unbiased ? period_S1 : Period
        volatilityCO /= Unbiased ? period_S1 : Period
        math.sqrt(volatilityON +
          kappa * volatilityCO +
         lambda * volatilityRS)
    else
        0.0 // na

var bool  yzmShow  = input.bool (     true,                                 '', group=pop, inline='YZMV')
var color yzmColor = input.color(#FFFF00, '      Yang-Zhang(Mod) Volatility', group=pop, inline='YZMV')
var bool  yzmBias  = input.bool (     true,                        '←Unbiased', group=pop, inline='YZMV')
var float yzmAlpha = input.float(     1.34,      '                         α:', group=pop, inline='YZMV', minval=1.0, maxval=1.5, step=0.02)
plot( not yzmShow ? na : yangZhangMod(volatilityPeriod, yzmBias, yzmAlpha), '', yzmColor)



// ╔══════════════════════╗
// ║  Basic Volatilities  ║
// ╚══════════════════════╝
const string base = 'BASICS:'

selectable(simple string   Numerator,
           simple string Denominator,
           simple int         Period=10,
           simple bool      Unbiased=false,
           series float         Open=open,
           series float         High=high,
           series float          Low=low,
           series float        Close=close) =>
    //≡≡≡≡≡ Selectable Volatility ≡≡≡≡≡//
    if Period > 0
        var int  period_S1 = Period - 1
        numerator = switch Numerator
            'open' => Open
            'high' => High
            'low'  => Low
            => Close
        denominator = switch Denominator
            'open'  => Open
            'high'  => High
            'low'   => Low
            'close' => Close
            => nz(Close[1], Close)
        float  squaredDiff = math.pow(math.log(numerator / denominator), 2)
        float E=0.0, for int i=0 to period_S1
            E += nz(squaredDiff[i])
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)
    else
        0.0 // na

var bool  sShow  = input.bool  (      true,                      '', group=base, inline='SV')
var color sColor = input.color ( #AAFFAA, 'Selectable Volatility', group=base, inline='SV')
var bool  sBias  = input.bool  (     false,             '←Unbiased', group=base, inline='SV')
var string sNum  = input.string(   'close',          '        Num:', group=base, inline='SV2', options=['close','open','high','low'])
var string sDen  = input.string('close[1]',                  'Den:', group=base, inline='SV2', options=['close','open','high','low','close[1]'], tooltip='Calculation: log(Num / Den)')
plot( not sShow ? na : selectable(sNum, sDen, volatilityPeriod, sBias), '', sColor, 5)


closeToClose(simple int    Period=10,
             simple bool Unbiased=false,
             series float   Close=close) =>
    //≡≡≡≡≡ Close-to-Close Volatility ≡≡≡≡≡//
    // Applicable to non-OHLC data sources
    if Period > 0
        var int  period_S1 = Period - 1
        float logRatioCalc = math.pow(math.log(Close / nz(Close[1], Close)), 2)
        float E=0.0, for int i=0 to period_S1
            E += nz(logRatioCalc[i])
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)
    else
        0.0 // na

var bool  ccShow  = input.bool (     true,                          '', group=base, inline='CCV')
var color ccColor = input.color(#FF00FF, 'Close-to-Close Volatility', group=base, inline='CCV')
var bool  ccBias  = input.bool (    false,                 '←Unbiased', group=base, inline='CCV')
plot( not ccShow ? na : closeToClose(volatilityPeriod, ccBias), '', ccColor)


ocVola(simple int    Period=10,
       simple bool Unbiased=false,
       series float    Open=open,
       series float   Close=close) =>
    //≡≡≡≡≡ Open-to-Close Volatility ≡≡≡≡≡// AKA -> Overnight Volatility
    // Overnight gaps are pronounced
    if Period > 0
        var int  period_S1 = Period - 1
        float logRatioCalc = math.pow(math.log(Open / nz(Close[1], Close)), 2)
        float E=0.0, for int i=0 to period_S1  
            E += nz(logRatioCalc[i])
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)
    else
        0.0 // na

var bool  ocShow  = input.bool (    false,                            '', group=base, inline='OCV')
var color ocColor = input.color(#0055FF, '       Overnight Volatility', group=base, inline='OCV')
var bool  ocBias  = input.bool (    false,                   '←Unbiased', group=base, inline='OCV')
plot( not ocShow ? na : ocVola(volatilityPeriod, ocBias), '', ocColor, 2)



// ╔═════════════════╗
// ║  EXPERIMENTALS  ║
// ╚═════════════════╝
const string exps = 'EXPERIMENTALS:'

hilo(simple int    Period=10,
     simple bool Unbiased=true,
     series float    High=high,
     series float     Low=low) =>
    //≡≡≡≡≡ Hilo Volatility ≡≡≡≡≡// (Parkinson-like)
    if Period > 0
        var float   lambda = 4.0 / math.e
        var float exponent = 1.0 /  lambda
        var int  period_S1 =        Period - 1
        var float uDivisor = 2.0 * (Period - 1) // unbiased
        var float bDivisor = 2.0 *  Period      //   biased
        float logRatioCalc = math.pow(math.log(High / Low), lambda) // math.log(High / Low) == math.log(High) - math.log(Low)
        float E=0.0, for int i=0 to period_S1
            E += nz(logRatioCalc[i])
        if Unbiased
            math.pow(E / uDivisor, exponent)
        else
            math.pow(E / bDivisor, exponent)
    else
        0.0 // na

var bool  hlShow  = input.bool (     true,                      '', group=exps, inline='HLV')
var color hlColor = input.color(#FF00AA, '      Hilo Volatility', group=exps, inline='HLV')
var bool  hlBias  = input.bool (    false,            '← Unbiased', group=exps, inline='HLV')
plot( not hlShow ? na : hilo(volatilityPeriod, hlBias), '', hlColor)


vantage( simple int     Period=10,
         simple bool  Unbiased=true,
         simple float    Alpha=1.0,
         simple float     Beta=1.0,
         simple float    Gamma=1.0,
         simple float      Log=2.0,
         series float     Open=open,
         series float     High=high,
         series float      Low=low,
         series float    Close=close) =>
    //≡≡≡≡≡ Vantage Volatility ≡≡≡≡≡//
    if Period > 1
        var float     logX = math.log(math.e + Log)
        var int  period_S1 =         Period - 1
        var float uDivisor = logX * (Period - 1) // unbiased
        var float bDivisor = logX *  Period      //   biased
        var float     beta =  2.0 -  Alpha
        float        prior = nz(Close[1], Close)
        float logRatioCalc =  math.log(Open  / Close)     *
                              math.log(Close /  Open)     * Alpha +
                     math.pow(math.log(High  /   Low), 2) * Beta  +
                     math.pow(math.log(Open  / prior), 2) * Gamma
        float E=0.0, for int i=0 to period_S1 
            E += nz(logRatioCalc[i])
        if Unbiased
            math.sqrt(E / uDivisor)
        else
            math.sqrt(E / bDivisor)
    else
        0.0 // na

var bool  vShow  = input.bool (     true,                   '', group=exps, inline='VV')
var color vColor = input.color(#FFFFFF, 'Vantage Volatility', group=exps, inline='VV')
var bool  vBias  = input.bool (     true,          '←Unbiased', group=exps, inline='VV')
var float vLog   = input.float(      2.0,              '  ln:', group=exps, inline='VV',  minval=1.0, maxval=3.0, step=0.1)
var float vAlpha = input.float(      1.0,        '         ⍺:', group=exps, inline='VV2', minval=0.7, maxval=1.3, step=0.1)
var float vBeta  = input.float(      1.0,        '         ϐ:', group=exps, inline='VV2', minval=0.7, maxval=1.3, step=0.1)
var float vGamma = input.float(      1.0,        '         𝛾:', group=exps, inline='VV2', minval=0.7, maxval=1.3, step=0.1)
plot( not vShow ? na : vantage(volatilityPeriod, vBias, vAlpha, vBeta, vGamma, vLog), '', vColor, 2)



// ╔═══════════════╗
// ║  HISTORICALS  ║
// ╚═══════════════╝
const string hist = 'HISTORICALS:'

schwert( simple int    Period=10,
         simple bool Unbiased=false,
         series float   Close=close) =>
    //≡≡≡≡≡ Schwert Volatility ≡≡≡≡≡//
    if Period <= 1
        0.0 // na
    else
        var int period_S1 = Period - 1
        float       prior = nz(Close[1], Close)
        float arithReturn = (Close - prior) / prior
        float avg=0.0, for int i=0 to period_S1
            avg += nz(arithReturn[i])
        avg /= Period
        float E=0.0, for int i=0 to period_S1
            E += math.pow(nz(arithReturn[i]) - avg, 2)
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)

var bool  schwertShow   = input.bool (     true,                       '', group=hist, inline='SCHV')
var color schwertColor  = input.color(#555555, '    Schwert Volatility', group=hist, inline='SCHV')
var bool  schwertBias   = input.bool (     true,             '← Unbiased', group=hist, inline='SCHV')
plot( not schwertShow ? na : schwert(volatilityPeriod, schwertBias), '', schwertColor, 4)


hist(simple int    Period=10,
     simple bool Unbiased=false,
     series float   Close=close) =>
    //≡≡≡≡≡ Historical Volatility ≡≡≡≡≡//
    if Period <= 1
        0.0 // na
    else
        var int period_S1 = Period - 1
        float       prior = nz(Close[1], Close)
        float   logReturn = math.log(Close / prior)
        float avg=0.0, for int i=0 to period_S1
            avg += nz(logReturn[i])
        avg /= Period
        float E=0.0, for int i=0 to period_S1
            E += math.pow(nz(logReturn[i]) - avg, 2)
        if Unbiased
            math.sqrt(E / period_S1)
        else
            math.sqrt(E / Period)

var bool  histShow  = input.bool (     true,                        '', group=hist, inline='HV')
var color histColor = input.color(#00AAFF, '  Historical Volatility', group=hist, inline='HV')
var bool  histBias  = input.bool (     true,              '← Unbiased', group=hist, inline='HV')
plot( not histShow ? na : hist(volatilityPeriod, histBias), '', histColor)


annualHist(simple int     Period=10,
           simple bool  Unbiased=false,
           simple int DaysInYear=252,
           series float    Close=close) =>
    //≡≡≡≡≡ Annualized Historical Volatility ≡≡≡≡≡//
    if Period <= 1
        0.0 // na
    else
        var int   period_S1 = Period - 1
        var float annualize = math.sqrt(DaysInYear / Period)
        float         prior = nz(Close[1], Close)
        float     logReturn = math.log(Close / prior)
        float avg=0.0, for int i=0 to period_S1
            avg += nz(logReturn[i])
        avg /= Period
        float E=0.0, for int i=0 to period_S1
            E += math.pow(nz(logReturn[i]) - avg, 2)
        if Unbiased
            math.sqrt(E / period_S1) * annualize
        else
            math.sqrt(E / Period) * annualize

var bool  ahShow  = input.bool (    false,                      '', group=hist, inline='AHV')
var color ahColor = input.color(#00FFFF, 'Annualized Volatility', group=hist, inline='AHV')
var bool  ahBias  = input.bool (     true,            '← Unbiased', group=hist, inline='AHV')
var int   ahDays  = input.int  (      252,               '  Days:', group=hist, inline='AHV', tooltip='Daily returns in a trading year')
plot( not ahShow ? na : annualHist(volatilityPeriod, ahBias, ahDays), '', ahColor)


// ╔════════════════════════════╗
// ║  Bonus Functions (Unused)  ║
// ╚════════════════════════════╝ 
arithmeticReturn(float Close=close, float Open=open) => (Close - Open) / Open // Arithmetic Return
logReturn       (float Close=close) => math.log(Close / nz(Close[1], Close))  //        Log Return
// plot(arithmeticReturn(), '', #FF0000)
// plot(       logReturn(), '', #FFFF00)