fi(ki)=>'ra' 
// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © fikira
//@version=6

indicator('Scatter Plot'
 , max_labels_count =500 
 , max_boxes_count =500
 , max_lines_count=500
 , max_bars_back=2000
 , overlay=false)
 , INV=color(na)

________________________________________________________________________________________________________________________                                                                                                                                                                                                 ='
 ⎞  Settings  ⎛
 (__--------__)                                                                                                                                                                                                                                                                                                                        '

tt1            = 'Displays previous highest Intrabar Volume'
dir            = input.string('Right', 'Direction' , options=            ['Left', 'Right', 'Up', 'Down']                                 )
res            = input.timeframe( '1',    'LTF'                                                               , group='LTF'              )
auto           = input.bool     (true,     ''                                                , inline='auto'  , group='LTF'              )
mlt            = input.int      (1500, ' Auto   '  , minval = 1, maxval=5000                 , inline='auto'  , group='LTF'              )
prem           = input.bool     (false, 'Premium'  , tooltip='Premium Plan or higher'                         , group='LTF'              )
char           = input.string   ('●', 'Character'  , options=       ['●', '○', '✦', '✧', '◆', '✺', '❋', '✹']  , group='Character'        )
fadeCH         = input.int      ( 85, 'Fade'       , minval = 0, maxval=150                                   , group='Character'        )
charColor      = input.color    (color.orange    , 'Color'                                                  , group='Character'        )
displayLinreg  = input.bool     (true              , ''                                      , inline='linreg', group='linear Regression')
linregCol      = input.color    (#b2b5beb9       , 'Color'                                 , inline='linreg', group='linear Regression')
linregStyle_   = input.string   ('Dashed' , 'Style', options=  ['Dashed', 'Dotted', 'Solid'] , inline='linreg', group='linear Regression')
displayCross   = input.bool     (true              , 'Center Cross'                                           , group='linear Regression')
iTransp        = (150 -input.int(110, 'Fade', minval=0, maxval=150                                            , group='Background color' )) / 10
displayGradVol = input.bool     (true   ,         'Volume'                                   , inline=  'vol' , group='Background color' )
colLinefillVol = input.color    (color.orange    , ''                                      , inline=  'vol' , group='Background color' )
displayGradPrc = input.bool     (true   ,         'Price    '                                , inline=  'prc' , group='Background color' )
colLinefillPrc = input.color    (color.orange    , ''                                      , inline=  'prc' , group='Background color' )
sizeLabels     = input.string   (size.small, 'Size', options=[size.tiny, size.small, size.normal]             , group='Labels'           )
colorLabVol    = input.color    (#b2b5bec0       , 'Volume'                                                 , group='Labels'           )
colorLabPrc    = input.color    (#b2b5bec0       , 'Price    '                                              , group='Labels'           )
displaySize    = input.bool     (true              , 'Display Population Size'                                , group='Labels'           )

dashLoc        = input.string   ('Top Right', 'Location', options=['Top Right', 'Bottom Right', 'Bottom Left'], group='Dashboard'        )
table_size     = input.string   (size.small , 'Size'    , options=[size.tiny, size.small, size.normal]        , group='Dashboard'        )
displayRes     = input.bool     (true              , 'Display LTF', tooltip='Intrabar Lower Timeframe'        , group='Dashboard'        )
displayPastV   = input.bool     (false             , 'Highest IB volume', tooltip=tt1        , inline=  'ibv' , group='Dashboard'        )
amountPastV    = input.int      (1                 , '' , minval=1, maxval=5                 , inline=  'ibv' , group='Dashboard'        )

displayMedian  = input.bool     (true , 'Display Median'     , group = 'Extra')
displayp25_p75 = input.bool     (false, 'Display p25/p75'    , group = 'Extra')
display_IQR1_5 = input.bool     (false, 'Display +/- IQR*1.5', group = 'Extra')
display_IQR3   = input.bool     (false, 'Display +/- IQR*3'  , group = 'Extra')
display_bestFit= input.bool     (true , 'Display Best Fit'   , group = 'Extra')

________________________________________________________________________________________________________________________                                                                                                                                                                                                 :='
 ⎞  Variables  ⎛
 (__---------__)                                                                                                                                                                                                                                                                                                                        '

var array<float>aVol = array.new<float>(amountPastV, na)
avg           = math.avg(close, open)
lbi           = last_bar_index
bull          = close >  open
bear          = close <  open
neut          = close == open
n             = bar_index
width         = 100

linregStyle = switch linregStyle_ 
    'Solid'  => line.style_solid
    'Dashed' => line.style_dashed
    'Dotted' => line.style_dotted

table_position = switch dashLoc        
    'Top Right'   => position.top_right     
    'Bottom Left' => position.bottom_left 
    'Bottom Right'=> position.bottom_right

var table tab = table.new(table_position
 , amountPastV+1, 1, #1e222d, #373a46, 1, #373a46, 1)

________________________________________________________________________________________________________________________                                                                                                                                                                                                 :='
 ⎞  Methods / Functions  ⎛
 (__-------------------__)                                                                                                                                                                                                                                                                                                                        '

method n(float piv) => bool out = not na(piv)

drawLine(x1, y1, x2, y2, style=line.style_solid, color=color.blue) => 
    line.new(math.min(math.max(0, x1), lbi + 450), y1, math.min(math.max(0, x2), lbi + 400), y2, style=style, color=color)

drawLabel(x, y, style=label.style_label_center, color=color.blue, size=size.tiny, string txt=na, color txtcolor=na) => 
    label.new(x, y, style=style, color=color, size=size, text=txt, textcolor=txtcolor)

drawBox(x, y, char, color) =>
    box.new(x, y, x, y, bgcolor=INV, border_color=INV, text= char, text_color=color, text_size=size.tiny)

________________________________________________________________________________________________________________________                                                                                                                                                                                                 :='
 ⎞  Exec  ⎛
 (__----__)                                                                                                                                                                                                                                                                                                                        '

tfS  = timeframe.in_seconds(      res       )
tfC  = timeframe.in_seconds(timeframe.period)
rs   = auto ? tfC / mlt : tfS 
rs  := prem ? rs : math.max(60, rs)
res := timeframe.from_seconds(math.min(tfC, rs))

[bV, sV, nV, aVolume, aClose] = request.security_lower_tf(
  syminfo.tickerid,  res  , 
 [
   bull ? volume : 0
 , bear ? volume : 0
 , neut ? volume : 0
 , volume
 , close
 ]
 )

if not barstate.islast 
    if lbi - n > amountPastV 
        mp = map.new<float, float>()

        for [i, _close] in aClose
            _volume  = aVolume.get(i)
            _volume2 = nz(mp.get(_close)) + _volume
            mp.put(_close, _volume2)
        _maxVolume = mp.values().max()
        if not na(_maxVolume)
            aVol.unshift(_maxVolume), aVol.pop()
else 
    for lb in label.all 
        lb.delete() 
    for ln in line.all 
        ln.delete() 
    for bx in box.all 
        bx.delete()       

    aX = array.new<int>()     
    aY = array.new<float>() 
    bX = array.new<int>()     
    bY = array.new<float>() 
    mp = map.new<float, float>()

    for [i, _close] in aClose
        _volume  = aVolume.get(i)
        _volume2 = nz(mp.get(_close)) + _volume
        mp.put(_close, _volume2)

    mpSize     = mp.size()
    keys       = mp.keys() 
    _minPrices = keys.min()
    _maxPrices = keys.max()
    values     = mp.values()
    _minVolume = values.min() 
    _maxVolume = values.max() 
    _rangeVol  = values.range()
    _rangePrc  = keys.range()
    if not na(_maxVolume)
        aVol.unshift(_maxVolume), aVol.pop()

    //Volume Profile
    //points = array.new<chart.point>()
    //mp.keys().sort() 
    //for i = 0 to mpSize -1 
    //    points.push(chart.point.from_index(n + 10, mp.keys().get(i)))
    //    points.push(chart.point.from_index(math.round(n + 10 + (100 / _maxVolume * mp.get(mp.keys().get(i)))   ), mp.keys().get(i)))
    //    points.push(chart.point.from_index(n + 10, mp.keys().get(i)))
    //polyline.new(points, line_color=color.new(color.orange, 35))

    _xtra = (dir == 'Left' or dir == 'Right' ? _rangePrc : _rangeVol) * 0.1
    mult  = width / (dir == 'Left' or dir == 'Right' ? _rangeVol : _rangePrc)

    for key in mp.keys()
        val = mp.get(key) 
        transpX = dir == 'Left' or dir == 'Right' ? (val -  _minVolume) / _rangeVol
         : (key - _minPrices) / _rangePrc
        transpY = dir == 'Left' or dir == 'Right' ? (key - _minPrices) / _rangePrc 
         : (val -  _minVolume) / _rangeVol
        transp = math.avg(transpX, transpY) * 100

        x = math.round(
           dir == 'Left'  ? n -         (val - _minVolume) * mult
         : dir == 'Right' ? n - width + (val - _minVolume) * mult
         : n - width + (key - _minPrices) * mult
         )
        y = dir == 'Left' or dir == 'Right' ? key : dir == 'Up' ? val : _maxVolume - val
        aX.unshift(x)
        aY.unshift(y)
        bX.unshift(math.round(n - (val - _minVolume) * (width / _rangeVol)))
        bY.unshift(key)
        
        if box.all.size() < 500
            drawBox(x, y, char, color.new(charColor, fadeCH -transp))
        else 
            drawLabel(x, y, style=label.style_label_center, color=INV, txt=char, txtcolor=color.new(charColor, fadeCH -transp))


    stdev1 = aX.stdev()
    stdev2 = aY.stdev()
    xy_cov = aY.covariance(aX)
    pear_cor = xy_cov / (stdev1 * stdev2) 


    a = aY.covariance(aX) / aX.variance()    
    b = aY.avg()          - a *  aX.avg()
    c = bY.covariance(bX) / bX.variance()
    d = bY.avg()          - c *  bX.avg()

    aXmin = aX.min()  ,  aXmax = aX.max()
    aYmin = aY.min()  ,  aYmax = aY.max()
    bXmin = bX.min()  ,  bXmax = bX.max()
    bYmin = bY.min()  ,  bYmax = bY.max()

    y1 = a * aXmin + b,y2 = a * aXmax + b
    y3 = c * bXmin + d,y4 = c * bXmax + d

    StartX = dir == 'Left' ? aXmax : aXmin
    StartY = dir == 'Down' ? aYmax : aYmin 

    PrcEndX = dir == 'Left' or dir == 'Right' ? StartX : aXmax
    PrcEndY = dir == 'Up'                     ? aYmin  : aYmax

    VolEndX = dir == 'Right' ? aXmax : aXmin
    VolEndY = dir == 'Up'    ? aYmax : aYmin

    mult1 = (y3 - bYmin) / (bYmax - bYmin)    
    mult2 = (y4 - bYmin) / (bYmax - bYmin)

    if displayLinreg
        linRegLine = drawLine(
           dir == 'Left' ? bXmin :  dir == 'Right' ? n : math.round(StartX + (PrcEndX - StartX) * mult1)
         , dir == 'Up' or  dir == 'Down' ? VolEndY : y3
         , dir == 'Left' ? n :  dir == 'Right' ? bXmin : math.round(StartX + (PrcEndX - StartX) * mult2)
         , dir == 'Up' or  dir == 'Down' ? StartY : y4, linregStyle, linregCol)
        Xpos = math.round(math.avg(linRegLine.get_x1(), linRegLine.get_x2()))
        if displayCross 
            drawLabel(Xpos, linRegLine.get_price(Xpos), style=label.style_cross, color=linregCol)

    labStylePrice  = dir == 'Left' ? label.style_label_left : dir == 'Right' ? label.style_label_right : dir == 'Up' ? label.style_label_up  : label.style_label_down
    labStyleVolume = dir == 'Left' ? label.style_label_up   : dir == 'Right' ? label.style_label_up    : label.style_label_right

    //Value count
    //pear_cor: https://www.tradingview.com/script/VR5P3DRM-Statistical-Package-for-the-Trading-Sciences-SS/
    if displaySize
        drawLabel(
           StartX + (dir == 'Left' ? 3 : -3)
         , StartY - _xtra * (dir == 'Down' ? -1 : 1)
         , txt=str.format(" ({0}){1}\n{2}", mpSize, mpSize > 1000 ? '\nSize > 1K\nnot all data is shown' : '', pear_cor), color=INV
         , style=label.style_label_up
         , txtcolor=mpSize > 1000 ? #FF0000 : chart.fg_color
         , size=size.small
         )

    //Gradient background color
    for i = 0 to 99
        if displayGradPrc
            //price linefill
            linefill.new(
             drawLine(       
                   dir == 'Left' or dir == 'Right' ? StartX                         : StartX +i
                 , dir == 'Left' or dir == 'Right' ? StartY + ((PrcEndY - StartY) / 100 * i) : _minVolume
                 , dir == 'Left' ? StartX - width : dir == 'Right' ? StartX + width : StartX +i
                 , dir == 'Left' or dir == 'Right' ? StartY + ((PrcEndY - StartY) / 100 * i) : _maxVolume          
                 , color=INV)
             ,
             drawLine(      
                   dir == 'Left' or dir == 'Right' ? StartX                             : StartX +i+1
                 , dir == 'Left' or dir == 'Right' ? StartY + ((PrcEndY - StartY) / 100 * (i+1)) : _minVolume
                 , dir == 'Left' ? StartX - width : dir == 'Right' ? StartX + width     : StartX +i+1
                 , dir == 'Left' or dir == 'Right' ? StartY + ((PrcEndY - StartY) / 100 * (i+1)) : _maxVolume           
                 , color=INV)

             , color = color.new(colLinefillPrc, 100 - iTransp / (100-i/2) * i)
             )

        if displayGradVol
            //volume linefill
            linefill.new(
             drawLine(       
                   dir == 'Left' ? StartX -i       : dir == 'Right' ? StartX +i   : StartX
                 , dir == 'Left' or dir == 'Right' ? StartY : StartY + ((VolEndY - StartY) / 100 * i)
                 , dir == 'Left' ? StartX -i       : dir == 'Right' ? StartX +i   : StartX + width
                 , dir == 'Left' or dir == 'Right' ? PrcEndY : StartY + ((VolEndY - StartY) / 100 * i) 
                 , color=INV) 
             , 
             drawLine(       
                   dir == 'Left' ? StartX -i-1     : dir == 'Right' ? StartX +i+1 : StartX
                 , dir == 'Left' or dir == 'Right' ? StartY : StartY + ((VolEndY - StartY) / 100 * (i+1)) 
                 , dir == 'Left' ? StartX -i-1     : dir == 'Right' ? StartX +i+1 : StartX + width
                 , dir == 'Left' or dir == 'Right' ? PrcEndY : StartY + ((VolEndY - StartY) / 100 * (i+1))        
                 , color=INV)

             , color = color.new(colLinefillVol, 100 - iTransp / (100-i/2) * i)
             )

    //Grid
    for i = 0 to 10          
        //Price
        switch  
            dir == 'Left' or dir == 'Right' => 
                priceLevel = _minPrices + (_rangePrc / 10 * i)
                //lines
                drawLine(StartX, priceLevel, VolEndX, priceLevel, color=color.new(chart.fg_color, 75))
                //labels
                drawLabel(StartX + (dir == 'Left' ? 1 : -1), StartY + _rangePrc / 10 * i 
                 , txt=str.tostring(_minPrices + _rangePrc / 10 * i, format.mintick)
                 , style=labStylePrice, color=INV
                 , txtcolor=colorLabPrc
                 , size=sizeLabels
                 )                
            => 
                priceLevel = StartX + math.round((PrcEndX -  StartX) / 10 * i)
                //lines
                drawLine(priceLevel, StartY, priceLevel, VolEndY, color=color.new(chart.fg_color, 75))
                //labels
                drawLabel(StartX + math.round((PrcEndX -  StartX) / 10 * i), StartY - (VolEndY - StartY) * 0.02
                 , txt=str.tostring(_minPrices + _rangePrc/10*i, format.mintick)
                 , style=labStylePrice, color=INV
                 , txtcolor=colorLabPrc
                 , size=sizeLabels
                 )

        //Volume 
        switch
            dir == 'Left' or dir == 'Right' => 
                volumeLevel = StartX + math.round((VolEndX -  StartX) / 10 * i) 
                //lines
                drawLine(volumeLevel, StartY, volumeLevel, PrcEndY, color=color.new(chart.fg_color, 75))
                //labels
                drawLabel(volumeLevel, StartY - (PrcEndY - StartY) * 0.02
                 , txt=str.tostring(_minVolume + _rangeVol/10*i, format.volume)
                 , style=labStyleVolume, color=INV
                 , txtcolor=colorLabVol
                 , size=sizeLabels
                 )

            => 
                volumeLevel = StartY + math.round((VolEndY -  StartY) / 10 * i)
                //lines
                drawLine(StartX, volumeLevel, PrcEndX, volumeLevel, color=color.new(chart.fg_color, 75))
                //labels
                drawLabel(StartX - 1, volumeLevel
                 , txt=str.tostring(_minVolume + _rangeVol/10*i, format.volume)
                 , style=labStyleVolume, color=INV
                 , txtcolor=colorLabVol
                 , size=sizeLabels
                 )

    //Axis lines
    adjustPrc = (PrcEndY - StartY) * 0.02
    adjustVol = (VolEndY - StartY) * 0.02

    //Price
    drawLine(
       StartX + (dir == 'Left' ? 1 : -1)
     , StartY - (dir == 'Left' or dir == 'Right' ? adjustPrc : adjustVol)
     , math.round(PrcEndX + (PrcEndX - StartX) * 0.05) + (dir == 'Left' ? 1 : dir == 'Right' ? -1 : 0)
     , PrcEndY + (PrcEndY - StartY) * 0.05 - (dir == 'Left' or dir == 'Right' ? adjustPrc : adjustVol)
     , color=colorLabPrc, style=line.style_arrow_right)

    //Volume
    drawLine(
       StartX + (dir == 'Left' ? 1 : -1)
     , StartY - (dir == 'Left' or dir == 'Right' ? adjustPrc : adjustVol)
     , math.round(VolEndX + (VolEndX - StartX) * 0.05) + (dir == 'Up' or dir == 'Down' ? -1 : 0)
     , VolEndY + (VolEndY - StartY) * 0.05 - (dir == 'Left' or dir == 'Right' ? adjustPrc : 0)
     , color=colorLabVol, style=line.style_arrow_right)
    
    //Warning if < 100 bars
    if lbi < 100
        label.new(0, dir == 'Left' or dir == 'Right' ? PrcEndY : VolEndY
         , style = dir == 'Down' ? label.style_label_upper_right : label.style_label_lower_right 
         , text='< 100 bars\n not all data is shown', textcolor=#FF0000, color=INV)

    //Table
    if displayRes
        tab.cell(amountPastV, 0, str.format('Res: {0}', res)
           , text_color=chart.fg_color, text_size=table_size)

    if displayPastV
        for i = 0 to amountPastV -1
            if not na(aVol.get(amountPastV-1-i))
                tab.cell(i, 0, str.tostring(aVol.get(amountPastV-1-i), format.volume), text_color=charColor)

    if dir == 'Right'
        xP25 = aX.percentile_nearest_rank(25) 
        xP75 = aX.percentile_nearest_rank(75)
        yP25 = aY.percentile_nearest_rank(25) 
        yP75 = aY.percentile_nearest_rank(75)
        xIQR = xP75 - xP25
        yIQR = yP75 - yP25 

        sizeX = aX.size()
        medianX = aX.median()        
        medianY = aY.median()

        sumX = 0., sumY = 0.

        for i = 0 to sizeX -1 
            sumX += math.pow(aX.get(i) - medianX, 2)
            sumY += math.pow(aY.get(i) - medianY, 2)
        sqrtX = math.sqrt(sumX / sizeX)        
        sqrtY = math.sqrt(sumY / sizeX)

        if displayMedian
            label.new(math.round(medianX), medianY, style=label.style_label_center, color=INV, text=char, textcolor=color.white)

        if display_bestFit
            box.new(
               math.max(aXmin -1, math.round(medianX - sqrtX))
             , math.min(aYmax + adjustPrc  , medianY + sqrtY)
             , math.min(aXmax +1, math.round(medianX + sqrtX))
             , math.max(aYmin - adjustPrc  , medianY - sqrtY)
             , border_color=color.new(color.orange, 0)
             , bgcolor=INV
             )

        if displayp25_p75
            box.new(
               xP25
             , yP75
             , xP75
             , yP25
             , border_color=color.new(chart.fg_color, 0)
             , bgcolor=INV
             )

        if display_IQR1_5
            box.new(
               math.max(aXmin -1, math.round(xP25 - 1.5*xIQR))
             , math.min(aYmax + adjustPrc, yP75 + 1.5*yIQR)
             , math.min(aXmax +1, math.round(xP75 + 1.5*xIQR))
             , math.max(aYmin - adjustPrc, yP25 - 1.5*yIQR)
             , border_color=color.new(chart.fg_color, 50)
             , bgcolor=INV
             )

        if display_IQR3
            box.new(
               math.max(aXmin -1, math.round(xP25 - 3*xIQR))
             , math.min(aYmax + adjustPrc, yP75 + 3*yIQR)
             , math.min(aXmax +1, math.round(xP75 + 3*xIQR))
             , math.max(aYmin - adjustPrc, yP25 - 3*yIQR)
             , border_color=color.new(color.blue, 50)
             , bgcolor=INV
             )

________________________________________________________________________________________________________________________                                                                                                                                                                                                 :='
 ⎞  End  ⎛
 (__---__)                                                                                                                                                                                                                                                                                                                        '
