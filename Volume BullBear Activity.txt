// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TZack88

//@version=5
indicator("Volume Bull/Bear Activity [ZC]",explicit_plot_zorder = true)
string SettingsG = "Settings"
bool ChartTime   = time > chart.left_visible_bar_time and time <= chart.right_visible_bar_time
string TIME      = input.timeframe("1D",title = "TimeFrame",group =SettingsG ,inline = "!C")
// Boxes Colors
color C1         = input.color(color.rgb(4, 163, 86, 30),title = "Bars",group =SettingsG ,inline = "!C2")
color C2         = input.color(color.rgb(153, 8, 8, 30),title = "",group =SettingsG ,inline = "!C2")

// Volume Text colors
color TC1        = input.color(color.rgb(0, 230, 118),title = "Text",group =SettingsG ,inline = "!C2")
color TC2        = input.color(color.rgb(251, 221, 101),title = "",group =SettingsG ,inline = "!C2")
// Symbols
string s01       = input.symbol('BTCUSDT'  , group = 'Symbols' , title = "Symbol 1")
string s02       = input.symbol('HOOKUSDT' , group = 'Symbols' , title = "Symbol 2")
string s03       = input.symbol('DOGEUSDT' , group = 'Symbols' , title = "Symbol 3")
string s04       = input.symbol('BNBUSDT'  , group = 'Symbols' , title = "Symbol 4")
string s05       = input.symbol('ETHUSDT'  , group = 'Symbols' , title = "Symbol 5")
string s06       = input.symbol('ADAUSDT'  , group = 'Symbols' , title = "Symbol 6")
string s07       = input.symbol('SOLUSDT'  , group = 'Symbols' , title = "Symbol 7")
string s08       = input.symbol('AXSUSDT'  , group = 'Symbols' , title = "Symbol 8")
string s09       = input.symbol('TRXUSDT'  , group = 'Symbols' , title = "Symbol 9")
string s10       = input.symbol('MASKUSDT' , group = 'Symbols' , title = "Symbol 10")
string s11       = input.symbol('SANDUSDT' , group = 'Symbols' , title = "Symbol 11")
string s12       = input.symbol('ATOMUSDT' , group = 'Symbols' , title = "Symbol 12")
string s13       = input.symbol('VETUSDT'  , group = 'Symbols' , title = "Symbol 13")
string s14       = input.symbol('OPUSDT'   , group = 'Symbols' , title = "Symbol 14")
string s15       = input.symbol('LDOUSDT'  , group = 'Symbols' , title = "Symbol 15")
string s16       = input.symbol('EOSUSDT'  , group = 'Symbols' , title = "Symbol 16")
string s17       = input.symbol('XLMUSDT'  , group = 'Symbols' , title = "Symbol 17")
string s18       = input.symbol('LTCUSDT'  , group = 'Symbols' , title = "Symbol 18")
string s19       = input.symbol('AVAXUSDT' , group = 'Symbols' , title = "Symbol 19")
string s20       = input.symbol('STGUSDT'  , group = 'Symbols' , title = "Symbol 20")

// visable range 
var float [] Xbars  = array.new_float()
if ChartTime
    array.push(Xbars,time)

Mid                 = int(array.size(Xbars) / 2 )
END                 = bar_index[Mid] + 104
Start               = bar_index[Mid] - 100

// @description -- gets the volume data and create the volume bars along with labels 
// @function VolumeData uses request security to fetch data and do some calculation to draw the volume bars
// @param string pair -- symbol 
// @param int x1 -- x1 for the bar boxes . 
// @returns nothing -- as it gets data and draw it .
method VolumeData(string pair,x1)=>
    var box Green   = na, Green.delete()
    var label Name  = na , Name.delete()
    var label Data  = na , Data.delete()
    var box Red     = na, Red.delete()
    var GreenSpace  = 0.0
    var RedSpace    = 0.0

    _BuyV           = math.round(volume * (close - low) / (high- low))
    _SellV          = math.round(volume * (high- close) / (high- low))

    [BuyV,SellV,
     Price,Open]    = request.security(pair,TIME,[_BuyV,_SellV,close,open]) 
    Delta           =  BuyV + SellV
    BuyMat          =  BuyV  / Delta * 10
    SellMat         =  SellV / Delta * 10
    Spacing         =  (0.8 - 0.5 ) / 10
    GreenSpace      := (Spacing * BuyMat ) + 0.5
    RedSpace        := (Spacing * SellMat ) + 0.5


    Green:= box.new(

                 Start+x1,0.5,Start+2+x1,GreenSpace,
                 text_size      = size.small ,
                 bgcolor        = color.new(C1, 50),
                 border_color   = color.new(C1, 14),
                 text_color     = TC1,
                 text           = str.tostring(BuyV, format.volume),
                 text_valign    = BuyMat > SellMat ? text.align_top : text.align_center
                 
                 )

    Red:= box.new(

                 Start+x1+2,0.5,Start+4+x1,RedSpace,
                 text_size      = size.small,
                 bgcolor        = color.new(C2, 50),
                 border_color   = color.new(C2, 14),
                 text_color     = TC2,
                 text           = str.tostring(SellV, format.volume),
                 text_valign    = SellMat > BuyMat ? text.align_top : text.align_center
                 
                 )   
     
    Name:= label.new(
        
                 Start+2+x1,0.45,syminfo.ticker(pair),
                 color      = color.new(color.black,100),
                 textcolor  = color.white,
                 size       = size.small
                 
                 )
    Data:= label.new(
        
                 Start+2+x1,0.42, str.tostring(Price),
                 color      = color.new(color.black,100),
                 textcolor  = Price > Open ? color.lime : color.rgb(208, 25, 123),
                 size       = size.small
                 
                 )
    

BoxDrawing()=>
    var box Big         = na , Big.delete()
    var box left        = na , left.delete()
    var box TOP         = na , TOP.delete()
    var box right       = na , right.delete()

    Big:= box.new(

                     Start,0.88,END,0.5,
                     bgcolor        = color.new(color.gray,100),
                     border_color   = color.new(color.gray,50),
                     border_style   = line.style_dashed

                     ) 
    left:=box.new(

                     Start-3,0.88,Start,0.5,
                     bgcolor        = color.rgb(89, 24, 209, 50),
                     border_color   = color.new(color.gray,100),
                     border_style   = line.style_dashed

                     ) 

    TOP:=box.new(

                     Start-3,0.91,END,0.88,
                     bgcolor        = color.rgb(89, 24, 209, 50),
                     border_color   = color.new(color.gray,100),
                     border_style   = line.style_dashed,
                     text           = " RealTime Bull/Bear Activity",
                     text_halign    = text.align_center,
                     text_color     = color.white

                     )
                                            
    right:=box.new(

                     END+3,0.91,END,0.5,
                     bgcolor        = color.rgb(89, 24, 209, 50),
                     border_color   = color.new(color.gray,100),
                     border_style   = line.style_dashed,
                     border_width   = 3

                     ) 

Run()=>
    BoxDrawing()   
    s01.VolumeData(5)   , s02.VolumeData(15) , s03.VolumeData(25)  , s04.VolumeData(35)
    s05.VolumeData(45)  , s06.VolumeData(55) , s07.VolumeData(65)  , s08.VolumeData(75)
    s09.VolumeData(85)  , s10.VolumeData(95) , s11.VolumeData(105) , s12.VolumeData(115)
    s13.VolumeData(125) , s14.VolumeData(135), s15.VolumeData(145) , s16.VolumeData(155)
    s17.VolumeData(165) , s18.VolumeData(175), s19.VolumeData(185) , s20.VolumeData(195)




if barstate.islast
    Run()
    
    




