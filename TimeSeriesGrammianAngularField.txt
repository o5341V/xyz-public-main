// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © RicardoSantos

//@version=5

// @description provides Grammian angular field and associated utility functions.
// ___
// 
// Reference:
// *Time Series Classification: A review of Algorithms and Implementations*.
// https://www.researchgate.net/figure/IMU-sensor-data-imaging-via-Gramian-Angular-Field-in-MMTSA_fig1_364439514
library("TimeSeriesGrammianAngularField")

// @function Normalize the series to a optional range, usualy within `(-1, 1)` or `(0, 1)`.
// @param	data	Sample data to normalize.
// @param	a		Minimum target range value, `default=-1.0`.
// @param	b		Minimum target range value, `default= 1.0`.
// @returns Normalized array within new range.
// ___
// 
// Reference:
// *Time Series Classification: A review of Algorithms and Implementations*.
export method normalize (float[] data, float a=-1.0, float b=1.0) =>
	float _max = data.max()
	float _min = data.min()
	float _range = _max - _min
	float _range_scalar = b - a
	float[] _data = data.copy()
	for [_i, _xi] in _data
		_data.set(_i, a + _range_scalar * ((_xi - _min) / _range))
	_data


// @function Normalize the series to a optional range, usualy within `(-1, 1)` or `(0, 1)`.\
// *Note that this may provide a different result than the array version due to rolling range*.
// @param	source	Series to normalize.
// @param	length	Number of bars to sample the range.
// @param	a		Minimum target range value, `default=-1.0`.
// @param	b		Minimum target range value, `default= 1.0`.
// @returns Normalized series within new range.
export normalize_series (float source, int length, float a=-1.0, float b=1.0) =>
	float _max = ta.highest(source, length)
	float _min = ta.lowest(source, length)
	float _range = _max - _min
	float _range_scalar = b - a
	a + _range_scalar * ((source - _min) / _range)

// @function Turns a normalized sample array into polar coordinates.
// @param	data	Sampled data values.
// @returns Converted array into polar coordinates.
export method polar (float[] data) =>
	float[] _data = data.copy()
	for [_i, _xi] in _data
		_data.set(_i, math.acos(_xi))
	_data

// @function Turns a normalized series into polar coordinates.
// @param	source	Source series.
// @returns Converted series into polar coordinates.
export polar_series (float source) =>
	math.acos(source)

// @function Gramian Angular Summation Field *`GASF`*.
// @param	data	Sampled data values.
// @returns Matrix with *`GASF`* values.
export method gasf (float[] data) =>
	int _size = data.size()		, int _size1 = _size - 1
	matrix<float> _gram = matrix.new<float>(_size, _size, 0.0)
	for _i = 0 to _size1
		float _xi = data.get(_i)
		for _j = 0 to _size1
			float _xj = data.get(_j)
			_gram.set(_i, _j, math.cos(_xi + _xj))
	_gram

// @function Trig. identity of Gramian Angular Summation Field *`GASF`*.
// @param	data	Sampled data values.
// @returns Matrix with *`GASF`* values.
// Reference:
// *Time Series Classification: A review of Algorithms and Implementations*.
export method gasf_id (float[] data) =>
	int _size = data.size()		, int _size1 = _size - 1
	matrix<float> _gram = matrix.new<float>(_size, _size, 0.0)
	for _i = 0 to _size1
		float _xi = data.get(_i)
		for _j = 0 to _size1
			float _xj = data.get(_j)
			_gram.set(_i, _j, _xi * _xj - math.sqrt((1.0 - _xi) * (1.0 - _xj)))
	_gram

// @function Gramian Angular Difference Field *`GADF`*.
// @param	data	Sampled data values.
// @returns Matrix with *`GADF`* values.
export method gadf (float[] data) =>
	int _size = data.size()		, int _size1 = _size - 1
	matrix<float> _gram = matrix.new<float>(_size, _size, 0.0)
	for _i = 0 to _size1
		float _xi = data.get(_i)
		for _j = 0 to _size1
			float _xj = data.get(_j)
			_gram.set(_i, _j, math.sin(_xi - _xj))
	_gram

// @function Trig. identity of Gramian Angular Difference Field *`GADF`*.
// @param	data	Sampled data values.
// @returns Matrix with *`GADF`* values.
// Reference:
// *Time Series Classification: A review of Algorithms and Implementations*.
export method gadf_id (float[] data) =>
	int _size = data.size()		, int _size1 = _size - 1
	matrix<float> _gram = matrix.new<float>(_size, _size, 0.0)
	for _i = 0 to _size1
		float _xi = data.get(_i)
		for _j = 0 to _size1
			float _xj = data.get(_j)
			_gram.set(_i, _j, _xj * math.sqrt(1.0 - _xi) - _xi * math.sqrt(1.0 - _xj))
	_gram

// ###################################################################################################################
// ###################################################################################################################
// ###################################################################################################################

// Example usage:

string __M00 = "GASF"
string __M01 = "GADF"

string i_method = input.string(__M00, 'Method:', [__M00, __M01])

src = normalize_series(close, 10)
polar = polar_series(src)
plot(src), plot(polar, '', color.red)
var s = array.new<float>(10, close)
if bar_index > 10
	s.unshift(src)
	s.pop()
if barstate.islast
	color col_lb = #9b6baa
	matrix<float> gaf		= i_method == __M00 ? gasf(s) : gadf(s)
	matrix<float> gaf_id	= i_method == __M00 ? gasf_id(s) : gadf_id(s)
	table tr = table.new(position.bottom_right, 21, 11)
	tr.cell(0, 0, 'ID', bgcolor=col_lb)
	tr.merge_cells(0, 0, 9, 0)
	tr.cell(11, 0, 'GAF', bgcolor=col_lb)
	tr.merge_cells(11, 0, 20, 0)
	tr.cell(10, 0, ' ')
	for _i = 0 to 9
		for _j = 0 to 9
			color _tcol = _i == _j ? #ffffff : #000000
			float _vs = gaf.get(_i, _j)
			float _vd = gaf_id.get(_i, _j)
			tr.cell(_j, 1+_i, str.tostring(_vs, '#.#'), text_color=_tcol, bgcolor = color.rgb(127*(2-_vs), 127*(1+_vs), 100))
			tr.cell(11+_j, 1+_i, str.tostring(_vd, '#.#'), text_color=_tcol, bgcolor = color.rgb(127*(2-_vd), 127*(1+_vd), 100))


