// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© LuxAlgo

//@version=5
indicator("Crypto Wallets Profitability & Performance [LuxAlgo]", "LuxAlgo - Crypto Wallets Profitability & Performance", true, scale = scale.none)

//---------------------------------------------------------------------------------------------------------------------}
// Settings
//---------------------------------------------------------------------------------------------------------------------{
display = display.all - display.status_line

size = input.int(100, 'Chart Occupation %', minval = 0, maxval = 100, step = 5, display = display)

wGR = 'Profiting Wallets'
lGR = 'Losing Wallets'
bGR = 'Breaking Even Wallets'

//Profiting
papTip = 'The percentage of addresses that are profiting on their positions at current cryptocurrency price rates on all available markets.'
papDisplay = input.bool(true, 'Profiting Percentage', group = wGR, tooltip = papTip) 
papSmooth = input.int(7, 'Smoothing', minval = 1, maxval = 50, inline = 'PAP', group = wGR, display = display)
papColor = input.color(color.new(#3179F5, 50), '', inline = 'PAP', group = wGR)
papTrans = input.int(75, 'Transparency', minval = 0, maxval = 100, inline = 'PAP', group = wGR, display = display)
papMAT = input.string("None", 'Signal Line', options = ["SMA", "EMA", "RMA", "None"], inline = 'PAP1', group = wGR, display = display)
papMAL = input.int(13, '', minval = 1, maxval = 50, inline = 'PAP1', group = wGR, display = display)
papMAC = input.color(color.new(#bbd9fb, 50), '', inline = 'PAP1', group = wGR)

//Losing
lapTip = 'The percentage of addresses that are losing on their positions at current cryptocurrency price rates on all available markets.'
lapDisplay = input.bool(true, 'Losing Percentage', group = lGR, tooltip = lapTip) 
lapSmooth = input.int(7, 'Smoothing', minval = 1, maxval = 50, inline = 'LAP', group = lGR, display = display)
lapColor = input.color(color.new(#FF5D00, 50), '', inline = 'LAP', group = lGR)
lapTrans = input.int(75, 'Transparency', minval = 0, maxval = 100, inline = 'LAP', group = lGR, display = display)
lapMAT = input.string("None", 'Signal Line', options = ["SMA", "EMA", "RMA", "None"], inline = 'PAP2', group = lGR, display = display)
lapMAL = input.int(13, '', minval = 1, maxval = 50, inline = 'PAP2', group = lGR, display = display)
lapMAC = input.color(color.new(#fccbcd, 50), '', inline = 'PAP2', group = lGR)

//Breaking Even
bapTip = 'The percentage of addresses that are breaking even on their positions at current cryptocurrency price rates on all available markets.'
bapDisplay = input.bool(true, 'Breaking-Even Percentage', group = bGR, tooltip = bapTip) 
bapSmooth = input.int(7, 'Smoothing', minval = 1, maxval = 50, inline = 'BAP', group = bGR, display = display)
bapColor = input.color(color.new(color.gray, 50), '', inline = 'BAP', group = bGR)
bapTrans = input.int(95, 'Transparency', minval = 0, maxval = 100, inline = 'BAP', group = bGR, display = display)

//Meter
showMeter = input(true, 'Show Meter', group = 'Profitability Meter')
meterWidth  = input.int(3, 'Width', minval = 1, group = 'Profitability Meter')
offset = input.int(5, minval = 1, group = 'Profitability Meter')

//Performance
perfGR = 'Performance'
dtd = 'Day to Date'
wtd = 'Week to Date'
mtd = 'Month to Date'
qtd = 'Quarter to Date'
ytd = 'Year to Date'
perfDisplay = input.string("None", 'Performance', options = [dtd, wtd, mtd, qtd, ytd, "None"], inline = 'BAP', group = perfGR, display = display)
perfHeight = input.int(11, 'Height', minval = 1, inline = 'BAP', group = perfGR, display = display) / 10

//Dashboard
statGR = 'Dashboard'
block = input.bool(true, 'Block Profitability Stats', group = statGR)
perf = input.bool(true, 'Performance Stats', group = statGR)
perfText = input.string('Small', 'Dashboard Size', options=['Tiny', 'Small', 'Normal', 'Large'], group = statGR, display = display)
perfPos = input.string('Bottom Right', 'Dashboard Position', options = ['Top Right', 'Bottom Right', 'Bottom Left'], group = statGR, display = display)

//---------------------------------------------------------------------------------------------------------------------}
// Variables
//---------------------------------------------------------------------------------------------------------------------{
apSyminfo = syminfo.basecurrency != '' ? syminfo.basecurrency : str.replace(syminfo.ticker, str.match(syminfo.ticker, syminfo.currency),  "", 0)

var float q1 = na, var float q2 = na, var float q3 = na, var float q4 = na
var float yROR1 = na, var float yROR2 = na, var float yROR3 = na
var int yr1 = na, var int yr2 = na, var int yr3= na

upColor = #26a69a, dnColor = #ef5350, naColor = #3179f5
tablePos = perfPos == 'Bottom Left' ? position.bottom_left : perfPos == 'Top Right' ? position.top_right : position.bottom_right
textSize = perfText == 'Small' ? size.small : perfText == 'Normal' ? size.normal : perfText == 'Large' ? size.large : size.tiny

//---------------------------------------------------------------------------------------------------------------------}
// Functions/Methods
//---------------------------------------------------------------------------------------------------------------------{
f_getValue(tf) =>
    var value = 0.
    if timeframe.change(tf)
        value := close[1]
    value

f_getMA(_source, _length, _type) => 
    switch _type
        "SMA"  => ta.sma (_source, _length)
        "EMA"  => ta.ema (_source, _length)
        "RMA"  => ta.rma (_source, _length)

interpolate(value, rangeHigh) =>
    value * rangeHigh / 100

interpolate(value, valueHigh, valueLow, rangeHigh, rangeLow) =>
    rangeLow + (value - valueLow) * (rangeHigh - rangeLow) / (valueHigh - valueLow)

//---------------------------------------------------------------------------------------------------------------------}
// Calculations
//---------------------------------------------------------------------------------------------------------------------{
profitingPercent = request.security(apSyminfo + '_INOUTMONEYINPERCENTAGE', 'D', close, ignore_invalid_symbol = true) * 100
losingPercent = request.security(apSyminfo + '_INOUTMONEYOUTPERCENTAGE', 'D', close, ignore_invalid_symbol = true) * 100
breakingevenPercent = request.security(apSyminfo + '_INOUTMONEYBETWEENPERCENTAGE', 'D', close, ignore_invalid_symbol = true) * 100

profitingNumber = request.security(apSyminfo + '_INOUTMONEYIN', 'D', close, ignore_invalid_symbol = true)
losingNumber = request.security(apSyminfo + '_INOUTMONEYOUT', 'D', close, ignore_invalid_symbol = true)
breakingevenNumber = request.security(apSyminfo + '_INOUTMONEYBETWEEN', 'D', close, ignore_invalid_symbol = true)

profitingPercentPlot = ta.sma(interpolate(profitingPercent, size), papSmooth)
profitingPercentSignal = f_getMA(profitingPercentPlot, papMAL, papMAT)

losingPercentPlot = ta.sma(interpolate(losingPercent, size), lapSmooth)
losingPercentSignal = f_getMA(losingPercentPlot, lapMAL, lapMAT)

//Performances
dROR = (close / f_getValue('D')   - 1) * 100
wROR = (close / f_getValue('W')   - 1) * 100
mROR = (close / f_getValue('M')   - 1) * 100
qROR = (close / f_getValue('3M')  - 1) * 100
yROR = (close / f_getValue('12M') - 1) * 100

var float firstC = na
if barstate.isfirst
    firstC := close

if na(yROR)
    yROR := (close / firstC - 1) * 100

[ror, tf] = switch perfDisplay
    dtd => [dROR, 'D']
    wtd => [wROR, 'W']
    mtd => [mROR, 'M']
    qtd => [qROR, '3M']
    ytd => [yROR, '12M']

if month < 4
    q1 := qROR, q2 := na, q3 := na, q4 := na
else if month > 3 and month < 7
    q2 := qROR
else if month > 6 and month < 10
    q3 := qROR
else if month > 9
    q4 := qROR

if timeframe.change('12M')
    yROR3 := yROR2  , yr3   := yr2
    yROR2 := yROR1  , yr2   := yr1
    yROR1 := yROR[1], yr1   := year[1]

//---------------------------------------------------------------------------------------------------------------------}
//Dashboard
//---------------------------------------------------------------------------------------------------------------------{
if barstate.islast 
    var table oiT = table.new(tablePos, 4, 8, bgcolor = #1e222d, border_color = #373a46, border_width = 1, frame_color = #373a46, frame_width = 1)

    if syminfo.type == 'crypto' //and not chartTFinM
        if na(profitingPercent)
            table.cell(oiT, 0, 1, 'No fundamental data found\n for the ' + apSyminfo + ' symbol', text_size = textSize, text_color = color.white, text_halign = text.align_center)
            table.merge_cells(oiT, 0, 1, 3, 1)
        else
            if block
                table.cell(oiT, 0, 0, apSyminfo + ' ADDRESSES', text_size = textSize, text_color = color.white, text_halign = text.align_center)
                table.merge_cells(oiT, 0, 0, 3, 0)

                table.cell(oiT, 0, 1, 'Profiting', text_size = textSize, text_color = color.white, text_halign = text.align_center)
                table.cell(oiT, 1, 1, 'Losing', text_size = textSize, text_color = color.white, text_halign = text.align_center)
                table.cell(oiT, 2, 1, 'Breaking\nEven', text_size = textSize, text_color = color.white, text_halign = text.align_center)
                table.cell(oiT, 3, 1, 'Total', text_size = textSize, text_color = color.white, text_halign = text.align_center)

                table.cell(oiT, 0, 2, str.tostring(profitingPercent / 100, '#.##%'), text_size = textSize, text_color = color.white, text_halign = text.align_center, 
                           tooltip = 'The percentage of ' + apSyminfo + ' addresses that are profiting on their positions at current price')
                table.cell(oiT, 1, 2, str.tostring(losingPercent / 100, '#.##%'), text_size = textSize, text_color = color.white, text_halign = text.align_center, 
                           tooltip = 'The percentage of ' + apSyminfo + ' addresses that are losing money on their positions at current price')
                table.cell(oiT, 2, 2, str.tostring(breakingevenPercent / 100, '#.##%'), text_size = textSize, text_color = color.white, text_halign = text.align_center, 
                           tooltip = 'The percentage of ' + apSyminfo + ' addresses that are breaking even on their positions at current price')
                table.cell(oiT, 3, 2, '-', text_size = textSize, text_color = color.white, text_halign = text.align_center)

                table.cell(oiT, 0, 3, str.tostring(profitingNumber, format.volume), text_size = textSize, text_color = color.white, text_halign = text.align_center, 
                           tooltip = 'The number of ' + apSyminfo + ' addresses that are profiting on their positions at current price')
                table.cell(oiT, 1, 3, str.tostring(losingNumber, format.volume), text_size = textSize, text_color = color.white, text_halign = text.align_center, 
                           tooltip = 'The number of ' + apSyminfo + ' addresses that are losing money on their positions at current price')
                table.cell(oiT, 2, 3, str.tostring(breakingevenNumber, format.volume), text_size = textSize, text_color = color.white, text_halign = text.align_center, 
                           tooltip = 'The number of ' + apSyminfo + ' addresses that are breaking even on their positions at current price')
                table.cell(oiT, 3, 3, str.tostring(breakingevenNumber + losingNumber + profitingNumber, format.volume), text_size = textSize, text_color = color.white, text_halign = text.align_center, 
                           tooltip = 'The number of ' + apSyminfo + ' addresses')

        if perf
            table.cell(oiT, 0, 4, apSyminfo + ' PERFORMANCE', text_size = textSize, text_color = color.white, text_halign = text.align_center)
            table.merge_cells(oiT, 0, 4, 3, 4)

            if not timeframe.isweekly and not timeframe.ismonthly
                table.cell(oiT, 0, 5, str.tostring( dROR, '#.##')  + '%\nDTD', text_color = dROR > 0  ? upColor : dnColor,  text_size=textSize, tooltip = 'Day to Date')
            if not timeframe.ismonthly
                table.cell(oiT, 1, 5, str.tostring( wROR, '#.##')  + '%\nWTD' , text_color = wROR > 0  ? upColor : dnColor, text_size = textSize, tooltip = 'Week to Date')
            table.cell(oiT, 2, 5, str.tostring( mROR, '#.##')  + '%\nMTD' , text_color = mROR > 0  ? upColor : dnColor, text_size = textSize, tooltip = 'Month to Date')
            table.cell(oiT, 3, 5, str.tostring( yROR, '#.##')  + '%\nYTD' , text_color = yROR > 0  ? upColor : dnColor, text_size = textSize, tooltip = 'Year to Date')

            table.cell(oiT, 0, 6, str.tostring( q1, '#.##') + '%\nQ1', text_color = q1 > 0 ? upColor : dnColor, text_size = textSize, tooltip = '1st Quarter of ' + str.tostring(year))
            table.cell(oiT, 1, 6, na(q2) ? '-\nQ2' : str.tostring( q2, '#.##') + '%\nQ2', text_color = na(q2) ? naColor : q2 > 0 ? upColor : dnColor, 
                       text_size = textSize, tooltip = '2nd Quarter of ' + str.tostring(year))
            table.cell(oiT, 2, 6, na(q3) ? '-\nQ3' : str.tostring( q3, '#.##') + '%\nQ3', text_color = na(q3) ? naColor : q3 > 0 ? upColor : dnColor, 
                       text_size = textSize, tooltip = '3rd Quarter of ' + str.tostring(year))
            table.cell(oiT, 3, 6, na(q4) ? '-\nQ4' : str.tostring( q4, '#.##') + '%\nQ4', text_color = na(q4) ? naColor : q4 > 0 ? upColor : dnColor, 
                       text_size = textSize, tooltip = '4th Quarter of ' + str.tostring(year))

            table.cell(oiT, 3, 7, str.tostring(yROR , '#.##') + '%\n' + str.tostring(year), text_color = yROR  > 0 ? upColor : dnColor, text_size = textSize, tooltip = 'Year to Date')
            table.cell(oiT, 2, 7, na(yROR1) ? '-\n-' : str.tostring(yROR1, '#.##') + '%\n' + str.tostring(yr1) , text_color = na(yROR1) ? naColor : yROR1 > 0 ? upColor : dnColor, 
                       text_size = textSize, tooltip = na(yROR1) and na(yr1) ? '' : str.tostring(yr1) + ' Rate of Return')
            table.cell(oiT, 1, 7, na(yROR2) ? '-\n-' : str.tostring(yROR2, '#.##') + '%\n' + str.tostring(yr2) , text_color = na(yROR2) ? naColor : yROR2 > 0 ? upColor : dnColor, 
                       text_size = textSize, tooltip = na(yROR2) and na(yr2) ? '' : str.tostring(yr2) + ' Rate of Return')
            table.cell(oiT, 0, 7, na(yROR3) ? '-\n-' : str.tostring(yROR3, '#.##') + '%\n' + str.tostring(yr3) , text_color = na(yROR3) ? naColor : yROR3 > 0 ? upColor : dnColor, 
                       text_size = textSize, tooltip = na(yROR3) and na(yr3) ? '' : str.tostring(yr3) + ' Rate of Return')
    else    
        table.cell(oiT, 0, 0, (syminfo.type == 'crypto' ? 'Supported Timeframes : 4H or Higher' : 'Only Cryptocurrencies'), 
                       text_size = size.normal, text_color = color.white, text_halign = text.align_left)

//---------------------------------------------------------------------------------------------------------------------}
//Meter
//---------------------------------------------------------------------------------------------------------------------{
profiting_meter = line.new(na,na,na,na, color = papColor, width = meterWidth)
losing_meter    = line.new(na,na,na,na, color = lapColor, width = meterWidth)
breakeven_meter = line.new(na,na,na,na, color = bapColor, width = meterWidth)

n = bar_index
meter_val = 0.

//Display Meter
if barstate.islast and showMeter
    den = profitingPercentPlot + losingPercentPlot + breakingevenPercent
    meter_val += profitingPercentPlot / den * 100
    profiting_meter.set_xy1(n + offset, 0)
    profiting_meter.set_xy2(n + offset, meter_val)

    losing_meter.set_xy1(n + offset, meter_val)
    meter_val += losingPercentPlot / den * 100
    losing_meter.set_xy2(n + offset, meter_val)

    breakeven_meter.set_xy1(n + offset, meter_val)
    meter_val += breakingevenPercent / den * 100
    breakeven_meter.set_xy2(n + offset, meter_val)

//---------------------------------------------------------------------------------------------------------------------}
//Plots
//---------------------------------------------------------------------------------------------------------------------{
plot(0, color = color(na), editable = false, display = display)
plot(100 , color = color(na), editable = false, display = display)

//Winning
a = plot(papDisplay and size > 0 ? profitingPercentPlot : na, 'Profiting', papColor, display = display)
z = plot(papDisplay and papMAT != 'None' and size > 0 ? profitingPercentSignal : na, 'Profiting Signal', papMAC, display = display)
b = plot(0, color = color(na), editable = false, display = display)
fill(a, b, size, 0, top_color = color.new(papColor, papTrans), bottom_color = color.new(chart.bg_color, 80), title = "Profiting Fill")
fill(a, z, profitingPercentPlot > profitingPercentSignal ? color.new(papColor, 73) : color.new(papMAC, 73))

//Losing
c = plot(lapDisplay and size > 0 ? 100 - losingPercentPlot : na, 'Losing', lapColor, display = display)
y = plot(lapDisplay and lapMAT != 'None' and size > 0 ? 100 - losingPercentSignal : na, 'Losing Signal', lapMAC, display = display)
e = plot(100 , color = color(na), editable = false, display = display)
fill(c, e, 100, 100 - size, top_color = color.new(chart.bg_color, 80), bottom_color = color.new(lapColor, lapTrans), title = "Losing Fill")
fill(c, y, losingPercentPlot > losingPercentSignal ? color.new(lapColor, 73) : color.new(lapMAC, 73))

//Breaking Even
d = plot(bapDisplay and size > 0 ? 100 - ta.sma(interpolate(breakingevenPercent, size), bapSmooth) : na, 'Breaking Even', bapColor, display = display)
fill(d, e, color.new(bapColor, bapTrans))

//Performance
plot(perfDisplay != 'None' and size > 0 ? (ror * perfHeight) / 1000 * size : na, 'Period to Date RoR', ror > 0 ? color.new(upColor, 50) : color.new(dnColor, 50), 1, plot.style_columns, display = display)
bgcolor(perfDisplay != 'None' and size > 0 and timeframe.change(tf) ? color.new(color.gray, 93) : na, title = 'Period to Date Separator')

//---------------------------------------------------------------------------------------------------------------------}