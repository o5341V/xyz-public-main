// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © KioseffTrading

//@version=5
indicator("The Next Pivot (With History) [Mxwll]", overlay = true, max_labels_count = 500, max_polylines_count = 100, max_boxes_count = 500, max_lines_count = 500, calc_bars_count = 20000)

look = input.int(defval = 5000, title = "Bars Back To Search From Projection Point")
tf = input.timeframe(defval = "1D", title = "Timeframe Projection")
getInput = input.source(defval = close, title = "Series to Project")

typec         = input.string("Cosine Similarity", title = "Similarity Calculation", options = 
 ["Spearmen", "Pearson", "Euclidean (Absolute Difference)", "Cosine Similarity", "Mean Squared Error"], group = "Similarity Method"),

projCol = input.color(defval = color.white, title = "Projection Color")
on      = input.bool (defval = true, title = "Projected LinReg", inline = "lin")
stdev   = input.float(defval = 2, title = "Standard Deviation", minval = 0.1, step = 0.1)
lrcol   = input.color(defval = #6929F2, title = "Lin Reg color")

showZZ = input.bool(defval = true, title = "Show Zig Zag Projection")
zzCol  = input.color(defval = #14D990, title = "ZZ Color")

var int historical = na, var int hold = na

if timeframe.in_seconds(tf) <= timeframe.in_seconds(timeframe.period)
    
    tf := timeframe.from_seconds(timeframe.in_seconds(timeframe.period) * 10)

ph = timeframe.change(tf)


if na(historical) and not na(hold)
    if timeframe.change(tf)
        historical := bar_index - hold - 1

if na(hold)
    if timeframe.change(tf)
        hold := bar_index 


import TradingView/ZigZag/6 as ZigZagLib 
import HeWhoMustNotBeNamed/arraymethods/1
import RicardoSantos/MathOperator/2

var ret = array.new_float(),  result = matrix.new<float>(2, 1, -1e8), float [] recRet = na

method effSlice(array<float> id, iteration) => 

    id.slice(iteration, iteration + 1 + historical)

method update (matrix <float> id, float id2, i) => 

    if id2.over_equal(id.get(0, 0))

        id.set(0, 0, id2)
        id.set(1, 0, i)

method rankEstimate(array <float> id, iteration) => 

    math.round((id.percentrank(iteration) / 100) * (historical - 1) + 1)


method spearmen (matrix <float> id) =>

    denominator = (historical * (math.pow(historical, 2) - 1))
    estimate    = array.new_int()

    for i = 0 to recRet.size() - 1
        estimate.push(recRet.rankEstimate(i))

    for i = 0 to ret.size() - historical * 3
            
        slice = ret.effSlice(i)
        d2    = array.new_float(historical)

        for x = 0 to historical - 1

            s   = estimate.get(x)
            s1  = slice.rankEstimate(x)
            fin = math.pow(s - s1, 2)
            d2.set(x, fin)
        
        r  = 1 - (6 * d2.sum()) / denominator

        id.update(i, r)

method pearson (matrix <float> id) => 
        
    stdevA = recRet.stdev() 

    for i = 0 to ret.size() - historical * 3

        slice = ret.effSlice(i)
        p     = slice.covariance(recRet) / (stdevA * slice.stdev())

        id.update(p, i)

method euc (matrix <float> id) => 

    for i = 0 to ret.size() - historical * 3
                
        slice = ret.effSlice(i)
        euc   = array.new_float(historical)
             
        for x = 0 to historical - 1

            euc.set(x, math.pow(recRet.get(x) - slice.get(x), 2))

        inv = 1 / (1 + math.sqrt(euc.sum()))

        id.update(inv, i)


method cosine(matrix <float> id) => 
    
    nA = 0.

    for i = 0 to recRet.size() - 1
        nA += math.pow(recRet.get(i), 2)

    nA := math.sqrt(nA)

    for i = 0 to ret.size() - historical * 3
            
        slice = ret.effSlice(i)
        prod  = 0., nB = 0.

        for x = 0 to historical - 1

            prod += recRet.get(x) * slice.get(x)
            nB   += math.pow(slice.get(x), 2)
        
        cos = prod / (nA * math.sqrt(nB))
        id.update(cos, i)

    
method mse (matrix <float> id) => 
    
    for i = 0 to ret.size() - historical * 3
            
        slice = ret.effSlice(i)
        mse   = array.new_float(historical)

        for x = 0 to historical - 1
            mse.set(x, math.pow(slice.get(x) - recRet.get(x), 2))

        mseC = 1 / (1 + mse.sum() / historical)

        id.update(mseC, i)


var timeArr  = array.new_int  (),

timeArr .push(time),
ret     .push(getInput) 


method float (int id) => float(id) 

atr = ta.atr(14)

if ret.size() > math.max(look, historical * 5) 

    ret.shift()



if timeframe.change(tf)

    if bar_index >= last_bar_index / 2

        lineAll = line.all

        recRet := ret.slice(ret.size() - 1 - historical, ret.size())

        switch typec

            "Spearmen"                          => result.spearmen()
            "Pearson"                           => result.pearson()
            "Euclidean (Absolute Difference)"   => result.euc()
            "Cosine Similarity"                 => result.cosine()
            "Mean Squared Error"                => result.mse()

        startarr                                = int(result.get(1, 0))
        
        if startarr != -1e8

            endarr                                = startarr + historical
            float [] lineData                     = array.new_float()

            
            for i = endarr - historical to endarr
                lineData.push(ret.get(i) / ret.get(math.max(0, i - 1)) - 1)


            lines = array.new<chart.point>()
            zz    = matrix.new<float>(2)

            quickInput = switch getInput == close 
                true => open 
                =>      getInput

            lines.push(chart.point.from_time(time, quickInput))
            lines.push(chart.point.from_time(time(timeframe.period, -1), quickInput * (1 + lineData.first())))
            zz   .add_col(zz.columns(), array.from(time, quickInput))

            seriesY = getInput * (1 + lineData.first())
            seriesX = -1

            seriesYArr = array.from(getInput, seriesY)

            seriesYtrack = seriesY, dir = 0

            for i = 1 to lineData.size() - 2

                seriesY *= (1 + lineData.get(i))
                seriesX -= 1
                seriesYArr.push(seriesY)

                if seriesY <= seriesYtrack - atr 
                    if dir == 0 or dir == 1
                        zz.add_col(zz.columns(), array.from(time(timeframe.period, seriesX), seriesY))
                        dir := -1 
                        seriesYtrack := seriesY

                else if seriesY >= seriesYtrack + atr 
                    if dir == 0 or dir == -1
                        zz.add_col(zz.columns(), array.from(time(timeframe.period, seriesX), seriesY))
                        dir := 1 
                        seriesYtrack := seriesY

                getCols = zz.columns() - 1

                if dir == -1  
                    
                    zz.set(1, getCols, math.min(zz.get(1, getCols), seriesY))

                    if zz.get(1, getCols) == seriesY 

                        zz.set(0, getCols, time(timeframe.period, seriesX))
                        seriesYtrack := seriesY
                    
                else if dir == 1 
                    
                    zz.set(1, getCols, math.max(zz.get(1, getCols), seriesY))

                    if zz.get(1, getCols) == seriesY 

                        zz.set(0, getCols, time(timeframe.period, seriesX))
                        seriesYtrack := seriesY


                lines.push(chart.point.from_time(time(timeframe.period, seriesX), seriesY))

            polyline.new(lines, line_style = line.style_dotted, line_color = projCol, xloc = xloc.bar_time)

            if showZZ 

                zzPoints = array.new<chart.point>()

                if zz.columns() > 1 
                    for i = 0 to zz.columns() - 1
                        zzPoints.push(chart.point.from_time(int(zz.get(0, i)), zz.get(1, i)))

                    polyline.new(zzPoints, line_style = line.style_solid, line_color = zzCol, xloc = xloc.bar_time, line_width = 2)


            if on 

                linReg = matrix.new<float>(4, seriesYArr.size() - 1)

                for i = 0 to seriesYArr.size() - 2

                    linReg.set(0, i, i + 1), linReg.set(1, i, seriesYArr.get(i))

                b = linReg.row(0)

                for i = 0 to lineData.size() - 2

                    linReg.set(2, i, math.pow(b.get(i) - b.avg(), 2))
                    linReg.set(3, i, (b.get(i) - b.avg()) * (linReg.row(1).get(i) - linReg.row(1).avg()))

                bx = linReg.row(3).sum() / linReg.row(2).sum() 
                mx = linReg.row(1).avg() - (bx * b.avg())

                upper = line.new(bar_index, (bx + mx) + linReg.row(1).stdev() * stdev, bar_index + linReg.row(1).size(), 
                                         (bx * linReg.row(1).size() + mx) + linReg.row(1).stdev() * stdev, 
                                         color = #00000000
                                         )

                lower = line.new(bar_index, (bx + mx) - linReg.row(1).stdev() * stdev, bar_index + linReg.row(1).size(), 
                                         (bx * linReg.row(1).size() + mx) - linReg.row(1).stdev() * stdev, 
                                         color = #00000000
                                         )

                linefill.new(upper, lower, color.new(lrcol, 90))


