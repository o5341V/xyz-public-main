// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © MUQWISHI

//@version=5
indicator("Divergence for Many Indicators v4 - Screener", "DMI-v4 Screener", overlay = true, max_bars_back = 200)

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                   INPUT                                    |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
enum modOptions
    a = "Divergence Number"
    b = "Full Name"
    c = "First Letter"

enum srcOptions
    a = "Close"
    b = "High/Low"

enum divOptions
    a = "Regular"
    b = "Hidden"
    c = "Regular/Hidden"
       
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[1] Table
var G1 = "Table Setting" 
// Table Location 
tblPos = input.string(  "Top Right"    , "Table Location       ", 
         ["Top Right" , "Middle Right" , "Bottom Right"     , 
          "Top Center", "Middle Center", "Bottom Center"    , 
          "Top Left"  , "Middle Left"  , "Bottom Left" ]    , group = G1, inline = "1", display = display.none)

// Table Size
tblSiz = input.string("Small", "Table Size                 ", 
         ["Auto", "Huge", "Large", "Normal", "Small", "Tiny"], group = G1, inline = "2", display = display.none)

// Timezone
timzon = input.string("GMT-4", "Timezone                  ",   group = G1, inline = "3", display = display.none)

// Table Colors
tBgCol = input.color(#5c698c, "  Title",   group = G1, inline = "1")
cBgCol = input.color(#778899, "    Cell",  group = G1, inline = "2")
txtCol = input.color(#ffffff, "   Text",   group = G1, inline = "3")

// Sorting 
sort   = input.string("Signal", "Sorting                       ", ["None", "Signal"], 
                     group = G1, inline = "4", display = display.none)


notCon = input.color(#e39e65, "Signal is Not Confirmed           ", group = G1, inline = "5", 
         tooltip = "The signal has just appeared, but the bar is not yet confirmed.")
fshCon = input.color(#74e365, "Signal is Freshly Confirmed   ",  group = G1, inline = "6", 
         tooltip = "The signal is confirmed, and appeared from 1 or 2 bars ago.")

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[2] Divergence for Many Indicators v4
var G2 = "Divergence for Many Indicators v4" 

length = input.int (5, "Pivot Period", 1, 50,                   group = G2)
source = input.enum(srcOptions.a, "Source for Pivot Points",    group = G2)
divTyp = input.enum(divOptions.a, "Divergence Type",            group = G2)
outMod = input.enum(modOptions.c, "Show Indicator Names",       group = G2, display = display.none)
minLim = input.int (1,"Minimum Number of Divergence", 1, 10,    group = G2, display = display.none)
maxPiv = input.int (10, "Maximum Pivot Points to Check", 1, 20, group = G2, display = display.none)
maxBar = input.int (100, "Maximum Bars to Check", 30, 200,      group = G2, display = display.none)
nConfm = input.bool(false, "Don't Wait for Confirmation",       group = G2)

macdChk  = input.bool(true, "MACD",                             group = G2)
histChk  = input.bool(true, "MACD Histogram",                   group = G2)
rsiChk   = input.bool(true, "RSI",                              group = G2)
stochChk = input.bool(true, "Stochastic",                       group = G2)
cciChk   = input.bool(true, "CCI",                              group = G2)
momChk   = input.bool(true, "Momentum",                         group = G2)
obvChk   = input.bool(true, "OBV",                              group = G2)
vwmdChk  = input.bool(true, "volume Weighted MACD",             group = G2)
cmfChk   = input.bool(true, "Chaikin Money Flow",               group = G2)
mfiChk   = input.bool(true, "Money Flow Index",                 group = G2)

pRgCol = input.color(#e3c565, "Positive Regular Divergence",  group = G2)
nRgCol = input.color(#311b92, "Negative Regular Divergence",  group = G2)
pHdCol = input.color(#00e676, "Positive Hidden Divergence",   group = G2)
nHdCol = input.color(#ff5252, "Negative Hidden Divergence",   group = G2)

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                  SYMBOLS                                   |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// Symbols Checkmark
c01 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s01")
c02 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s02")
c03 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s03")
c04 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s04")
c05 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s05")
c06 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s06")
c07 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s07")
c08 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s08")
c09 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s09")
c10 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s10")
c11 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s11")
c12 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s12")
c13 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s13")
c14 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s14")
c15 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s15")
c16 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s16")
c17 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s17")
c18 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s18")
c19 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s19")
c20 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s20")
c21 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s21")
c22 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s22")
c23 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s23")
c24 = input.bool(true,  "", group = "Symbols", display = display.none, inline = "s24")

// Symbol Input
s01 = input.symbol("BTCUSDT",   "", group = "Symbols", display = display.none, inline = "s01")
s02 = input.symbol("ETHUSDT",   "", group = "Symbols", display = display.none, inline = "s02")
s03 = input.symbol("BNBUSDT",   "", group = "Symbols", display = display.none, inline = "s03")
s04 = input.symbol("XRPUSDT",   "", group = "Symbols", display = display.none, inline = "s04")
s05 = input.symbol("SOLUSDT",   "", group = "Symbols", display = display.none, inline = "s05")
s06 = input.symbol("ADAUSDT",   "", group = "Symbols", display = display.none, inline = "s06")
s07 = input.symbol("DOGEUSDT",  "", group = "Symbols", display = display.none, inline = "s07")
s08 = input.symbol("MATICUSDT", "", group = "Symbols", display = display.none, inline = "s08")
s09 = input.symbol("DOTUSDT",   "", group = "Symbols", display = display.none, inline = "s09")
s10 = input.symbol("LTCUSDT",   "", group = "Symbols", display = display.none, inline = "s10")
s11 = input.symbol("AVAXUSDT",  "", group = "Symbols", display = display.none, inline = "s11")
s12 = input.symbol("LINKUSDT",  "", group = "Symbols", display = display.none, inline = "s12")
s13 = input.symbol("SHIBUSDT",  "", group = "Symbols", display = display.none, inline = "s13")
s14 = input.symbol("ATOMUSDT",  "", group = "Symbols", display = display.none, inline = "s14")
s15 = input.symbol("XLMUSDT",   "", group = "Symbols", display = display.none, inline = "s15")
s16 = input.symbol("UNIUSDT",   "", group = "Symbols", display = display.none, inline = "s16")
s17 = input.symbol("TRXUSDT",   "", group = "Symbols", display = display.none, inline = "s17")
s18 = input.symbol("AAVEUSDT",  "", group = "Symbols", display = display.none, inline = "s18")
s19 = input.symbol("NEARUSDT",  "", group = "Symbols", display = display.none, inline = "s19")
s20 = input.symbol("FTMUSDT",   "", group = "Symbols", display = display.none, inline = "s20")
s21 = input.symbol("SANDUSDT",  "", group = "Symbols", display = display.none, inline = "s21")
s22 = input.symbol("MANAUSDT",  "", group = "Symbols", display = display.none, inline = "s22")
s23 = input.symbol("EGLDUSDT",  "", group = "Symbols", display = display.none, inline = "s23")
s24 = input.symbol("ICPUSDT",   "", group = "Symbols", display = display.none, inline = "s24")

// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                CALCULATION                                 |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// Credit :-
// The calculation section adapted from the "Divergence for Many Indicators v4"
// script, originally created by LonesomeTheBlue. Full credit to his work.
// https://www.tradingview.com/script/n8AGnIZd-Divergence-for-Many-Indicators-v4/
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

// ++++++++++ Positive Divergence
pDivergence(ind, cond, plLoc, plVal)=>
    signal = false
    src = source == srcOptions.a ? close : low
    off = nConfm ? 0 : 1 // don't check last candle

    // if indicators higher than last value and close price is higher than las close 
    if nConfm or ind > ind[1] or close > close[1]
        for x = 0 to maxPiv - 1
            loc = plLoc.get(x)
            val = plVal.get(x)
            len = bar_index - loc + length

            if loc == 0 or len > maxBar
                break

            terminal = cond == "Reg" ? ind[off] > ind[len] and src[off] < nz(val) :
                                       ind[off] < ind[len] and src[off] > nz(val)
            
            if len > 5 and terminal
                m1 = (ind[off] - ind[len]) / (len - off)
                b1 = (ind[off] - m1)
                m2 = (close[off] - close[len]) / (len - off)
                b2 = (close[off] - m2)
                arrived = true
                for y = 1 + off to len - 1
                    if ind[y] < b1 or nz(close[y]) < b2
                        arrived := false
                        break
                    b1 := b1 - m1
                    b2 := b2 - m2
                
                if arrived
                    signal := true
                    break
    signal

// ++++++++++ Negative Divergence
nDivergence(ind, cond, phLoc, phVal) =>
    signal = false
    src = source == srcOptions.a ? close : high
    off = nConfm ? 0 : 1 // don't check last candle

    // if indicators higher than last value and close price is higher than las close 
    if nConfm or ind < ind[1] or close < close[1]
        for x = 0 to maxPiv - 1
            loc = phLoc.get(x)
            val = phVal.get(x)
            len = bar_index - loc + length

            if loc == 0 or len > maxBar
                break

            terminal = cond == "Reg" ? ind[off] < ind[len] and src[off] > nz(val) :
                                       ind[off] > ind[len] and src[off] < nz(val)
            
            if len > 5 and terminal
                m1 = (ind[off] - ind[len]) / (len - off)
                b1 = (ind[off] - m1)
                m2 = (close[off] - nz(close[len])) / (len - off)
                b2 = (close[off] - m2)

                arrived = true
                for y = 1 + off to len - 1
                    if ind[y] > b1 or nz(close[y]) > b2
                        arrived := false
                        break
                    b1 := b1 - m1
                    b2 := b2 - m2
                
                if arrived
                    signal := true
                    break
    signal
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-


// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                  SCREENER                                  |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// ++++++++++ Get Symbol Name
tickerid(s) => 
    array.get(str.split(s, ":"), 1)


// ++++++++++ Get Table Title
var fTitle = array.new<string>(na) // Full Title
var sTitle = array.new<string>(na) // Short title
title(chk, t1, t2) => 
    if chk 
        fTitle.push(t1), sTitle.push(t2)

if barstate.isfirst
    title(true, "Symbol", "Symbol"),
    title(true,  "Price",  "Price")

    if outMod == modOptions.a
        title(true, "Divs", "Divs")
    else 
        title(macdChk , "MACD"  , "M"), title(histChk , "HIST"  , "H"), 
        title(rsiChk  , "RSI"   , "R"), title(stochChk, "STOCH" , "S"),
        title(cciChk  , "CCI"   , "C"), title(momChk  , "MOM"   , "M"), 
        title(obvChk  , "OBV"   , "O"), title(vwmdChk , "VWMACD", "V"),
        title(cmfChk  , "CMF"   , "C"), title(mfiChk  , "MFI"   , "M"), 
    
    title(true, "Signal Time",  "Signal Time")   


// ++++++++++ Get The Descending of a Signal
describe(ind, val) =>
    (val == 0  ? "" : (val > 0 ? "Positive " : "Negative ") + 
     (math.abs(val) == 1 ? "Regular " : "Hidden ") + (ind + " Divergence"))


// ++++++++++ Checking The Type of Divergence
var isReg = divTyp == divOptions.a or divTyp == divOptions.c
var isHid = divTyp == divOptions.b or divTyp == divOptions.c
divSignal(ind, plLoc, plVal, phLoc, phVal) => 
    signal = 0
    if  isReg 
        // Positive Regular
        pDiv    = pDivergence(ind, "Reg", plLoc, plVal)
        signal := signal == 0 ? (pDiv ?  1 : 0) : signal

        // Negative Regular
        nDiv    = nDivergence(ind, "Reg", phLoc, phVal)
        signal := signal == 0 ? (nDiv ? -1 : 0) : signal

    if isHid
        // Positive Hidden
        pDiv    = pDivergence(ind, "Hid", plLoc, plVal)
        signal := signal == 0 ? (pDiv ?  2 : 0) : signal
        
        // Negative Hidden
        nDiv    = nDivergence(ind, "Hid", phLoc, phVal)
        signal := signal == 0 ? (nDiv ? -2 : 0) : signal

    signal 


// ++++++++++ Main Request Security Function 
main(flg) =>
    var float prcSig = na, var int   timSig   = na, var float numInd  = na, numSingal = 0
    var float rsiOut = na, var float macdOut  = na, var float histOut = na, var float momOut = na, var float cciOut = na, 
    var float obvOut = na, var float stochOut = na, var float vmwdOut = na, var float cmfOut = na, var float mfiOut = na

    if flg 
        // ++++++++++++ Pivots 
        // High Pivot
        ph = ta.pivothigh((source == srcOptions.a ? close : high), length, length)
        var phLoc = array.new_int  (20, 0)
        var phVal = array.new_float(20, 0)
        if not na(ph)
            phLoc.unshift(bar_index), phVal.unshift(ph)
            if phLoc.size() > 20
                phLoc.pop(), phVal.pop()

        // Low Pivot
        var plLoc = array.new_int  (20, 0)
        var plVal = array.new_float(20, 0)
        pl  = ta.pivotlow ((source == srcOptions.a ? close :  low), length, length)
        if not na(pl)
            plLoc.unshift(bar_index), plVal.unshift(pl)
            if plLoc.size() > 20
                plLoc.pop(), plVal.pop()


        // ++++++++++++ Indicators
        // RSI
        rsiSig = 0
        if rsiChk
            rsi        = ta.rsi(close, 14)
            rsiSig    := divSignal(rsi, plLoc, plVal, phLoc, phVal)
            numSingal := rsiSig != 0 ? 1 + numSingal : numSingal

        // MACD
        [macd, macdS, hist] = ta.macd(close, 12, 26, 9)
        macdSig = 0
        if macdChk
            macdSig   := divSignal(macd, plLoc, plVal, phLoc, phVal)
            numSingal := macdSig != 0 ? 1 + numSingal : numSingal

        histSig = 0
        if histChk
            histSig   := divSignal(hist, plLoc, plVal, phLoc, phVal)
            numSingal := histSig != 0 ? 1 + numSingal : numSingal

        // Momentum
        momSig = 0
        if momChk
            mom        = ta.mom(close, 10)
            momSig    := divSignal(mom, plLoc, plVal, phLoc, phVal)
            numSingal := momSig != 0 ? 1 + numSingal : numSingal

        // CCI
        cciSig = 0
        if cciChk
            cci        = ta.cci(close, 10)
            cciSig    := divSignal(cci, plLoc, plVal, phLoc, phVal)
            numSingal := cciSig != 0 ? 1 + numSingal : numSingal

        // OBV
        obvSig = 0
        if obvChk 
            obvSig    := divSignal(ta.obv, plLoc, plVal, phLoc, phVal)
            numSingal := obvSig != 0 ? 1 + numSingal : numSingal

        // Stochastic
        stochSig = 0
        if stochChk
            stoch     = ta.sma(ta.stoch(close, high, low, 14), 3)
            stochSig  := divSignal(stoch, plLoc, plVal, phLoc, phVal)
            numSingal := stochSig != 0 ? 1 + numSingal : numSingal

        // Volume Weighted MACD
        vmwdSig = 0
        if vwmdChk
            maFast     = ta.vwma(close, 12), maSlow = ta.vwma(close, 26), 
            vmwdSig   := divSignal(maFast - maSlow, plLoc, plVal, phLoc, phVal)
            numSingal := vmwdSig != 0 ? 1 + numSingal : numSingal

        // Chaikin money flow
        cmfSig = 0
        if cmfChk
            cmfv       = (((close-low) - (high-close)) / (high - low)) * volume, 
            cmf        = ta.sma(cmfv, 21) / ta.sma(volume, 21)
            cmfSig    := divSignal(cmf, plLoc, plVal, phLoc, phVal)
            numSingal := cmfSig != 0 ? 1 + numSingal : numSingal

        // Money Flow Index
        mfiSig = 0
        if mfiChk
            mfi        = ta.mfi(close, 14)
            mfiSig    := divSignal(mfi, plLoc, plVal, phLoc, phVal)
            numSingal := mfiSig != 0 ? 1 + numSingal : numSingal


        // ++++++++++++ Collect Signals
        if numSingal >= minLim
            prcSig := math.round_to_mintick(close), timSig  := time,    numInd := numSingal
            rsiOut := rsiSig, macdOut  := macdSig,  histOut := histSig, momOut := momSig, cciOut := cciSig, 
            obvOut := obvSig, stochOut := stochSig, vmwdOut := vmwdSig, cmfOut := cmfSig, mfiOut := mfiSig

    [prcSig, timSig, numInd, 
     rsiOut, macdOut, histOut, momOut, cciOut, obvOut, stochOut, vmwdOut, cmfOut, mfiOut]


// ++++++++++++ Set Up Matrix
// Create Matrices
data = matrix.new<float> (0, outMod == modOptions.a ? 4 : fTitle.size(), na)
info = matrix.new<string>(0, 3, na)
mssg = array.new<string>(na)

// Fill Matrices with New Row
mtxFun(numSym, sym, items, description) =>
    data.add_row(data.rows(), items)
    info.add_row(info.rows(), array.from(numSym, sym, description))

// Collect All Signal in an Array
dataRow(arItem, arDspt, ind, val, k) =>
    if outMod == modOptions.a ? k <= 0 : k >= 0
        indx = fTitle.indexof(ind)
        if indx > -1
            arItem.set(indx, val)

    // Add The Information 
    if outMod == modOptions.a and k == 1 and val != 0
        tooltip = describe(ind, val) 
        if arDspt.size() > 0
            txt = arDspt.get(0)
            arDspt.set(0, txt + (txt != "" ? "\n" : "") + tooltip)


// ++++++++++++ Set Up Matrix
//.Screener Function to Imprort Data
screener(numSym, sym, flg) =>
    sy = ticker.modify(sym, syminfo.session)
    [prc, tim, numInd, 
     rsi, macd, hist, mom, cci, obv, stoch, vmwd, cmf, mfi] = request.security(sy, "", main(flg))

    if barstate.islast
        if flg and not na(prc)
            var items = array.new<float> (outMod == modOptions.a ? 4 : fTitle.size(), 0)
            descrip   = array.new<string>(1, "")
            dataRow(items, descrip,  "Symbol"     , numSym,  0)
            dataRow(items, descrip,  "Signal Time",    tim,  0),  
            dataRow(items, descrip,  "Price"      ,    prc,  0), 
            dataRow(items, descrip,  "Divs"       , numInd, -1)

            dataRow(items, descrip,  "MACD"  , macd , 1), dataRow(items, descrip,  "HIST"  , hist , 1), 
            dataRow(items, descrip,  "RSI"   , rsi  , 1), dataRow(items, descrip,  "STOCH" , stoch, 1),
            dataRow(items, descrip,  "CCI"   , cci  , 1), dataRow(items, descrip,  "MOM"   , mom  , 1), 
            dataRow(items, descrip,  "OBV"   , obv  , 1), dataRow(items, descrip,  "VWMACD", vmwd , 1), 
            dataRow(items, descrip,  "CMF"   , cmf  , 1), dataRow(items, descrip,  "MFI"   , mfi  , 1), 
        
            if items.size() > 0
                security = tickerid(sym)
                mtxFun(str.tostring(numSym), security, items, descrip.get(0))

                mssg.push(security + " Has " + str.tostring(numInd) + (numInd == 1 ? " Divergence" : " Divergences"))

// Call for Securities
screener(01, s01, c01),  screener(02, s02, c02),  screener(03, s03, c03),  screener(04, s04, c04),  
screener(05, s05, c05),  screener(06, s06, c06),  screener(07, s07, c07),  screener(08, s08, c08),  
screener(09, s09, c09),  screener(10, s10, c10),  screener(11, s11, c11),  screener(12, s12, c12),
screener(13, s13, c13),  screener(14, s14, c14),  screener(15, s15, c15),  screener(16, s16, c16),  
screener(17, s17, c17),  screener(18, s18, c18),  screener(19, s19, c19),  screener(20, s20, c20),  
screener(21, s21, c21),  screener(22, s22, c22),  screener(23, s23, c23),  screener(24, s24, c24),


// Alert 
if mssg.size() > 0
    message = "" 
    for i = 0 to mssg.size() - 1
        message += ((i == 0 ? "" : "\n") + mssg.get(i))
    
    if message != ""
        alert(message, alert.freq_once_per_bar_close)

// Sorting table
if data.rows() > 0
    if sort == "Signal"
        data.sort(data.columns() - 1, order.descending)


// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// |                                   TABLE                                    |
// |++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++|
// ++++++++++++ Get Tbale Location & Size
locNsze(x) => 
    y   = str.split(str.lower(x), " ")
    out = ""
    for i = 0 to y.size() - 1
        out := out + y.get(i)
        if i != y.size() - 1
            out := out + "_"
    out


// ++++++++++++ Get Time Format 
timForm(x) =>
    na(x) ? "NaN" :
     (timeframe.in_seconds("") < timeframe.in_seconds("D")) ? 
     (timeframe.in_seconds("") < timeframe.in_seconds("1")) ? 
         str.format_time(x, "HH:mm:ss  MM-dd-yyyy", timzon) : 
         str.format_time(x, "HH:mm  MM-dd-yyyy",    timzon) :
         str.format_time(x, "MM-dd-yyyy",           timzon)


// ++++++++++++ Create Table
var table tbl = na 

// Cell Functions
cell(nCol, nRow, txt, color) => 
    tbl.cell(nCol, nRow, txt, 0, 0, txtCol, bgcolor = color, text_size = locNsze(tblSiz))

divNumCol(x)=>
    str.contains(x, "Positive Regular") ? pRgCol : str.contains(x, "Negative Regular") ? nRgCol :
     str.contains(x, "Positive Hidden") ? pHdCol : str.contains(x,  "Negative Hidden") ? nHdCol : 
     cBgCol

icon(nCol, nRow, val) =>
    bgCl = val == 1 ? pRgCol  : val == -1 ? nRgCol  :
           val == 2 ? pHdCol  : val == -2 ? nHdCol  : cBgCol

    tbl.cell(nCol, nRow, "" , 0, 0, bgcolor = bgCl, text_size = locNsze(tblSiz))

    // Tooltip
    tooltip = describe(fTitle.get(nCol), val)
    tbl.cell_set_tooltip(nCol, nRow, tooltip)


// ++++++++++++ Draw Table
if barstate.islast
    table.delete(tbl)
    col  = outMod == modOptions.a ? 4 : fTitle.size()
    row  =  data.rows() + 1 
    tbl := table.new(locNsze(tblPos), col, row, na, #000000, 1, #000000, 1)

    y = 0
    // Titles
    if fTitle.size() > 0
        for i = 0 to fTitle.size() - 1
            if outMod == modOptions.b
                cell(i, y, fTitle.get(i), tBgCol)
            else
                cell(i, y, sTitle.get(i), tBgCol)
                tbl.cell_set_tooltip(i, y, fTitle.get(i))
        y += 1

    if data.rows() > 0
        z = y
        for i = 0 to data.columns() - 1
            y := z

            for j = 0 to data.rows() - 1
                // Symbols 
                if i == 0
                    indx = info.col(0).indexof(str.tostring(data.get(j, 0)))
                    if indx >= 0
                        cell(i, y, info.get(indx, 1), tBgCol) 

                // Price
                else if i == 1 
                    cell(i, y, str.tostring(data.get(j, i), "0.00##########"), cBgCol) 

                // Signal Time
                else if i == data.columns() - 1
                    timSig = int(data.get(j, i))
                    bgColr = timSig >= time ? notCon : timSig <= time[3] ? cBgCol : fshCon
                    cell(i, y, timForm(timSig), bgColr)

                    // Update Symbol Cell Colors 
                    tbl.cell_set_bgcolor(0, y,  bgColr)
                    tbl.cell_set_bgcolor(1, y,  bgColr)

                else 
                    // Number of Signals
                    if outMod == modOptions.a
                        indx = info.col(0).indexof(str.tostring(data.get(j, 0)))
                        txt  = info.get(indx, 2)
                        cell(i, y, str.tostring(data.get(j, i)), divNumCol(txt))
                        tbl.cell_set_tooltip(i, y, txt)

                    // Indicators Signals 
                    else 
                        icon(i, y, data.get(j, i))
                y += 1