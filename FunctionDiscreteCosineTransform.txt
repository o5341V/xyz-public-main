// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © RicardoSantos

//@version=5

// @description Discrete Cosine Transform (DCT)
// The Discrete Cosine Transform (DCT) is a mathematical algorithm that converts a series of samples of a signal, typically in the time domain, into another domain called the frequency or spectral domain. It's commonly used for data compression and image/video coding applications such as JPEG and MPEG standards.
// The DCT works by multiplying the input sequence with specific cosine functions that are pre-defined and then summing up these products to obtain a new series of values, which represent the frequency components of the original signal. The main advantage of the DCT over other transforms like Fourier Transform is its ability to handle non-stationary signals (i.e., signals with varying statistical properties) more effectively due to its localized basis functions.
// In simple terms, the DCT can be thought of as a way to break down an image or video into different frequency components and then compress them without losing too much information. This compression technique is essential for efficient transmission and storage of digital media files over the internet or on devices with limited memory capacity.
// ~Mixtral4x7b
// ___
// Reference:
// https://lcamtuf.substack.com/p/not-so-fast-mr-fourier
library("FunctionDiscreteCosineTransform")

// @function Discrete Cosine Transform.
// @param	data	Data source.
// @param	len		Length of the sampling window.
// @returns List with frequency domain transformed information.
export dct (float[] data, int len) =>
	float[] _out_buffer = array.new<float>(len, float(na))
	for _i = 0 to len - 1 // bin
    	float _sum = 0.0
    	for _j = 0 to len - 1 // s_no
    		_sum += data.get(_j) * math.cos(math.pi * _i * (_j + 0.5) / len)
		_out_buffer.set(_i, _sum)
	_out_buffer

// @function Discrete Cosine Transform.
// @param	data	Data source.
// @param	len		Length of the sampling window.
// @returns List with frequency domain transformed information.
export dct (float data, int len) =>
	float[] _out_buffer = array.new<float>(len, float(na))
	for _i = 0 to len - 1 // bin
    	float _sum = 0.0
    	for _j = 0 to len - 1 // s_no
    		_sum += data[_j] * math.cos(math.pi * _i * (_j + 0.5) / len)
		_out_buffer.set(_i, _sum)
	_out_buffer

// @function Inverse Discrete Cosine Transform.
// @param	data	Data source.
// @param	len		Length of the sampling window.
// @returns List with time domain transformed information.
export idct (float[] data, int len) =>
	float[] _out_buffer = array.new<float>(len, float(na))
	for _j = 0 to len - 1 // s_no
		float _sum = 0.0
		for _i = 0 to len - 1 // bin
			_sum += data.get(_i) * math.cos(math.pi * (_j + 0.5) * _i / len) * (1.0 + _i % 2)
    	_out_buffer.set(_j, _sum / len)
	_out_buffer

// @function Inverse Discrete Cosine Transform.
// @param	data	Data source.
// @param	len		Length of the sampling window.
// @returns List with time domain transformed information.
export idct (float data, int len) =>
	float[] _out_buffer = array.new<float>(len, float(na))
	for _j = 0 to len - 1 // s_no
		float _sum = 0.0
		for _i = 0 to len - 1 // bin
			_sum += data[_i] * math.cos(math.pi * (_j + 0.5) * _i / len) * (1.0 + _i % 2)
    	_out_buffer.set(_j, _sum / len)
	_out_buffer

col (float r) => color.rgb(math.abs(r) * 2550, 2550 - math.abs(r) * 2550, 200, 50)

d = dct(close, 31)
// plot(0.1 + math.abs(d.get(01)), '', color.rgb(255, 000, 200))
// plot(0.2 + math.abs(d.get(02)), '', color.rgb(240, 010, 210))
// plot(0.3 + math.abs(d.get(03)), '', color.rgb(225, 020, 220))
// plot(0.4 + math.abs(d.get(04)), '', color.rgb(210, 030, 230))
// plot(0.5 + math.abs(d.get(05)), '', color.rgb(195, 040, 240))
// plot(0.6 + math.abs(d.get(06)), '', color.rgb(180, 050, 250))
// plot(0.7 + math.abs(d.get(07)), '', color.rgb(165, 060, 255))
// plot(0.8 + math.abs(d.get(08)), '', color.rgb(150, 075, 255))
// plot(0.9 + math.abs(d.get(09)), '', color.rgb(135, 090, 255))
// plot(1.0 + math.abs(d.get(10)), '', color.rgb(120, 105, 255))
// plot(1.1 + math.abs(d.get(11)), '', color.rgb(105, 120, 255))
// plot(1.2 + math.abs(d.get(12)), '', color.rgb(090, 135, 255))
// plot(1.3 + math.abs(d.get(13)), '', color.rgb(075, 150, 255))
// plot(1.4 + math.abs(d.get(14)), '', color.rgb(060, 165, 255))
// plot(1.5 + math.abs(d.get(15)), '', color.rgb(050, 180, 250))
// plot(1.6 + math.abs(d.get(16)), '', color.rgb(040, 195, 240))
// plot(1.7 + math.abs(d.get(17)), '', color.rgb(030, 210, 230))
// plot(1.8 + math.abs(d.get(18)), '', color.rgb(020, 225, 220))
// plot(1.9 + math.abs(d.get(19)), '', color.rgb(010, 240, 210))
// plot(2.0 + math.abs(d.get(20)), '', color.rgb(000, 255, 200))
plot(0.1, '', col(d.get(01)), 1, plot.style_area, false, 0.0)
plot(0.2, '', col(d.get(02)), 1, plot.style_area, false, 0.1)
plot(0.3, '', col(d.get(03)), 1, plot.style_area, false, 0.2)
plot(0.4, '', col(d.get(04)), 1, plot.style_area, false, 0.3)
plot(0.5, '', col(d.get(05)), 1, plot.style_area, false, 0.4)
plot(0.6, '', col(d.get(06)), 1, plot.style_area, false, 0.5)
plot(0.7, '', col(d.get(07)), 1, plot.style_area, false, 0.6)
plot(0.8, '', col(d.get(08)), 1, plot.style_area, false, 0.7)
plot(0.9, '', col(d.get(09)), 1, plot.style_area, false, 0.8)
plot(1.0, '', col(d.get(10)), 1, plot.style_area, false, 0.9)
plot(1.1, '', col(d.get(11)), 1, plot.style_area, false, 1.0)
plot(1.2, '', col(d.get(12)), 1, plot.style_area, false, 1.1)
plot(1.3, '', col(d.get(13)), 1, plot.style_area, false, 1.2)
plot(1.4, '', col(d.get(14)), 1, plot.style_area, false, 1.3)
plot(1.5, '', col(d.get(15)), 1, plot.style_area, false, 1.4)
plot(1.6, '', col(d.get(16)), 1, plot.style_area, false, 1.5)
plot(1.7, '', col(d.get(17)), 1, plot.style_area, false, 1.6)
plot(1.8, '', col(d.get(18)), 1, plot.style_area, false, 1.7)
plot(1.9, '', col(d.get(19)), 1, plot.style_area, false, 1.8)
plot(2.0, '', col(d.get(20)), 1, plot.style_area, false, 1.9)
plot(2.1, '', col(d.get(21)), 1, plot.style_area, false, 2.0)
plot(2.2, '', col(d.get(22)), 1, plot.style_area, false, 2.1)
plot(2.3, '', col(d.get(23)), 1, plot.style_area, false, 2.2)
plot(2.4, '', col(d.get(24)), 1, plot.style_area, false, 2.3)
plot(2.5, '', col(d.get(25)), 1, plot.style_area, false, 2.4)
plot(2.6, '', col(d.get(26)), 1, plot.style_area, false, 2.5)
plot(2.7, '', col(d.get(27)), 1, plot.style_area, false, 2.6)
plot(2.8, '', col(d.get(28)), 1, plot.style_area, false, 2.7)
plot(2.9, '', col(d.get(29)), 1, plot.style_area, false, 2.8)
plot(3.0, '', col(d.get(30)), 1, plot.style_area, false, 2.9)
// plot(3.1, '', col(d.get(31)), 1, plot.style_area, false, 3.0)
// plot(3.2, '', col(d.get(32)), 1, plot.style_area, false, 3.1)
// plot(3.3, '', col(d.get(33)), 1, plot.style_area, false, 3.2)
// plot(3.4, '', col(d.get(34)), 1, plot.style_area, false, 3.3)
// plot(3.5, '', col(d.get(35)), 1, plot.style_area, false, 3.4)
// plot(3.6, '', col(d.get(36)), 1, plot.style_area, false, 3.5)
// plot(3.7, '', col(d.get(37)), 1, plot.style_area, false, 3.6)
// plot(3.8, '', col(d.get(38)), 1, plot.style_area, false, 3.7)
// plot(3.9, '', col(d.get(39)), 1, plot.style_area, false, 3.8)
// plot(4.0, '', col(d.get(40)), 1, plot.style_area, false, 3.9)
