// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © metacamaleo

//@version=5
library("MarkovChains", overlay=false)

//@description [ALGOA+] Markov Chains library by @metacamaleo. Created in 09/08/2024.
//@description
//@description The MarkovChains library provides tools to calculate and visualize Markov Chain-based transition matrices and probabilities.
//@description This library supports two primary algorithms: a rolling window Markov Chain and a conditional Markov Chain (which operates based on specified conditions).
//@description The key concepts used include Markov Chain states, transition matrices, and future state probabilities based on past market conditions or indicators.
//@description 
//@description Key features:
//@description - `mc_rw()`: Builds a transition matrix using a rolling window Markov Chain, calculating probabilities based on a fixed length of historical data.
//@description - `mc_cond()`: Builds a conditional Markov Chain transition matrix, calculating probabilities based on the current market condition or indicator state.
//@description Basically, you will just need to use the above functions on your script to default outputs and displays.
//@description
//@description Exported UDTs include:
//@description - s_map: An UDT variable used to store a map with dummy states, i.e., if possible states are bullish, bearish, and neutral, and current is bullish, it will be stored
//@description   in a map with following keys and values: "bullish", 1; "bearish", 0; and "neutral", 0. You will only use it to customize your own script, otherwise, it´s only for internal use.
//@description - mc_states: This UDT variable stores user inputs, calculations and MC outputs. As the above, you don´t need to use it, but you may get features to customize your own script.
//@description   For example, you may use mc.tm to get the transition matrix, or the prob map to customize the display.
//@description As you see, functions are all based on mc_states UDT. The s_map UDT is used within mc_states´s s array.
//@description 
//@description Optional exported functions include:
//@description - `mc_table()`: Displays the transition matrix in a table format on the chart for easy visualization of the probabilities.
//@description - `display_list()`: Displays a map (or array) of string and float/int values in a table format, used for showing transition counts or probabilities.
//@description - `mc_prob()`: Calculates and displays probabilities for a given number of future bars based on the current state in the Markov Chain.
//@description - `mc_all_states_prob()`: Calculates probabilities for all states for future bars, considering all possible transitions.
//@description The above functions may be used to customize your outputs. Use the returned variable mc_states from mc_rw() and mc_cond() to display each of its matrix, maps or arrays using mc_table()
//@description   (for matrices) and display_list() (for maps and arrays) if you desire to debug or track the calculation process.
//@description 
//@description See the examples in the end of this script.
//@description 
//@description Have good trading days! 
//@description Best regards,
//@description @metacamaleo


//@type Stores a map with dummy categories of states to store in an array. Internal use only.
//@field state map<string, int>
export type s_map
    map<string, int> state

//@type Markov Chain setup, input and outputs.
//@field states Array string with identification of states.
//@field length Rolling window period.
//@field prob Outup map with probabilities.
//@field s Internal use only. Array containing each bar state. The array has a length + 1 size. The type s_map stores a vector in a map<string, int>, which corresponds to a dummy set of transitions.
//@field state_null Internal use only. A map with all states with 0 value.
//@field transitions Internal use only. Array string to store each transition
//@field trans_count_vector Internal use only - map<string, int>
//@field tm_names Internal use only. It is a mirror of tm, containing transition identification - matrix<string>
//@field tm_count Internal use only. Auxiliary matrix<int>
//@field tm Transition matrix (matrix<float>)
//@field n_states Internal use only. Numer of states
export type mc_states
    array<string> states                    // definition of states
    int length                              // markov chain limited period
    map<string, float> prob                 // probability vector
    // internal use only:
    array<s_map> s                          // a vector of S0 -> Sn
    map<string, int> state_null             // a null state vector
    array<string> transitions               // transitions form 0 to n
    map<string, int> trans_count_vector     // auxiliary transition count vector
    matrix<string> tm_names                 // auxiliary matrix with transitions to get corresponding position
    matrix<int> tm_count                    // auxiliary matrix to store transition counts
    matrix<float> tm                        // transition matrix, or P
    int n_states                            // the number of states

//@function Displays the transition matrix in a table format.
//@param mc The Markov Chain object containing states, transition matrix, and other variables.
//@param condition Boolean to show or hide the table.
//@param title Title of the table.
//@param tbl_position Position of the table on the chart.
//@param tbl_size Size of the table font.
//@returns void
export method mc_table(mc_states mc, bool condition = true, string title = na, string tbl_position = position.middle_left, string tbl_size = size.tiny)=> 
    if condition
        var tbl =table.new(tbl_position, mc.n_states, mc.n_states + 1, #000000)
        if not na(title)
            tbl.cell(0, 0, title, text_color = color.orange, text_halign = text.align_left, text_size = tbl_size)
        for col = 0 to mc.n_states - 1
            for row = 1 to mc.n_states
                tbl.cell(col, row, mc.tm_names.get(row - 1, col) + " = " + str.tostring(mc.tm.get(row - 1, col)*100, format.percent), text_color = color.white, text_size = tbl_size)

//@function Displays a map of string and float values in a table format.
//@param this The map of string and float values to be displayed.
//@param condition Boolean to show or hide the table.
//@param title Title of the table.
//@param list_position Position of the table on the chart.
//@param font_size Size of the table font.
//@returns void
export method display_list(map<string, float> this, bool condition = true, string title = "MAP<string, float>", string list_position = "middle_right", string font_size = size.small) => 
    if condition
        keys = this.keys()
        values = this.values()
        var tbl =table.new(list_position, 1, keys.size() + 1, #000000)
        tbl.cell(0, 0, title, text_color = color.white, text_size = font_size)
        for [index, element] in keys
            tbl.cell(0, index+1, element + " = " + str.tostring(values.get(index), format.percent), text_color = color.white, text_size = font_size)

//@function Displays a map of string and float values in a table format.
//@param this The map of string and float values to be displayed.
//@param condition Boolean to show or hide the table.
//@param title Title of the table.
//@param list_position Position of the table on the chart.
//@param font_size Size of the table font.
//@returns void
export method display_list(map<string, int> this, bool condition = true, string title = "MAP<string, int>", string list_position = "middle_right", string font_size = size.small) =>
    if condition
        keys = this.keys()
        values = this.values()
        var tbl =table.new(list_position, 1, keys.size() + 1, #000000)
        tbl.cell(0, 0, title, text_color = color.white, text_size = font_size)
        for [index, element] in keys
            tbl.cell(0, index+1, element + " = " + str.tostring(values.get(index)), text_color = color.white, text_size = font_size)

//@function Displays an array of integer values in a table format.
//@param this The array of integer values to be displayed.
//@param condition Boolean to show or hide the table.
//@param title Title of the table.
//@param list_position Position of the table on the chart.
//@param font_size Size of the table font.
//@returns Displays the array in a table.
export method display_list(array<int> this, bool condition = true, string title = "ARRAY<int>", string list_position = "middle_right", string font_size = size.small) =>
    if condition
        var tbl =table.new(list_position, 1, this.size() + 1, #000000)
        tbl.cell(0, 0, title, text_color = color.white, text_size = font_size)
        for [index, element] in this
            tbl.cell(0, index+1, str.tostring(element), text_color = color.white, text_size = font_size)

//@function Displays an array of float values in a table format.
//@param this The array of float values to be displayed.
//@param condition Boolean to show or hide the table.
//@param title Title of the table.
//@param list_position Position of the table on the chart.
//@param font_size Size of the table font.
//@returns Displays the array in a table.
export method display_list(array<float> this, bool condition = true, string title = "ARRAY<float>", string list_position = "middle_right", string font_size = size.small) =>
    if condition
        var tbl =table.new(list_position, 1, this.size() + 1, #000000)
        tbl.cell(0, 0, title, text_color = color.white, text_size = font_size)
        for [index, element] in this
            tbl.cell(0, index+1, str.tostring(element), text_color = color.white, text_size = font_size)

//@function Displays an array of string values in a table format.
//@param this The array of string values to be displayed.
//@param condition Boolean to show or hide the table.
//@param title Title of the table.
//@param list_position Position of the table on the chart.
//@param font_size Size of the table font.
//@returns Displays the array in a table.
export method display_list(array<string> this, bool condition = true, string title = "ARRAY<string>", string list_position = "middle_right", string font_size = size.small) =>
    if condition
        var tbl =table.new(list_position, 1, this.size() + 1, #000000)
        tbl.cell(0, 0, title, text_color = color.white, text_size = font_size)
        for [index, element] in this
            tbl.cell(0, index+1, element, text_color = color.white, text_size = font_size)

//@function Initializes the Markov Chain states and variables for calculation.
//@param states Array of strings representing the possible states in the Markov Chain.
//@param length The rolling window size for the Markov Chain.
//@returns A new Markov Chain object initialized with the specified states and window size.
method mc_initialize(array<string> states, int length = na) =>
    // VARIABLE DECLARATION
    // States <- defined by User
    var transitions = array.new<string>()
    var state_null = map.new<string, int>()
    var s = array.new<s_map>()
    var trans_count_vector = map.new<string, int>()
    var n_states = states.size()
    var tm_names = matrix.new<string>(n_states, n_states, "")
    var tm_count = matrix.new<int>(n_states, n_states, 0)
    var tm = matrix.new<float>(n_states, n_states, 0)

    // Distributes the states in a n x n matrix
    for [index1, element1] in states
        state_null.put(element1, 0)
        for [index2, element2] in states
            transition = element1 + " -> " + element2
            trans_count_vector.put(transition, 0)
            tm_names.set(index1, index2, transition)
            // prob.put(transition, 0)
    mc_states.new(states = states.copy(),
         transitions = transitions,
         state_null = state_null,
         s = s,
         trans_count_vector = trans_count_vector,
         tm_names = tm_names,
         tm_count = tm_count,
         tm = tm,
         prob = state_null.copy(),
         n_states = n_states,
         length = length)

//@function Calculates probabilities for n bars in the future based on the current state.
//@param mc The Markov Chain object.
//@param pred_length The number of bars to predict into the future.
//@param show_prob Boolean to show or hide the probability table.
//@param list_position Position of the probability list on the chart.
//@param font_size Size of the table font.
//@returns The updated probability map.
export method mc_prob(mc_states mc, int pred_length = na, bool show_prob = true, string list_position = position.middle_right, string font_size = size.small) =>
    if mc.transitions.size() == mc.length or na(mc.length) and mc.transitions.size() > 2
        s0 = mc.s.last().state.copy() // the last state
        tm_n = nz(pred_length, 0) == 0 ? mc.tm : matrix.pow(mc.tm, pred_length)

        // Calculate probabilities for pred_length based on today's state
        s0_keys = s0.keys()
        var prob_values = array.new<float>()
        for [index, element] in s0_keys
            if s0.get(element) == 1 //
                prob_values := tm_n.row(index)
                break
        index = 0
        for [key, value] in mc.prob
            mc.prob.put(key, prob_values.get(index)*100)
            index += 1
        mc.prob.display_list(show_prob, "PROBABILITIES", list_position, font_size)
    mc.prob

//@function Calculates probabilities for all states n bars in the future based on transitions.
//@param mc The Markov Chain object.
//@param pred_length The number of bars to predict into the future.
//@param show_prob Boolean to show or hide the probability table.
//@param list_position Position of the probability list on the chart.
//@param font_size Size of the table font.
//@returns The updated probability map.
export method mc_all_states_prob(mc_states mc, int pred_length = na, bool show_prob = true, string list_position = position.middle_right, string font_size = size.small) =>
    if mc.transitions.size() == mc.length or na(mc.length) and mc.transitions.size() > 2
        s0 = mc.s.last().state.copy() // the last state
        tm_n = nz(pred_length, 0) == 0 ? mc.tm : matrix.pow(mc.tm, pred_length)

        // Calculate probabilities for pred_length based on today's state
        s1 = matrix.mult(tm_n, s0.values())
        index = 0
        for [keys, _] in s0
            mc.prob.put(keys, s1.get(index)*100)
            index += 1
        mc.prob.display_list(show_prob, "PROBABILITIES", list_position, font_size)
    mc.prob

//@function Builds the transition matrix for a rolling window Markov Chain.
//@param state The current state of the market or system.
//@param length The rolling window size.
//@param states Array of strings representing the possible states in the Markov Chain.
//@param pred_length The number of bars to predict into the future.
//@param show_table Boolean to show or hide the transition matrix table.
//@param show_prob Boolean to show or hide the probability table.
//@param table_position Position of the transition matrix table on the chart.
//@param prob_position Position of the probability list on the chart.
//@param font_size Size of the table font.
//@returns The transition matrix and probabilities for future states.
export mc_rw(string state, int length, array<string> states, int pred_length = na, bool show_table = true, bool show_prob = true, string table_position = position.middle_left, string prob_position = position.middle_right, string font_size = size.small)=>
    var mc = mc_initialize(states, length)
    // Adds last state
    if not na(state)
        current_state_vector = mc.state_null.copy()
        current_state_vector.put(state, 1)
        mc.s.push(s_map.new(current_state_vector))
        if mc.s.size() > mc.length + 1
            mc.s.shift()
    // Adds last transition
    if not na(state[1]) and not na(state) and mc.s.size() > 1
        transition = state[1] + " -> " + state
        mc.transitions.push(transition)
        if mc.transitions.size() > mc.length
            mc.transitions.shift()

        // Resets trans_count_vector
        keys = mc.trans_count_vector.keys()
        mc.trans_count_vector.clear()
        for element in keys
            mc.trans_count_vector.put(element, 0)

        // Counts transitions and stores in trans_count_vector
        for [index, element] in mc.transitions
            if mc.trans_count_vector.contains(element)
                count = mc.trans_count_vector.get(element)
                mc.trans_count_vector.put(element, count + 1)
            else
                mc.trans_count_vector.put(element, 1)

        // Builds a transition count matrix
        for col = 0 to mc.n_states -1
            for row = 0 to mc.n_states -1
                key = mc.tm_names.get(row, col)
                mc.tm_count.set(row, col, mc.trans_count_vector.get(key))      

        // Builds the final transition matrix P
        for row = 0 to mc.n_states -1
            float row_total = mc.tm_count.row(row).sum()
            row_total := row_total == 0 ? 0.00001 : row_total
            for col = 0 to mc.n_states -1
                mc.tm.set(row, col, mc.tm_count.get(row, col)/row_total)
    // Displays the transition matrix
    mc.mc_table(show_table, "TRANSITION MATRIX", table_position, font_size)
    // Returns the probability map
    mc.mc_prob(pred_length, show_prob, prob_position, font_size)
    mc

//@function Builds the transition matrix for conditional Markov Chains.
//@param state The current state of the market or system.
//@param condition A string representing the condition.
//@param states Array of strings representing the possible states in the Markov Chain.
//@param pred_length The number of bars to predict into the future.
//@param show_table Boolean to show or hide the transition matrix table.
//@param show_prob Boolean to show or hide the probability table.
//@param table_position Position of the transition matrix table on the chart.
//@param prob_position Position of the probability list on the chart.
//@param font_size Size of the table font.
//@returns The transition matrix and probabilities for future states based on the HMM.
export mc_cond(string state, string condition, array<string> states, int pred_length = na, bool show_table = true, bool show_prob = true, string table_position = position.middle_left, string prob_position = position.middle_right, string font_size = size.small)=>
    var new_mc = mc_initialize(states)
    var conditional_states = map.new<string, mc_states>()
    if not conditional_states.contains(condition)
        conditional_states.put(condition, new_mc.copy())
    mc = conditional_states.get(condition)

    // Adds last state
    if not na(state)
        current_state_vector = mc.state_null.copy()
        current_state_vector.put(state, 1)
        mc.s.push(s_map.new(current_state_vector))

    // Adds last transition
    n = mc.s.size() - 1
    if not na(state) and n > 1
        prev_state_keys = mc.s.get(n-2).state.keys()
        prev_state_values = mc.s.get(n-2).state.values()
        prev_state_index = prev_state_values.indexof(1)
        transition = prev_state_keys.get(prev_state_index) + " -> " + state
        mc.transitions.push(transition)

        // Counts transitions and stores in trans_count_vector
        for [index, element] in mc.transitions
            if mc.trans_count_vector.contains(element)
                count = mc.trans_count_vector.get(element)
                mc.trans_count_vector.put(element, count + 1)
            else
                mc.trans_count_vector.put(element, 1)

        // Builds a transition count matrix
        for col = 0 to mc.n_states -1
            for row = 0 to mc.n_states -1
                key = mc.tm_names.get(row, col)
                mc.tm_count.set(row, col, mc.trans_count_vector.get(key))      

        // Builds the final transition matrix P
        for row = 0 to mc.n_states -1
            float row_total = mc.tm_count.row(row).sum()
            row_total := row_total == 0 ? 0.00001 : row_total
            for col = 0 to mc.n_states -1
                mc.tm.set(row, col, mc.tm_count.get(row, col)/row_total)

    // Displays the transition matrix
    mc.mc_table(show_table, condition, table_position, font_size)
    // Returns the probability map
    mc.mc_prob(pred_length, show_prob, prob_position, font_size)
    mc

// EXAMPLE:
// User Inputs
sma_short_length = input.int(10, minval = 5, step = 5, title="Short-term SMA Length")
sma_long_length = input.int(20, minval = 5, step = 10, title="Long-term SMA Length")
rsi_length = input.int(14, minval = 7, step = 7, title="RSI Length")
rsi_overbought = 70
rsi_oversold = 30
length = input.int(50, minval = 2, step = 10, title="Rolling windoww")
pred_length = input.int(0, minval = 0, step = 10, title="Prediction length")
mc_option = input.string("Conditional", "Algorithm option", options = ["RW", "Conditional"], tooltip = "RW = Rolling Window Markov Chains \n Conditional = Conditional Markov Chains")
show_table = input.bool(true, "Show transition matrix", inline = "s")
show_prob = input.bool(true, "Show probabilities", inline = "s")
font_size = input.string(size.tiny, "Table size", options = [size.auto, size.normal, size.small, size.tiny])
tbl_v = input.string("middle", "Table position | V:", options = ["top", "middle", "bottom"], inline = "t")
tbl_h = input.string("left", "H:", options = ["left", "center", "right"], inline = "t")
tbl_position = tbl_v + "_" + tbl_h

// Indicators
sma_short = ta.ema(close, sma_short_length)
sma_long = ta.ema(close, sma_long_length)
rsi = ta.rsi(close, rsi_length)

// Define states based on multiple indicators
strong_uptrend = sma_short > sma_long and rsi > rsi_overbought
weak_uptrend = sma_short > sma_long and rsi > (rsi_oversold + 20) and rsi <= rsi_overbought
neutral = math.abs(sma_short - sma_long) < ta.atr(14) * 0.1 and rsi > 40 and rsi < 60
weak_downtrend = sma_short < sma_long and rsi >= rsi_oversold and rsi < (rsi_overbought - 20)
strong_downtrend = sma_short < sma_long and rsi < rsi_oversold

//@variable Defines conditions if you want to use mc_cond()
condition = switch
    strong_uptrend or weak_uptrend => "UPTREND"
    weak_downtrend or strong_downtrend => "DOWNTREND"
    neutral => "NEUTRAL"

//@variable Defines states for both functions. As in mc_rw() you don´t need conditions. I just copy them as states.
state = switch mc_option
    "Conditional" => close > open ? "up" : "down"
    "RW" => condition

//@variable Creates an array with all possible states. OBS: ALL VALUES MUST MATCH WITH states VARIABLE, OTHERWISE THE SCRIPT WON´T RECOGNIZE THEM.
states = switch mc_option
    "RW" => array.from("UPTREND", "NEUTRAL", "DOWNTREND")
    "Conditional" => array.from("up", "down")

mc = switch mc_option
    "Conditional" => mc_cond(state[1], condition, states, pred_length, show_table, show_prob, tbl_position, font_size = font_size)
    => mc_rw(state[1], length, states, pred_length, show_table, show_prob, tbl_position, font_size = font_size)

//@variable Here is where you get the probability maps using both functions.
prob_map = mc.prob.copy()

// Getting the probabilities for each state
bullish_prob = prob_map.get(states.get(0))
bearish_prob = prob_map.get(states.get(1))
neutral_prob = mc_option == "RW" ? prob_map.get(states.get(2)) : na

// Plots SMA lines
plot(sma_short, color=color.blue, title="Short-term SMA", force_overlay = true)
plot(sma_long, color=color.orange, title="Long-term SMA", force_overlay = true)

// Plots probabilities
plot(bearish_prob, color =color.red, title="Bearish prob")
plot(bullish_prob, color = color.green, title="Bullish prob")
plot(neutral_prob, color= mc_option == "RW" ? color.new(color.gray, 70) : na, style = plot.style_area, title="Neutral prob")

// Background color for different states
_bgcolor = switch condition
    "UPTREND" => color.green
    "DOWNTREND" => color.red
    "NEUTRAL" => color.gray

bgcolor(color.new(_bgcolor, 70), force_overlay = true)