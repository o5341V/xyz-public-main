// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Auroagwei 


//@version=4
//
// Derivative Oscillator (DOSC) Cu [ID: AC-P] v04b
    // Author: Auroagwei 
    // https://www.tradingview.com/u/auroagwei/#published-scripts
//
study("Derivative Oscillator Cu [ID: AC-P]",shorttitle="D-Osc")
    // DOSC (Derivative Oscillator)

        // Brown, Constance. 
            // Reference 1: “The Derivative Oscillator: a New Approach to an Old Problem,” Journal of Technical Analysis (Winter-Spring 1994) 45–61.
            // Reference 2: Technical Analysis for the Trading Professional. New York, NY: McGraw-Hill, 1999.
            
        // Acknowledgements: 
            // Base/Source script for Derivative Oscillator by everget 
                // https://www.tradingview.com/script/b1qim2XB-Derivative-Oscillator/
                // Copyright (c) 2018-present, Alex Orekhov (everget)
                // Derivative Oscillator script may be freely distributed under the MIT license.
            // Prorealcode Derivative Oscillator (color scheme/code reference)
                // https://www.prorealcode.com/prorealtime-indicators/derivative-oscillator-derosc/
        
            // Derivative Oscillator (Lazybear)
                // https://www.tradingview.com/script/6wfwJ6To-Indicator-Derivative-Oscillator/    
            // Waddah Attar Explosion V2 [SHK]
                // https://www.tradingview.com/script/d9IjcYyS-Waddah-Attar-Explosion-V2-SHK/
            // Elders Market Thermometer (Lazybear)
                // https://www.tradingview.com/script/HqvTuEMW-Elder-s-Market-Thermometer-LazyBear/
            // Coral Trend Indicator (Lazybear)
                // https://www.tradingview.com/script/qyUwc2Al-Coral-Trend-Indicator-LazyBear/
    
rsiLength = input(title="DOSC: RSI Length", type=input.integer, defval=14)
ema1Length = input(title="DOSC: 1st EMA Smoothing Length", type=input.integer, defval=5)
ema2Length = input(title="DOSC: 2nd EMA Smoothing Length", type=input.integer, defval=3)
smaLength = input(title="DOSC: 3rd SMA Smoothing Length", type=input.integer, defval=9)
signalLength = input(title="DOSC: Signal Length", type=input.integer, defval=9)

src = input(title="DOSC: Source", type=input.source, defval=close)

show_signalline = input(true, title="DOSC: Signal Line", type=input.bool)
waddah_color = input(false, title="DOSC: Waddah Bullish/Bearish Signal Line coloring", type=input.bool)
waddah_color_cir = true //input(true, title="Waddah Bullish/Bearish coloring (Circles)", type=input.bool)
show_dosc_col = input(true, title="DOSC: Columns", type=input.bool)
show_dosc_cir_hz= input(false, title="DOSC: Circles (Horizontal/Centered)", type=input.bool)

show_waddah_hz_offset = input(true, title="Waddah Bullish/Bearish: Circles (Offset)", type=input.bool)
show_ct_hz_offset= input(true, title="Coral Trend: Circles (Offset)", type=input.bool)
show_ct_hz = input(false, title="Coral Trend: Centerline (Horizontal/Centered)", type=input.bool)

show_vwap= input(true, title="VWAP Signal (Source Input above/below VWAP)", type=input.bool)

ct_space_mult  = input(title="Coral Trend Circle Offset Multiplier", type=input.float, defval=1)
waddah_space_mult = input(title="Waddah Circle Offset Multiplier", type=input.float, defval=2)

////
srcWV = input(hlc3, title="VWAP: Source")
srcW_MACD = input(hlc3, title="Waddah: MACD Source")
srcW_BB_U = input(hlc3, title="Waddah: BB Upper Source")
srcW_BB_L = input(hlc3, title="Waddah: BB Lower Source")
////
// Exponential average of RSI is calculated, and then used to produce a new exp. average with a shorter period
smoothedRSI = ema(ema(rsi(src, rsiLength), ema1Length), ema2Length)
// SMA of the Above used to obtain the difference 
dosc = smoothedRSI - sma(smoothedRSI, smaLength)
signal = sma(dosc, signalLength)
// signal2 = sma(dosc, signalLength2)

doscColor = dosc >= 0 ? dosc[1] < dosc ? color.teal : color.lime : dosc[1] < dosc ? color.orange : color.red
//////////////

//---- Waddah Attar Explosion V2 [SHK] Component
// study("Waddah Attar Explosion V2 [SHK]", shorttitle="WAE [SHK]")
sensitivity = input(150, title="Waddah: Sensitivity")
fastLength=input(20, title="Waddah: FastEMA Length")
slowLength=input(40, title="Waddah: SlowEMA Length")
channelLength=input(20, title="Waddah: BB Channel Length")
mult=input(2.0, title="Waddah: BB Stdev Multiplier")

DEAD_ZONE = nz(rma(tr(true),100)) * 3.7

calc_macd(source, fastLength, slowLength) =>
	fastMA = ema(source, fastLength)
	slowMA = ema(source, slowLength)
	fastMA - slowMA

calc_BBUpper(source, length, mult) => 
	basis = sma(source, length)
	dev = mult * stdev(source, length)
	basis + dev

calc_BBLower(source, length, mult) => 
	basis = sma(source, length)
	dev = mult * stdev(source, length)
	basis - dev

t1 = (calc_macd(srcW_MACD, fastLength, slowLength) - calc_macd(srcW_MACD[1], fastLength, slowLength))*sensitivity
t2 = (calc_macd(srcW_MACD[2], fastLength, slowLength) - calc_macd(srcW_MACD[3], fastLength, slowLength))*sensitivity
e1 = (calc_BBUpper(srcW_BB_U, channelLength, mult) - calc_BBLower(srcW_BB_L, channelLength, mult))
trendUp = (t1 >= 0) ? t1 : 0
trendDown = (t1 < 0) ? (-1*t1) : 0

// plot(trendUp, style=plot.style_columns, linewidth=1,color=(trendDown<trendDown[1])?color.lime:color.green, transp=45, title="UpTrend")
// plot(trendDown, style=plot.style_columns, linewidth=1, color=(trendDown<trendDown[1])?color.orange:color.red, transp=45, title="DownTrend")
// plot(e1, style=plot.style_line, linewidth=2, color=#A0522D, title="ExplosionLine")
// plot(DEAD_ZONE, color=color.blue, linewidth=1, style=plot.style_cross, title="DeadZoneLine")
tUP = (trendUp<trendUp[1])?na:true
tDOWN = (trendDown<trendDown[1])?na:true
Waddah_long = tUP and trendUp > DEAD_ZONE
Waddah_short = tUP and trendDown > DEAD_ZONE

///////////////
//---- Coloring Component for DOSC Signal line, Waddah
color dosc_snc = na
color dosc_snc_cir = na
if Waddah_long
    dosc_snc := color.aqua
    dosc_snc_cir := dosc_snc
if Waddah_short
    dosc_snc := color.yellow
    dosc_snc_cir := dosc_snc
if waddah_color == false
    dosc_snc := na
if waddah_color_cir == false
    dosc_snc_cir := na

///////////////
//---- Derivative Oscillator Component Plotting 
hline(0, title="DOSC: Zero-line", linestyle=hline.style_dotted,color=color.new(color.gray,55))

plot(show_dosc_col ? dosc: na, title="Derivative Oscillator (DOSC)", style=plot.style_columns, linewidth=2, color=doscColor, transp=0)
plot(show_dosc_cir_hz ? 0 : na, title="DOSC: Circles (Horizontal/Centerline)", style=plot.style_circles, linewidth=2, color=doscColor, transp=0)


plot(show_signalline ? signal : na, title="DOSC: Signal Line (Background Shading for visibility)", 
   linewidth=3, color=color.black, transp=10)
plot(show_signalline ? signal : na, title="DOSC: Signal Line", 
   linewidth=2, color=color.gray, transp=10)
   
plot(show_signalline ? signal : na, title="DOSC: Signal Line (Waddah Coloring)", linewidth=3, color=dosc_snc, transp=0)

/////
//---- VWAP Component
// study(title="VWAP", shorttitle="VWAP", overlay=true)
t = time("D")
start = na(t[1]) or t > t[1]
sumSrc = srcWV * volume
sumVol = volume
sumSrc := start ? sumSrc : sumSrc + sumSrc[1]
sumVol := start ? sumVol : sumVol + sumVol[1]
vwap_calc = sumSrc / sumVol
// YE - source (hlc3) above vwap
ye = srcWV > vwap_calc
// NAH = source (hlc3) below vwap
nah = srcWV < vwap_calc
vwap_color = barssince(ye and not nah) <= barssince(nah and not ye) ? 
   color.lime : color.red
// plot(vwap_calc, title="VWAP", color=vwap_color,linewidth=2)
plotshape(show_vwap ? ye : na, style=shape.triangleup, location=location.bottom, color=color.green,title="Above VWAP")	
plotshape(show_vwap ? nah : na, style=shape.triangledown, location=location.top, color=color.red,title="Below VWAP")

//////
// ---- LB Coral Trend Component
// @author LazyBear 
// study(title="Coral Trend Indicator [LazyBear]", shorttitle="CTI_LB", overlay=true)
// srcC=close
sm =input(21, title="Coral Trend: Smoothing Period",type=input.integer)
cd = input(0.4, title="Coral Trend: Constant D",type=input.float)
ebc= false //input(false, title="Color Bars")
ribm=false //input(false, title="Ribbon Mode")
di = (sm - 1.0) / 2.0 + 1.0
c1 = 2 / (di + 1.0)
c2 = 1 - c1
c3 = 3.0 * (cd * cd + cd * cd * cd)
c4 = -3.0 * (2.0 * cd * cd + cd + cd * cd * cd)
c5 = 3.0 * cd + 1.0 + cd * cd * cd + 3.0 * cd * cd
float i1 = na
float i2 = na
float i3 = na
float i4 = na
float i5 = na
float i6 = na
i1 := c1*src + c2*nz(i1[1])
i2 := c1*i1 + c2*nz(i2[1])
i3 := c1*i2 + c2*nz(i3[1])
i4 := c1*i3 + c2*nz(i4[1])
i5 := c1*i4 + c2*nz(i5[1])
i6 := c1*i5 + c2*nz(i6[1])
bfr = -cd*cd*cd*i6 + c3*(i5) + c4*(i4) + c5*(i3)
// --------------------------------------------------------------------------
// For the Pinescript coders: Determining trend based on the mintick step. 
// --------------------------------------------------------------------------
//bfrC = bfr - nz(bfr[1]) > syminfo.mintick ? green : bfr - nz(bfr[1]) < syminfo.mintick ? red : blue
// bfrC = bfr > nz(bfr[1]) ? color.green : bfr < nz(bfr[1])  ? color.red : color.blue
// bfrC = bfr > nz(bfr[1]) ? color.aqua : bfr < nz(bfr[1])  ? color.yellow : na
bfrC = bfr > nz(bfr[1]) ? color.green : bfr < nz(bfr[1])  ? color.red : na

// tc=ebc?color.gray:bfrC
plot(show_ct_hz_offset ? (dosc > 0 ? -ct_space_mult : dosc < 0 ? ct_space_mult : na) : na, title="Coral Trend (Offset circles)", linewidth=2,
   style=plot.style_circles, color=bfrC,transp=0,linewidth=2)
plot(show_waddah_hz_offset ? (dosc > 0 ? -waddah_space_mult : dosc < 0 ? waddah_space_mult : na) : na, title="Waddah (Offset circles)", linewidth=2,
   style=plot.style_circles, color=dosc_snc_cir,transp=0,linewidth=3)
plot(show_ct_hz ?0:na, title="Coral Trend (Horizontal Centerline)", linewidth=2, style=plot.style_line, color=bfrC,transp=0,linewidth=3)
// plotshape(show_ct_hz ? 0 : na, style=shape.square, location=location.absolute, color=bfrC,title="Coral Trend")	
// bgcolor(ribm?bfrC:na, transp=50)
// barcolor(ebc?bfrC:na)
///
