// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © LuxAlgo

//@version=5
indicator("Pivot Point Profile [LuxAlgo]", shorttitle = "LuxAlgo - Pivot Point Profile", overlay = true, max_lines_count = 500, max_boxes_count = 500, max_labels_count = 500, max_bars_back = 5000)

pType = input.string("SMC Structure", title = "Pivot Type", options = ["SMC Structure","Fractal Pivots"], group = "Pivots Point Parameters")
pLength = input.int(5, title = "Length", minval = 1, group = "Pivots Point Parameters")

max = input.int(50, title = "Lookback", minval = 1, group = "Profile Calculation Parameters", tooltip = "Number of Pivot Points to use for the Profile Calculation")
fullHist = input.bool(false, title = "Use Full Chart History", group = "Profile Calculation Parameters", tooltip = "Disregards 'Lookback' and uses every pivot point from the chart.")
rowNum = input.float(50, title = "Row Size", maxval = 250, group = "Profile Calculation Parameters", tooltip = "Sets the Number of Row to use in the Profile.")
 
dispSize = input.int(50, minval = 10, title = "Profile Width", group = "Profile Display", tooltip = "Max [Left-Right] Visual Width of Profile")
dispOffset = input.int(1, title = "Profile Offset", group = "Profile Display", tooltip = "Sets the Distance of the Profile's Axis from the Current Bar.")
dispType  = input.string("Right", title = "Direction", options = ["Left","Right","Center"], group = "Profile Display")

hiTog = input.bool(true, title = "   Highlight CAs", group = "Concentrated Areas")
hstTog = input.bool(false, title = "", group = "Concentrated Areas", inline = "1")
hiThresh = input.int(10, minval = 0, title = "CA Threshold", inline = "1", group = "Concentrated Areas", tooltip = "Highlights all Rows Equal-to or Greater-Than this Value.\n\nWhen Unselected Only the Largest Rows for each direction will be Highlighted.\nEx. Largest Support and Largest Resistance Values.")

hiColor = input.color(color.new(color.white,90), title = "Highlight Color", group = "Concentrated Areas")

supAvgTog = input.bool(true, title = "Low CA Averages     ", group = "Concentrated Areas", inline = "supavg")
supAvgColor = input.color(color.blue, title = "", group = "Concentrated Areas", inline = "supavg")
resAvgTog = input.bool(true, title = "High CA Averages     ", group = "Concentrated Areas", inline = "resavg")
resAvgColor = input.color(#f23645, title = "", group = "Concentrated Areas", inline = "resavg")

supportColor = input.color(color.blue, title = "Profile Pivot Low Count", group = "Style") 
resistColor = input.color(#f23645, title = "Profile Pivot High Count", group = "Style")

txtTog = input.bool(true, title = "Show Row Values", group = "Style")
txtColor = input.color(color.white, title = "Text Color", group = "Style")
dispStructure = input.bool(true, title = "Show Pivots", group = "Style")
sColor = input.color(color.gray, title = "Pivot Color", group = "Style")

//---------------------------------------------------------------------------------------------------------------------}
//Functions
//---------------------------------------------------------------------------------------------------------------------{

round_to(_round,_to) =>
    math.round(_round/_to)*_to

//---------------------------------------------------------------------------------------------------------------------}
//Variables
//---------------------------------------------------------------------------------------------------------------------{

var int dir = 0

float top = na
float btm = na

var tops = array.new_float(na)
var bots = array.new_float(na)
var top_bars = array.new_int(1,bar_index)
var bot_bars = array.new_int(1,bar_index)

top_map = map.new<float,int>()
bot_map = map.new<float,int>()
all_map = map.new<float,int>()

send_hi = false
send_lo = false

upper = ta.highest(pLength)
lower = ta.lowest(pLength)

//---------------------------------------------------------------------------------------------------------------------}
//Pivot Calculations
//---------------------------------------------------------------------------------------------------------------------{

//SMC Structure
if dir >= 0 and high[pLength] > upper
    dir := -1 
    top := high[pLength]

if dir <= 0 and low[pLength] < lower
    dir := 1
    btm := low[pLength]

top_conf = not na(top)
bot_conf = not na(btm)

//Fractal Pivots
ph = ta.pivothigh(pLength,pLength)
pl = ta.pivotlow(pLength,pLength)

//---------------------------------------------------------------------------------------------------------------------}
//Sending Pivots to Arrays
//---------------------------------------------------------------------------------------------------------------------{

//SMC Structure
if pType == "SMC Structure"

    if top_conf
        k = round_to(top,syminfo.mintick)
        tops.push(k)
        top_bars.push(time[pLength])
        if dispStructure
            send_hi := true

    if bot_conf
        k = round_to(btm,syminfo.mintick)
        bots.push(k)
        bot_bars.push(time[pLength])
        if dispStructure
            send_lo := true

//Fractal Pivots
if pType == "Fractal Pivots"

    if (not na(ph))
        k = round_to(ph,syminfo.mintick)
        tops.push(k)
        top_bars.push(time[pLength])
        if dispStructure
            send_hi := true

    if (not na(pl))
        k = round_to(pl,syminfo.mintick)
        bots.push(k)
        bot_bars.push(time[pLength])
        if dispStructure
            send_lo := true

//---------------------------------------------------------------------------------------------------------------------}
//Controling Lookback
//---------------------------------------------------------------------------------------------------------------------{
if tops.size() > max and not fullHist
    tops.shift()
    top_bars.shift()

if bots.size() > max and not fullHist
    bots.shift()
    bot_bars.shift()

//---------------------------------------------------------------------------------------------------------------------}
//Processing Arrays into Maps
//---------------------------------------------------------------------------------------------------------------------{
row_size = (math.max(tops.max(),bots.max()) - math.min(tops.min(),bots.min())) / rowNum

first_bar = math.min(top_bars.first(),bot_bars.first())

if barstate.islast
    for val in tops
        k = round_to(val,row_size)
        top_map.put(k,nz(top_map.get(k))+1)
        all_map.put(k,nz(all_map.get(k))+1)

    for val in bots
        k = round_to(val,row_size)
        bot_map.put(k,nz(bot_map.get(k))+1)
        all_map.put(k,nz(all_map.get(k))+1)

//---------------------------------------------------------------------------------------------------------------------}
//Display
//---------------------------------------------------------------------------------------------------------------------{

//Swing Points
plotshape(send_hi, style = shape.circle, title = "Swing High", location = location.abovebar, offset = -pLength, color = sColor, display = display.pane)
plotshape(send_lo, style = shape.circle, title = "Swing Low", location = location.belowbar, offset = -pLength, color = sColor, display = display.pane)

//Profile
if barstate.islast

    anchor = dispOffset+bar_index
    scale = dispSize / (dispType == "Center"?(top_map.values().max() + bot_map.values().max()):all_map.values().max())

    for bx in box.all
        bx.delete()
    for ln in line.all
        ln.delete()
    
    if hiTog
        for [k,v] in all_map
            top_max = top_map.get(k) == top_map.values().max()
            bot_max = bot_map.get(k) == bot_map.values().max()
            draw_box = (hstTog ? v >= hiThresh : top_max or bot_max)
            if draw_box
                box.new(first_bar,k+(row_size/2),time_close,k-(row_size/2), xloc = xloc.bar_time, border_color = chart.bg_color, border_width = 1, bgcolor = hiColor)

    if supAvgTog or resAvgTog
        for [k,v] in all_map
            top_val = nz(top_map.get(k))
            bot_val = nz(bot_map.get(k))
            top_max = top_val == top_map.values().max()
            bot_max = bot_val == bot_map.values().max()
            draw_line = (hstTog ? v >= hiThresh : top_max or bot_max)

            if not draw_line
                continue

            top_vals = array.new_float(na)
            bot_vals = array.new_float(na)
            
            dbl_max = top_max and bot_max

            side = switch
                (top_val > bot_val) and not dbl_max => -1 
                (bot_val > top_val) and not dbl_max => 1
                top_max and not bot_max => -1
                bot_max and not top_max => 1
                => 0

            if side >= 0
                for val in bots
                    t = k+(row_size/2)
                    b = k-(row_size/2)
                    if val >= b and val <= t
                        bot_vals.push(val)
            if side <= 0
                for val in tops
                    t = k+(row_size/2)
                    b = k-(row_size/2)
                    if val >= b and val <= t
                        top_vals.push(val)

            top_avg = top_vals.avg()
            bot_avg = bot_vals.avg()

            if side <= 0 and resAvgTog
                line.new(first_bar,top_avg,time_close,top_avg, xloc = xloc.bar_time, color = resAvgColor)
            if side >= 0 and supAvgTog
                line.new(first_bar,bot_avg,time_close,bot_avg, xloc = xloc.bar_time, color = supAvgColor)

    for [k,v] in all_map

        top_val = nz(top_map.get(k))
        bot_val = nz(bot_map.get(k))

        if top_val > 0
            res_left = switch
                dispType == "Left" => anchor - math.round((bot_val + top_val)*scale)
                dispType == "Right" => anchor + math.round((bot_val +top_val)*scale)
                dispType == "Center" => anchor
            res_right = switch
                dispType == "Left" => anchor - math.round(bot_val*scale)
                dispType == "Right" => anchor + math.round(bot_val*scale)
                dispType == "Center" => anchor + math.round(top_val*scale)
            res_align = switch
                dispType == "Left" => text.align_left
                dispType == "Right" => text.align_right
                dispType == "Center" => text.align_right

            box.new(res_left,k+(row_size/2),res_right,k-(row_size/2), border_color = chart.bg_color, border_width = 1, bgcolor = resistColor, text = (txtTog?str.tostring(top_val):""), text_halign = res_align, text_color = txtColor)
        
        if bot_val > 0
            sup_left = switch
                dispType == "Left" => anchor - math.round(bot_val*scale) 
                dispType == "Right" => anchor
                dispType == "Center" => anchor - math.round(bot_val*scale)
            sup_right = switch
                dispType == "Left" => anchor
                dispType == "Right" => anchor + math.round(bot_val*scale) 
                dispType == "Center" => anchor
            sup_align = switch
                dispType == "Left" => text.align_left 
                dispType == "Right" => text.align_right
                dispType == "Center" => text.align_left
            
            box.new(sup_left,k+(row_size/2),sup_right,k-(row_size/2), border_color = chart.bg_color, border_width = 1, bgcolor = supportColor, text = (txtTog?str.tostring(bot_val):""), text_halign = sup_align, text_color = txtColor)
        
//---------------------------------------------------------------------------------------------------------------------}