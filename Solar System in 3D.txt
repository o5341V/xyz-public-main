// Created by Alien_Algorithms
// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
//@version=5
indicator("Solar System in 3D [Astro Tool w/ Zodiac] | Alien_Algorithms", overlay=false, max_bars_back = 100, calc_bars_count = 1100, max_polylines_count = 50, max_labels_count=100, scale=scale.right)

// |----- Input Parameters -----| //
model_group = "Model"
var bool USE_CUSTOM = input.bool(false, "Apply custom time", group=model_group, inline = 'custom-time')
var int CUSTOM_TIME = input.time(timestamp("Jan 01 2018 00:00:00 GMT+0"), "", group=model_group, inline = 'custom-time')
var bool SIMPLIFY_PLANETS = input.bool(false, "Simplify Planet Visuals", group=model_group, inline = 'init')
var bool TOGGLE_EARTH = input.bool(true, "Show Earth", group=model_group, inline = 'init')
var float EARTH_RADIUS = input.float(55, "Earth Size", group=model_group)
var float EARTH_TILT = input.float(23.4, "Earth Axial Tilt", minval=0, maxval=180, group=model_group)
var float EARTH_DAY_in = input.float(40, "Earth Day Duration (in bars)", minval=0, tooltip = "Set 0 to automatically determine.", group=model_group)

var float PLANETS_RADIUS = input.float(15, "Planets Size", group=model_group)
var int SEGMENTS = input.int(23, "Planet Resolution", minval=4, maxval=50, group=model_group)

var int GUI_SHIFT = input.int(-400, "Shift model (in bars)", group=model_group)
var float SCALE = input.float(800, "Scale", minval=0, maxval=1000, tooltip="Less planets typically needs a lower scale for ideal visual perspective.", group=model_group)
var float CAMERA_ANGLE = input.float(45, "Camera Angle", minval=0, maxval=90, tooltip='0 = top-down, 45 = optimal, 90 = flat-sideways', group=model_group)


model_natal = "Natal & Alignment"
var bool ORBITAL_ALIGN = input.bool(false, "Align Orbits", tooltip="Align all the planets onto one orbit", group = model_natal, inline='Alignment')
var int LIVE_ALIGNED_DIST = input.int(320, "Live", tooltip = 'Distance used for Live Planets', group = model_natal, inline='Alignment')
var int NATAL_ALIGNED_DIST = input.int(390, "Natal", tooltip = 'Distance used for Natal Planets', group = model_natal, inline='Alignment')


var bool USE_NATAL = input.bool(false, "Apply Natal", group = model_natal, inline='natal')
var int NATAL_DATE = input.time(timestamp("Jan 03 2009 18:15:05 GMT+0"), "", group = model_natal, inline='natal')
var color NATAL_COL = input.color(color.new(#00bcd4, 80), "| Hue", group = model_natal, inline='natal')
var bool NATAL_OBJECTS = input.bool(true, "Natal Visuals: Complex", tooltip = "Disable to draw labels instead of 3D objects, for increased performance.", group = model_natal)
var bool LIVE_NATAL_ASPECTS = input.bool(true, "Apply Aspects on Natal", tooltip = "If Natal Planets are enabled, this will compute the aspects between the live and natal planets.", group=model_natal)




// |----- Planet Data -----| //
planet_group = 'Planets'
var bool[] SHOW_PLANETS = array.from(
  input.bool(true, "Moon", group=planet_group, inline='planet-row-1'), 
  input.bool(true, "Mercury", group=planet_group, inline='planet-row-2'),
  input.bool(true, "Venus", group=planet_group, inline='planet-row-2'), 
  input.bool(true, "Sun", group=planet_group, inline='planet-row-1'), 
  input.bool(true, "Mars", group=planet_group, inline='planet-row-2'), 
  input.bool(true, "Jupiter", group=planet_group, inline='planet-row-2'), 
  input.bool(true, "Saturn", group=planet_group, inline='planet-row-3'), 
  input.bool(true, "Uranus", group=planet_group, inline='planet-row-3'), 
  input.bool(true, "Neptune", group=planet_group, inline='planet-row-3'), 
  input.bool(true, "Pluto", group=planet_group, inline='planet-row-3'))

var string PLANETS_SIZE = input.string(size.normal, "Planet Text Size", [size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=planet_group)
// var float ASPECT_THRESHOLD = input.float(1.0, "Aspect Activation Threshold (Degrees)", minval=0.0, maxval=5.0, group=planet_group)
var bool TRIANGULATE_ASPECTS = input.bool(true, "Triangulate Aspects", tooltip = "Creates a Triangle shape when certain aspects appear. Otherwise only connects the two planets.", group=planet_group)

var bool MONITOR_CONJUNCTIONS = input.bool(true, "Conjunctions", group=planet_group, inline='aspects-row-1')
var color CONJ_COL = input.color(color.new(color.red, 0), "", group=planet_group, inline='aspects-row-1')
var float CONJ_THRES = input.float(2.0, "Orb", group=planet_group, inline='aspects-row-1')

var bool MONITOR_SEXTILES = input.bool(false, "Sextiles", group=planet_group, inline='aspects-row-2')
var color SEXT_COL = input.color(color.new(color.yellow, 0), "", group=planet_group, inline='aspects-row-2')
var float SEXT_THRES = input.float(1.0, "Orb", group=planet_group, inline='aspects-row-2')

var bool MONITOR_SQUARES = input.bool(false, "Squares", group=planet_group, inline='aspects-row-3')
var color SQUARE_COL = input.color(color.new(color.blue, 0), "", group=planet_group, inline='aspects-row-3')
var float SQUARE_THRES = input.float(1.0, "Orb", group=planet_group, inline='aspects-row-3')

var bool MONITOR_TRINES = input.bool(false, "Trines", group=planet_group, inline='aspects-row-4')
var color TRI_COL = input.color(color.new(#bb20d6, 0), "", group=planet_group, inline='aspects-row-4')
var float TRINE_THRES = input.float(1.0, "Orb", group=planet_group, inline='aspects-row-4')

var bool MONITOR_OPPOSITIONS = input.bool(true, "Oppositions", group=planet_group, inline='aspects-row-5')
var color OPP_COL = input.color(color.new(color.green, 0), "", group=planet_group, inline='aspects-row-5')
var float OPP_THRES = input.float(2.0, "Orb", group=planet_group, inline='aspects-row-5')


var string[] PLANET_NAMES_in = array.from("Moon", "Mercury", "Venus", "Sun", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto")
var string[] PLANET_SIGNS_in = array.from("☽", "☿", "♀", "☉", "♂", "♃", "♄", "♅", "♆", "♇")
var bool USE_PLANET_SYMBOLS = input.bool(false, "Use Planetary Symbols", group=planet_group)
var PLANET_NAMES = USE_PLANET_SYMBOLS ? PLANET_SIGNS_in : PLANET_NAMES_in


// |------ Zodiac data -----| //
zodiac_group = 'Zodiac'
var bool USE_ZODIAC = input.bool(true, "Display Zodiac Signs", group=zodiac_group)
var string ZODIAC_TYPE = input.string("Sidereal", "Zodiac Type", options=["Sidereal", "Tropical"], tooltip = "Sidereal reflects the sky as it is today, Tropical as it was 2,000 years ago.", group=zodiac_group)

var string ZODIAC_SIZE = input.string(size.normal, "Zodiac Text Size", [size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group=zodiac_group)
var color ZODIAC_BACKGROUND = input.color(color.new(color.purple, 50), "Zodiac Background", group=zodiac_group)
var string[] ZODIAC_SIGNS_in = array.from("♈", "♉", "♊", "♋", "♌", "♍", "♎", "♏", "♐", "♑", "♒", "♓")
var string[] ZODIAC_NAMES_in = array.from("Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces")
var bool USE_ZODIAC_SYMBOLS = input.bool(false, "Use Zodiac Symbols", group=zodiac_group)
var ZODIAC_SIGNS = USE_ZODIAC_SYMBOLS ? ZODIAC_SIGNS_in : ZODIAC_NAMES_in
var color ZODIAC_COLOR = color.new(color.gray, 50)



// |------ Preloaded Data -----| //
var bool init = na

// Radial distance from the center of the 3D space (Scales with Earth Radius)
var float[] PLANET_DISTANCES = na

if ORBITAL_ALIGN and na(init)
    if USE_NATAL
        PLANET_DISTANCES := array.from(90 + EARTH_RADIUS * 2.4, 210 + EARTH_RADIUS * 3.2)
    else 
        PLANET_DISTANCES := array.from(90 + EARTH_RADIUS * 2.4)

else if not ORBITAL_ALIGN and na(init)
    PLANET_DISTANCES := array.from( 
      30 + EARTH_RADIUS * 1.5, 
      60 + EARTH_RADIUS * 2.2, 
      90 + EARTH_RADIUS * 2.4, 
      120 + EARTH_RADIUS * 2.6, 
      150 + EARTH_RADIUS * 2.8, 
      180 + EARTH_RADIUS * 3, 
      210 + EARTH_RADIUS * 3.2, 
      240 + EARTH_RADIUS * 3.4, 
      255 + EARTH_RADIUS * 3.6, 
      270 + EARTH_RADIUS * 3.8)

    if USE_NATAL
        array.push(PLANET_DISTANCES, (300 + EARTH_RADIUS * 4))



// The angle in degrees that each planet's poles are tilted (real data)
var float[] PLANET_TILTS = array.from(
  5.0, 
  0.034, 
  177.3, 
  7, 
  25.2, 
  3.1, 
  26.7, 
  97.8, 
  28.3, 
  122.5)

// The speed of rotation for each planet around its polar axis relative to earth speed (real data)
var float[] PLANET_ROTATIONS = array.from(
  0.0366, 
  0.017, 
  0.004, 
  0.0408, 
  0.974, 
  2.418, 
  2.246, 
  1.392, 
  1.498, 
  0.156) 

var color[] PLANET_COLORS = array.from(
  color.new(#D6D6D6, 50), // Moon
  color.new(#B7B8B9, 50), // Mercury
  color.new(#E7CFAD, 50), // Venus
  color.new(#DAA520, 50), // Sun
  color.new(#C1440E, 50), // Mars
  color.new(#e9c54f80, 50), // Jupiter
  color.new(#E0A064, 50), // Saturn
  color.new(#8be2db80, 50), // Uranus
  color.new(#1248df80, 50), // Neptune
  color.new(#8B4513, 50)) // Pluto

var string[] PLANET_DESC = array.from(
  "Governs emotions, intuition, and the subconscious mind.",
  "Symbolizes communication, intellect, and reasoning.",
  "Represents love, beauty, harmony, and relationships.",
  "Embodies the core self, vitality, and ego expression.",
  "Associated with energy, drive, passion, and aggression.",
  "Linked to growth, expansion, and wisdom.",
  "Represents discipline, structure, and responsibility.",
  "Stands for innovation, rebellion, and sudden change.",
  "Represents dreams, illusions, spirituality, and intuition.",
  "Governs transformation, power, and the subconscious.",
  "Our home world.")

var string[] ZODIAC_DESC = array.from(
  "Bold, independent, and full of initiative; the pioneer.",
  "Practical, reliable, and deeply connected to the material world.",
  "Adaptable, curious, and driven by communication and ideas.",
  "Nurturing, sensitive, and emotionally driven.",
  "Confident, charismatic, and naturally inclined to leadership.",
  "Analytical, detail-oriented, and focused on service and improvement.",
  "Seeks balance, harmony, and thrives in social relationships.",
  "Intense, mysterious, and driven by transformation and passion.",
  "Optimistic, adventurous, and loves freedom and exploration.",
  "Disciplined, ambitious, and determined to achieve success.",
  "Innovative, unconventional, and values individuality and progress.",
  "Dreamy, empathetic, and deeply connected to intuition and emotions.")


// |----- Astro Library Import & Ayanamsa -----| //
import BarefootJoey/AstroLib/1 as AL

get_planets(SKY_DATE) =>
    float DAY = AL.J2000(AL.JDN(SKY_DATE, 0, 0))
    float DAYR = AL.J2000(AL.JDN(SKY_DATE, 1, 0))
    int GEOOUT = 0 

    moonlon = array.get(SHOW_PLANETS, 0) ? AL.getmoon(GEOOUT, DAY, DAYR, 0, 0) : na
    merclon = array.get(SHOW_PLANETS, 1) ? AL.getplanet(1, GEOOUT, DAY, DAYR, 0, 0, 0) : na
    venulon = array.get(SHOW_PLANETS, 2) ? AL.getplanet(2, GEOOUT, DAY, DAYR, 0, 0, 0) : na
    sunlon = array.get(SHOW_PLANETS, 3) ? AL.getsun(GEOOUT, DAY, DAYR, 0, 0, 0) : na
    marslon = array.get(SHOW_PLANETS, 4) ? AL.getplanet(4, GEOOUT, DAY, DAYR, 0, 0, 0) : na
    jupilon = array.get(SHOW_PLANETS, 5) ? AL.getplanet(5, GEOOUT, DAY, DAYR, 0, 0, 0) : na
    satulon = array.get(SHOW_PLANETS, 6) ? AL.getplanet(6, GEOOUT, DAY, DAYR, 0, 0, 0) : na
    uranlon = array.get(SHOW_PLANETS, 7) ? AL.getplanet(7, GEOOUT, DAY, DAYR, 0, 0, 0) : na
    neptlon = array.get(SHOW_PLANETS, 8) ? AL.getplanet(8, GEOOUT, DAY, DAYR, 0, 0, 0) : na
    plutlon = array.get(SHOW_PLANETS, 9) ? AL.getplanet(9, GEOOUT, DAY, DAYR, 0, 0, 0) : na
    float[] longitude_coordinates = array.from(moonlon, merclon, venulon, sunlon, marslon, jupilon, satulon, uranlon, neptlon, plutlon)

// Calculate Ayanamsa (difference between Tropical and Sidereal zodiacs)
calculate_ayanamsa(float timestamp) =>
    float days_since_J2000 = AL.J2000(AL.JDN(timestamp, 0, 0))
    t = days_since_J2000 / 36525
    ayanamsa = 24.042 + 1.39714 * t + 0.00031 * math.pow(t, 2) // Simple Ayanamsa Formula
    ayanamsa := ayanamsa % 360
    ayanamsa < 0 ? ayanamsa + 360 : ayanamsa
    // 24.12


float[] PLANET_LONGS = get_planets(USE_CUSTOM ? CUSTOM_TIME : time)
var float[] NATAL_LONGS = USE_NATAL ? get_planets(NATAL_DATE) : na
var float ayanamsa = ZODIAC_TYPE == "Sidereal" ? calculate_ayanamsa(USE_CUSTOM ? CUSTOM_TIME : time) : 0.0

// |----- Real Rotation Speed -----| //
var int bars = EARTH_DAY_in == 0 ? math.ceil(timeframe.in_seconds("D") / timeframe.in_seconds(timeframe.period)) : na
var float EARTH_DAY = na(bars) ? EARTH_DAY_in : bars



// |----------- CALCULATION START -----------| //
// Custom type for 3D point
type Point3D
    float x
    float y
    float z

// Precompute constants
var float DEG_TO_RAD = math.pi / 180
var float CAMERA_COS = math.cos(CAMERA_ANGLE * DEG_TO_RAD)
var float CAMERA_SIN = math.sin(CAMERA_ANGLE * DEG_TO_RAD)

get_min_distance() =>
    min_distance = 0.0
    for i = 0 to array.size(SHOW_PLANETS) - 1
        if array.get(SHOW_PLANETS, i)
            min_distance := array.get(PLANET_DISTANCES, i)
            break
    min_distance
var MIN_RADIUS = ORBITAL_ALIGN ? USE_NATAL ? math.min(NATAL_ALIGNED_DIST, LIVE_ALIGNED_DIST) : 0 : get_min_distance()

get_max_distance() =>
    max_distance = 0.0
    if not USE_NATAL
        for i = array.size(SHOW_PLANETS) - 1 to 0
            if array.get(SHOW_PLANETS, i)
                max_distance := array.get(PLANET_DISTANCES, i)
                break
    else 
        max_distance := array.last(PLANET_DISTANCES)
    max_distance
var ZODIAC_RADIUS = ORBITAL_ALIGN ? USE_NATAL ? math.max(NATAL_ALIGNED_DIST, LIVE_ALIGNED_DIST) : LIVE_ALIGNED_DIST : get_max_distance()

// Generate sphere points
f_generate_sphere_points(radius) =>
    points = array.new<Point3D>()
    for i = 0 to SEGMENTS
        lat = math.pi * (-0.5 + i / SEGMENTS)
        for j = 0 to SEGMENTS
            lon = 2 * math.pi * j / SEGMENTS
            x = radius * math.cos(lon) * math.cos(lat)
            y = radius * math.sin(lon) * math.cos(lat)
            z = radius * math.sin(lat)
            array.push(points, Point3D.new(x, y, z))
    points


// Rotate point around X-axis (for camera rotation)
rotate_x(Point3D point) =>
    y = point.y * CAMERA_COS - point.z * CAMERA_SIN
    z = point.y * CAMERA_SIN + point.z * CAMERA_COS
    Point3D.new(point.x, y, z)

// Update and project sphere points
update_sphere(Point3D[] points, float center_x, float center_y, float center_z, float tilt, float rotation) =>
    projected_points = array.new<chart.point>()

    cos_rotation = math.cos(rotation)
    sin_rotation = math.sin(rotation)
    cos_tilt = math.cos(tilt * DEG_TO_RAD)
    sin_tilt = math.sin(tilt * DEG_TO_RAD)
    
    for point in points
        rotated_x = point.x * cos_rotation - point.y * sin_rotation
        rotated_y = point.x * sin_rotation + point.y * cos_rotation
        tilted_y = rotated_y * cos_tilt - point.z * sin_tilt
        tilted_z = rotated_y * sin_tilt + point.z * cos_tilt
        
        translated = Point3D.new(rotated_x + center_x, tilted_y + center_y, tilted_z + center_z)
        camera_rotated = rotate_x(translated)
        
        projected_x = camera_rotated.x * SCALE / (camera_rotated.z + SCALE)
        projected_y = camera_rotated.y * SCALE / (camera_rotated.z + SCALE)
        
        array.push(projected_points, chart.point.from_index(GUI_SHIFT + bar_index + int(projected_x), projected_y + SCALE))
    projected_points

// Draw sphere using a single polyline using SEGMENTS resolution
draw_sphere(chart.point[] projected_points, color col) =>
    if SIMPLIFY_PLANETS
        polyline.new(projected_points, line_color=col)
    else
        all_points = array.new<chart.point>()
        
        // Horizontal lines
        for i = 0 to SEGMENTS
            for j = 0 to SEGMENTS
                array.push(all_points, array.get(projected_points, i * (SEGMENTS + 1) + j))
        // Vertical lines
        for i = 0 to SEGMENTS
            for j = 0 to SEGMENTS
                array.push(all_points, array.get(projected_points, j * (SEGMENTS + 1) + i))
        polyline.new(all_points, line_color=col, fill_color = color.new(col, 95))

// Draw each planet's orbital path around Earth (regular and retro)
draw_orbit(float distance, bool retro, color col) =>
    orbit_points = array.new<chart.point>()

    for i = 0 to 180
        angle = (4 * math.pi * i) / 360
        x = distance * math.cos(angle)
        y = distance * math.sin(angle)
        rotated = rotate_x(Point3D.new(x, y, 0))
        projected_x = rotated.x * SCALE / (rotated.z + SCALE)
        projected_y = rotated.y * SCALE / (rotated.z + SCALE)
        array.push(orbit_points, chart.point.from_index(GUI_SHIFT + bar_index + int(projected_x), projected_y + SCALE))
    polyline.new(orbit_points, curved=true, line_color=col, line_style=retro ? line.style_dashed : line.style_solid)

// Draw zodiac lines and labels
draw_zodiac() =>
    center_x = GUI_SHIFT + bar_index
    center_y = SCALE

    for i = 0 to 11
        // Start Aries at 0 degrees
        angle_start = ((i * 30) + 30) * DEG_TO_RAD
        angle_end = (((i + 1) * 30) + 0) * DEG_TO_RAD
        angle_mid = ((i * 30) + 15) * DEG_TO_RAD
        
        // Calculate the start point on the MIN_RADIUS
        x_start = MIN_RADIUS * math.cos(angle_start)
        y_start = MIN_RADIUS * math.sin(angle_start)
        
        // Calculate the end point on the ZODIAC_RADIUS
        x_end = ZODIAC_RADIUS * math.cos(angle_end)
        y_end = ZODIAC_RADIUS * math.sin(angle_end)
        
        rotated_start = rotate_x(Point3D.new(x_start, y_start, 0))
        projected_x_start = rotated_start.x * SCALE / (rotated_start.z + SCALE)
        projected_y_start = rotated_start.y * SCALE / (rotated_start.z + SCALE)
        
        rotated_end = rotate_x(Point3D.new(x_end, y_end, 0))
        projected_x_end = rotated_end.x * SCALE / (rotated_end.z + SCALE)
        projected_y_end = rotated_end.y * SCALE / (rotated_end.z + SCALE)
        
        // Draw lines for zodiac boundaries
        line.new(chart.point.from_index(center_x + int(projected_x_start), center_y + int(projected_y_start)), 
                 chart.point.from_index(center_x + int(projected_x_end), center_y + int(projected_y_end)), 
                 color=ZODIAC_COLOR)
        
        // Calculate the label position in the middle between the two lines
        label_multiplier = ORBITAL_ALIGN and not USE_NATAL ? 1.2 : 1.1
        label_x = (ZODIAC_RADIUS*label_multiplier) * math.cos(angle_mid)
        label_y = (ZODIAC_RADIUS*label_multiplier) * math.sin(angle_mid)
        rotated_label = rotate_x(Point3D.new(label_x, label_y, 0))
        projected_label_x = rotated_label.x * SCALE / (rotated_label.z + SCALE)
        projected_label_y = rotated_label.y * SCALE / (rotated_label.z + SCALE)
        
        // Place the label between zodiac lines
        label.new(center_x + int(projected_label_x), center_y + int(projected_label_y), 
                  array.get(ZODIAC_SIGNS, i), 
                  color=ZODIAC_BACKGROUND, 
                  textcolor=color.white, 
                  style=label.style_text_outline, 
                  size=ZODIAC_SIZE,
                  text_font_family=font.family_monospace,
                  tooltip=array.get(ZODIAC_DESC, i))


// Create and position planet label
create_planet_label(float x, float y, float z, string lbl_text, color col, int i, string natal_var = na) =>
    rotated = rotate_x(Point3D.new(x, y, z))
    projected_x = rotated.x * SCALE / (rotated.z + SCALE)
    projected_y = rotated.y * SCALE / (rotated.z + SCALE)

    lbl_style = natal_var == "label" ? label.style_circle : label.style_text_outline
    lbl_size = natal_var == "label" ? size.tiny : PLANETS_SIZE
    lbl_text_col = not na(natal_var) ? color.new(NATAL_COL, 0) : color.white
    lbl_bg_col = natal_var == "object" ? #012441 : na(natal_var) ? col : col
    label.new(GUI_SHIFT + bar_index + int(projected_x), projected_y + SCALE, lbl_text, color=lbl_bg_col, style=lbl_style, textcolor=lbl_text_col, size = lbl_size, tooltip=array.get(PLANET_DESC, i))

// Calculate angular difference considering wrap-around
angular_difference(float lon_current, float lon_previous) =>
    diff = lon_current - lon_previous
    diff > 180 ? diff - 360 : diff < -180 ? diff + 360 : diff

// Check for various aspects, including reverse aspects
check_aspect(float lon1, float lon2, string aspect_type) =>
    angle = math.min(math.abs(lon1 - lon2), 360 - math.abs(lon1 - lon2))
    
    aspect_angle = switch aspect_type
        'conjunction' => 0
        'opposition'  => 180
        'trine'       => 120
        'square'      => 90
        'sextile'     => 60

    threshold = switch aspect_type
        'conjunction' => CONJ_THRES
        'opposition'  => OPP_THRES
        'trine'       => TRINE_THRES
        'square'      => SQUARE_THRES
        'sextile'     => SEXT_THRES

    aspect_match = math.abs(angle - aspect_angle) <= threshold

// Draw aspect line based on the aspect type
draw_aspect_line(float lon1, float lon2, float dist1, float dist2, string aspect_type) =>
    aspect_color = switch aspect_type
        'conjunction' => CONJ_COL
        'sextile'     => SEXT_COL
        'square'      => SQUARE_COL
        'trine'      => TRI_COL
        'opposition'  => OPP_COL
        
    
    if check_aspect(lon1, lon2, aspect_type)
        // Compute coordinates for both planets
        x1 = dist1 * math.cos(lon1 * DEG_TO_RAD)
        y1 = dist1 * math.sin(lon1 * DEG_TO_RAD)
        x2 = dist2 * math.cos(lon2 * DEG_TO_RAD)
        y2 = dist2 * math.sin(lon2 * DEG_TO_RAD)

        // Rotate and project planet 1
        rotated_p1 = rotate_x(Point3D.new(x1, y1, 0))
        projected_x1 = rotated_p1.x * SCALE / (rotated_p1.z + SCALE)
        projected_y1 = rotated_p1.y * SCALE / (rotated_p1.z + SCALE)

        // Rotate and project planet 2
        rotated_p2 = rotate_x(Point3D.new(x2, y2, 0))
        projected_x2 = rotated_p2.x * SCALE / (rotated_p2.z + SCALE)
        projected_y2 = rotated_p2.y * SCALE / (rotated_p2.z + SCALE)

        // Define the center of the chart
        center_x = GUI_SHIFT + bar_index
        center_y = SCALE

        // Draw line(s) based on aspect type
        if aspect_type == 'conjunction'
            // Draw a single line from the center to the outermost planet
            max_distance = math.max(dist1, dist2)
            dominant_longitude = dist1 > dist2 ? lon1 : lon2
            dominant_x = max_distance * math.cos(dominant_longitude * DEG_TO_RAD)
            dominant_y = max_distance * math.sin(dominant_longitude * DEG_TO_RAD)

            // Rotate and project the dominant planet
            rotated_dominant = rotate_x(Point3D.new(dominant_x, dominant_y, 0))
            projected_dominant_x = rotated_dominant.x * SCALE / (rotated_dominant.z + SCALE)
            projected_dominant_y = rotated_dominant.y * SCALE / (rotated_dominant.z + SCALE)

            // Draw the line from the center to the dominant planet
            line.new(chart.point.from_index(center_x, center_y), 
                     chart.point.from_index(center_x + int(projected_dominant_x), center_y + int(projected_dominant_y)), 
                     color=aspect_color)

        else
            if not (aspect_type == 'opposition') and TRIANGULATE_ASPECTS
                // From Center to Planet 1
                line.new(chart.point.from_index(center_x, center_y),
                      chart.point.from_index(center_x + int(projected_x1), center_y + int(projected_y1)), 
                      color=aspect_color)
                // From Center to Planet 2
                line.new(chart.point.from_index(center_x, center_y), 
                      chart.point.from_index(center_x + int(projected_x2), center_y + int(projected_y2)), 
                      color=aspect_color)
            // From Planet 1 to Planet 2
            line.new(chart.point.from_index(center_x + int(projected_x1), center_y + int(projected_y1)), 
                     chart.point.from_index(center_x + int(projected_x2), center_y + int(projected_y2)), 
                     color=aspect_color)


compute_aspects(lon1, lon2, dist1, dist2) =>
    if MONITOR_CONJUNCTIONS
        draw_aspect_line(lon1, lon2, dist1, dist2, 'conjunction')
    if MONITOR_SEXTILES
        draw_aspect_line(lon1, lon2, dist1, dist2, 'sextile')
    if MONITOR_SQUARES
        draw_aspect_line(lon1, lon2, dist1, dist2, 'square')
    if MONITOR_TRINES
        draw_aspect_line(lon1, lon2, dist1, dist2, 'trine')
    if MONITOR_OPPOSITIONS
        draw_aspect_line(lon1, lon2, dist1, dist2, 'opposition')
        

var earth_points = TOGGLE_EARTH ? f_generate_sphere_points(EARTH_RADIUS) : na
var planets_points = f_generate_sphere_points(PLANETS_RADIUS)


// Update and draw Solar System
draw_criteria = (na(init) and barstate.islast) or (barstate.islast and barstate.isconfirmed)
if draw_criteria
    init := true
    // Clear previous visual elements
    for poly in polyline.all
        polyline.delete(poly)
    for lbl in label.all
        label.delete(lbl)
    for ln in line.all
        line.delete(ln)

    // Draw Earth
    base_rotation = (2 * math.pi * bar_index) / EARTH_DAY
    if TOGGLE_EARTH
        earth_projected = update_sphere(earth_points, 0, 0, 0, EARTH_TILT, base_rotation)
        draw_sphere(earth_projected, color.new(color.blue, 70))
        create_planet_label(0, 0, EARTH_RADIUS, "Earth", color.black, 10)

    // Arrays to store planet data for aspect calculations
    float[] live_planets_longitudes = array.new_float()
    float[] live_planets_distances = array.new_float()
    float[] natal_planets_longitudes = array.new_float()
    float[] natal_planets_distances = array.new_float()
    bool first_iteration = true
    
    // Process each planet
    for i = 0 to array.size(PLANET_NAMES) - 1
        if array.get(SHOW_PLANETS, i)
            // Retrieve planet-specific data
            p_dist = ORBITAL_ALIGN ? LIVE_ALIGNED_DIST : array.get(PLANET_DISTANCES, i)
            p_tilts = array.get(PLANET_TILTS, i)
            p_rotats = array.get(PLANET_ROTATIONS, i)
            p_colors = array.get(PLANET_COLORS, i)
            p_names = array.get(PLANET_NAMES, i)

            // Get pre-calculated planet longitude
            float planet_lon = (PLANET_LONGS.get(i) - ayanamsa) % 360
            
            array.push(live_planets_longitudes, planet_lon)
            array.push(live_planets_distances, p_dist)
            
            // Convert longitude to radians and calculate planet position
            planet_longitude = planet_lon * DEG_TO_RAD
            planet_x = p_dist * math.cos(planet_longitude)
            planet_y = p_dist * math.sin(planet_longitude)

            // Update and draw planet
            planet_projected = update_sphere(planets_points, planet_x, planet_y, 0, p_tilts, base_rotation * p_rotats)
            draw_sphere(planet_projected, p_colors)

            // Determine if planet is in retrograde motion
            planet_retro = angular_difference(array.get(PLANET_LONGS, i), array.get(PLANET_LONGS[1], i)) < 0
            
            create_planet_label(planet_x, planet_y, PLANETS_RADIUS, p_names, planet_retro?#94000098:color.black, i)
            
            // Plot orbital path
            if ORBITAL_ALIGN and first_iteration
                draw_orbit(p_dist, planet_retro, color.new(color.gray, 70))
            else if not ORBITAL_ALIGN
                draw_orbit(p_dist, planet_retro, color.new(p_colors, 80))

            // ==== Natal planet plotting ====
            if not na(NATAL_LONGS)
                float natal_lon = (NATAL_LONGS.get(i) - ayanamsa) % 360
                
                natal_distance = ORBITAL_ALIGN ? NATAL_ALIGNED_DIST : array.last(PLANET_DISTANCES)

                array.push(natal_planets_longitudes, natal_lon)
                array.push(natal_planets_distances, natal_distance)

                // Convert natal longitude to radians and calculate position on the perimeter
                natal_longitude = natal_lon * DEG_TO_RAD
                natal_x = natal_distance * math.cos(natal_longitude)
                natal_y = natal_distance * math.sin(natal_longitude)


                if NATAL_OBJECTS
                    // Update and draw planet
                    natal_projected = update_sphere(planets_points, natal_x, natal_y, 0, p_tilts, base_rotation * p_rotats)
                    draw_sphere(natal_projected, color.new(p_colors, 90))
                    create_planet_label(natal_x, natal_y, 0, p_names, NATAL_COL, i, natal_var = "object")
                else
                    // Create a label for the natal planet
                    create_planet_label(natal_x, natal_y, 0, p_names, p_colors, i, natal_var = "label")

                // Plot natal orbit
                if first_iteration
                    draw_orbit(natal_distance, false, NATAL_COL)

            first_iteration := false

    // Check for aspects and draw lines
    if LIVE_NATAL_ASPECTS and array.size(live_planets_longitudes) >= 1 and array.size(natal_planets_longitudes) >= 1
        // Draw aspects between live and natal planets
        for i = 0 to array.size(live_planets_longitudes) - 1
            for j = 0 to array.size(natal_planets_longitudes) - 1
                live_lon = array.get(live_planets_longitudes, i)
                natal_lon = array.get(natal_planets_longitudes, j)
                live_dist = array.get(live_planets_distances, i)
                natal_dist = array.get(natal_planets_distances, j)

                compute_aspects(live_lon, natal_lon, live_dist, natal_dist)


    else if array.size(live_planets_longitudes) >= 2
        // Draw aspects between live planets only
        for i = 0 to array.size(live_planets_longitudes) - 2
            for j = i + 1 to array.size(live_planets_longitudes) - 1
                lon1 = array.get(live_planets_longitudes, i)
                lon2 = array.get(live_planets_longitudes, j)
                dist1 = array.get(live_planets_distances, i)
                dist2 = array.get(live_planets_distances, j)

                compute_aspects(lon1, lon2, dist1, dist2)

    // Draw zodiac lines and labels
    if USE_ZODIAC
        draw_zodiac()