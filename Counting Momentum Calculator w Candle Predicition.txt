// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Julien_Eche

//@version=5
indicator("Pro Momentum Calculator", overlay=true)

// Inputs
candleType = input.string("Regular", "Candle Type", ["Regular", "Heikin Ashi Candles"], inline="window")
dataView = input.string("Active", "Data View", ["All", "Active"], inline="window")
showCandleCounter = input.bool(true, "Show Candle Counter")
smaLength = input.int(10, "Length", minval=1, group="SMA",inline="SMA")
smaColor = input.color(color.gray, title="Color", group="SMA",inline="SMA")
positionChoice = input.string(position.top_right, title="Location", options=[position.top_right, position.top_center, position.top_left, position.bottom_right, position.bottom_center, position.bottom_left, position.middle_right, position.middle_left], group="Table", inline="table")
tableSize = input.string(size.normal, title="Size", options=[size.auto, size.tiny, size.small, size.normal, size.large, size.huge], group="Table", inline="table")


// Custom SMA function
ema(source, length) =>
    sum = 0.0
    for i = 0 to length - 1
        sum := sum + source[i]
    sum / length

// Calculate SMA 9 with the chosen color
sma9 = ema(close, smaLength)
sma9 := ta.ema(sma9, smaLength)

// Plot SMA on Chart with the chosen color
plot(sma9, color=smaColor, title="SMA 9")

// Variables
var data = matrix.new<int>(1, 4, 0)
var labs = array.new<label>()
var counter = int(na)
tbl = table.new(positionChoice, data.columns() + 1, data.rows() + 1, chart.bg_color, color.black, 1, color(na), 1)

// Price
haClose = hlcc4
haOpen = float(na)
haOpen := na(haOpen[1]) ? (open + close) / 2 : (nz(haOpen[1]) + nz(haClose[1])) / 2
c = candleType == "Candles" ? close : haClose
o = candleType == "Candles" ? open : haOpen
green = c > sma9
red = c < sma9

// Function to update labels
Numbers(c, b) =>
    tr = ta.tr
    ema100 = ta.ema(tr, 100)
    if showCandleCounter
        lab = label.new(bar_index, b ? low - ema100 : high + ema100, str.tostring(c + 1), color=na, style=b ? label.style_label_up : label.style_label_down, textcolor=green ? color.teal : red ? color.rgb(230, 103, 103, 10) : chart.fg_color)
        labs.unshift(lab)

// Counter Code
if green and green[1]
    counter += 1
    if data.rows() <= counter
        data.add_row(counter, array.from(1, 0, 0, 0))
    else
        data.set(counter, 0, data.get(counter, 0) + 1)
    data.set(counter - 1, 2, data.get(counter - 1, 2) + 1)
else if red and red[1]
    counter += 1
    if data.rows() <= counter
        data.add_row(counter, array.from(0, 1, 0, 0))
    else
        data.set(counter, 1, data.get(counter, 1) + 1)
    data.set(counter - 1, 3, data.get(counter - 1, 3) + 1)

// Call the Numbers function
Numbers(counter, green ? true : false)

// Clear labels when conditions are not met
if not (green and green[1]) and not (red and red[1])
    counter := 0
    for element in labs
        element.delete()
    labs.clear()

// Table
if barstate.islast
    headerColor = color.rgb(45, 45, 45)
    headerTextColor = color.rgb(255, 255, 255)
    tbl.cell(0, 0, "Consecutive Candles", bgcolor=headerColor, text_color=headerTextColor, text_size=tableSize)
    tbl.cell(1, 0, "Candles Above SMA 9", bgcolor=headerColor, text_color=headerTextColor, text_size=tableSize)
    tbl.cell(2, 0, "Candles Below SMA 9", bgcolor=headerColor, text_color=headerTextColor, text_size=tableSize)
    tbl.cell(3, 0, "Upcoming Green Candle", bgcolor=headerColor, text_color=headerTextColor, text_size=tableSize)
    tbl.cell(4, 0, "Upcoming Red Candle", bgcolor=headerColor, text_color=headerTextColor, text_size=tableSize)
    for i = 0 to data.rows() - 1
        x = i
        if dataView != "All"
            x := counter
        total = data.get(x, 2) + data.get(x, 3)
        predictionGreen = (data.get(x, 2) / total) * 100
        predictionRed = (data.get(x, 3) / total) * 100
        posColor = color.new(color.teal, 10)
        negColor = color.rgb(230, 103, 103, 10)
        bgColor = color.from_gradient(value=i, bottom_value=1, top_value=20, bottom_color=color.new(color.teal, 100), top_color=color.new(#7e7e7e, 0))
        rowTextColor = chart.fg_color
        tbl.cell(0, x + 1, str.tostring(x + 1), bgcolor=counter == x and green ? posColor : counter == x and red ? negColor : bgColor, text_color=rowTextColor, text_size=tableSize)
        tbl.cell(1, x + 1, str.tostring(data.get(x, 0)), bgcolor=counter == x and green ? posColor : bgColor, text_color=rowTextColor, text_size=tableSize)
        tbl.cell(2, x + 1, str.tostring(data.get(x, 1)), bgcolor=counter == x and red ? negColor : bgColor, text_color=rowTextColor, text_size=tableSize)
        tbl.cell(3, x + 1, str.tostring(predictionGreen, format.percent), bgcolor=counter == x and predictionGreen > predictionRed ? posColor : bgColor, text_color=rowTextColor, text_size=tableSize)
        tbl.cell(4, x + 1, str.tostring(predictionRed, format.percent), bgcolor=counter == x and predictionGreen < predictionRed ? negColor : bgColor, text_color=rowTextColor, text_size=tableSize)
        if dataView != "All"
            break

barcolor(c > sma9 and c[1] > sma9 ? color.new(color.teal, 10) : c < sma9 and c[1] < sma9 ? color.rgb(230, 103, 103, 10) : na)
