
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © KioseffTrading

// @version = 5

indicator(
  
  "Delta Ladder"                  , 
  precision             = 13            , 
  format                = format.volume , 
  explicit_plot_zorder  = true          ,
  max_labels_count      = 500           ,
  max_boxes_count       = 500           ,
  max_lines_count       = 500           ,
  max_bars_back         = 5000           ,


  overlay               = true     


  )



[m, m1, m2, m3, m4, m5, m6, m7]        
                                       = request.security_lower_tf(syminfo.tickerid, "1", [close, close[1], volume, high, low, hlc3, open, volume[1]])


classix                                = input.string(defval = "Classic", title = "Data Display Method", options = ["Classic", "Pure Ladder", "On Bar"])
perc                                   = 0.3 
barDiv                                 = input.int (defval = 10, minval = 4, maxval = 499, title = "Divide Bars Into How Many Rows ?", group = "Rows Per Bar")
showDelt                               = input.bool(defval = true , title = "Show Delta Values", group = "Aesthetics 1", inline = "1")
total                                  = input.bool(defval = false, title = "Delta Total Above Bar", group = "Aesthetics 1", inline = "1")
boxMerge                               = input.bool(defval = false, title = "Merge Delta Boxes", group = "Aesthetics 1", inline = "2")
hide                                   = input.bool(defval = false, title = "Hide Total Delta Labels", group = "Aesthetics 1", inline = "2")
assume                                 = input.bool(defval = false, title = "Use Volume Assumption", group = "Volume Assumption" ,
                                         tooltip = 'When This Setting Is Selected, the Script Will Not Record “0” Buy Volume or “0” Sell Volume at a Level Where Green Bars 
                                         Formed and No Red Bars Formed, or Where Only Red Bars Formed and No Green Bars Formed. If a Level Were Recorded With All “Buy Volume” - 
                                         The Script Will Assume 40% Of the Buy Volume Was Sell Volume. Vice Versa for a Level Where Only “Sell Volume” Was Recorded 
                                         - The Script Will Assume 40% Of the “Sell Volume” Was “Buy Volume”. This Assumption May or May Not Help the Indicator 
                                         Better Replicate Volume Delta Indicators on Other Charting Platforms. 
                                         If You Do Not Want to Adhere to This Assumption - Simply Deselect This Setting')
lastBar                                = input.bool(defval = false, title = "Last Bar Calculation Only", group = "Calculate on Last Bar Only")
blackBox                               = input.bool(defval = false, title = "Black Background", 
                                         group = "Aesthetics 2
                                         ")
textSize                               = input.string(defval = "Small", title = "Delta Box Text Size", options = ["Auto", "Tiny", "Small", "Normal", "Large", "Huge"],    
                                         group = "Aesthetics 2
                                         ")
textSize2                              = input.string(defval = "Tiny", title = "Total Delta Text Size", options = ["Auto" ,"Tiny", "Small", "Normal", "Large", "Huge"],    
                                         group = "Aesthetics 2
                                         ")
fnt                                    = input.string(defval = "Default", title = "Font Type", options = ["Default", "Monospace"], 
                                         group = "Aesthetics 2
                                         ")


c                                       = input.color(defval = #26c6da, title = 'Delta "Up" Color'                , group = "Colors", inline = "2")
c1                                      = input.color(defval = color.red, title = 'Delta "Down" Color'               , group = "Colors", inline = "3")
c2                                      = input.color(defval = color.rgb(148, 139, 57), title = 'General "POC" Color', group = "Colors", inline = "3")
c3                                      = input.color(defval = #26c6da, title = 'Candle "Up" Color'               , group = "Colors", inline = "2")
c4                                      = input.color(defval = color.red, title = 'Candle "Down" Color'              , group = "Colors", inline = "4")
n                                       = bar_index

fonT = switch fnt
    
    "Default"          => font.family_default
    "Monospace"        => font.family_monospace

sz = switch textSize
    "Auto"             => size.auto
    "Tiny"             => size.tiny
    "Small"            => size.small
    "Normal"           => size.normal
    "Large"            => size.large
    "Huge"             => size.huge


sz2 = switch textSize2
    
    "Auto"             => size.auto
    "Tiny"             => size.tiny
    "Small"            => size.small
    "Normal"           => size.normal
    "Large"            => size.large
    "Huge"             => size.huge



lettersBoxClassic                   = array.new_box    (), boxCo                             = array.new_float()
var matrixPlace                     = matrix.new<float>(0, barDiv), var matrixLevels         = matrix.new<float>(0, barDiv)
matrixLevelsFin                     = matrix.new<float>(0, barDiv), matrixFin                = matrix.new<float>(0, barDiv)

colorChange2(x, y) => 
    box.set_bgcolor(x, y)
    if boxMerge == false 
        box.set_border_color(x, chart.bg_color)
finTim   = n == last_bar_index - math.round(500 / barDiv)
timeCond = last_bar_index - n <= math.round(500 / barDiv)
div      = (high - low) / barDiv
var int firstBar                    = math.round(1e8)
levelsCount                         = array.new_float()

if timeCond 
    
    if finTim

        firstBar := n
   

if array.size(m2) > 0 and bar_index >= firstBar
    for x = 0 to barDiv - 1
        array.push(levelsCount, low + (x * div))
        array.push(boxCo, 1)

    array.sort(levelsCount, order.ascending)

    for i = 0 to array.size(levelsCount) - 1
        array.push(lettersBoxClassic, box.new(n, array.get(levelsCount, i) + div, n + 1, array.get(levelsCount, i),
                                         bgcolor = color.new(color.white, 100), text = "", 
                                         text_size = sz,
                                         text_color = showDelt == true ? color.white : #ffffff00, text_font_family = fonT,
                                         border_color = na,
                                         border_width = 1, 
                                         text_halign = text.align_center )   )

volCount = matrix.new<float>(array.size(levelsCount), 2, 0)

if array.size(boxCo) > 1 
  and array.sum(boxCo) == array.size(levelsCount)  
    boxTrack2 = array.new_float(array.size(m2), 0.0)    
    
    if array.size(m2) > 0
        
        
        for nx = 0 to array.size(m2) - 1
            for x = 0 to array.size(levelsCount) - 1
                if array.get(levelsCount, x) <= array.get(m3, nx) and array.get(levelsCount, x) >= array.get(m4, nx)
                    array.set(boxTrack2, nx, array.get(boxTrack2, nx) + 1)  
        
        
        if array.sum(boxTrack2) > 0 
            for x = 0 to array.size(levelsCount) - 1
                for nx = 0 to array.size(m2) - 1
                    if array.get(boxTrack2, nx) != 0 and array.get(levelsCount, x) <= array.get(m3, nx) and array.get(levelsCount, x) >= array.get(m4, nx)  
                        if array.get(m, nx) >= array.get(m6, nx)
                            matrix.set(volCount, x, 0, matrix.get(volCount, x, 0) +  (array.get(m2, nx) / array.get(boxTrack2, nx)))
                        else 
                            
                            matrix.set(volCount, x, 1, matrix.get(volCount, x, 1) +  (array.get(m2, nx) / array.get(boxTrack2, nx)))

        for i = 1 to array.size(levelsCount) - 1
            for x = 0 to array.size(m2) - 1
                if array.get(m3, x) < array.get(levelsCount, i) and array.get(m4, x) > array.get(levelsCount, i - 1)
                    if array.get(m, x) >= array.get(m6, x)
                        matrix.set(volCount,  i - 1, 0, matrix.get(volCount, i - 1, 0) + array.get(m2, x))

                    else 
                        matrix.set(volCount,  i- 1, 1, matrix.get(volCount, i - 1, 1) + array.get(m2, x))

        for x = 0 to array.size(m2) - 1 
            if array.get(m4, x) > array.get(levelsCount, array.size(levelsCount) - 1)
                if array.get(m, x) >= array.get(m6, x)
                    matrix.set(volCount, matrix.rows(volCount) - 1, 0, matrix.get(volCount, matrix.rows(volCount) - 1, 0) +  array.get(m2, x))

                else 
                    matrix.set(volCount, matrix.rows(volCount) - 1, 1, matrix.get(volCount, matrix.rows(volCount) - 1, 1) +  array.get(m2, x))

if array.size(lettersBoxClassic) > 1


    for i = 0 to array.size(lettersBoxClassic) - 1
        
        if box.get_bottom(array.get(lettersBoxClassic, i)) > high  
            box.set_bgcolor(array.get(lettersBoxClassic, i), na)

        if assume == true 
            if matrix.get(volCount, i, 0) == 0 and matrix.get(volCount, i, 1) > 0
                matrix.set(volCount, i, 0, matrix.get(volCount, i, 1) * .40)
                matrix.set(volCount, i, 1, matrix.get(volCount, i, 1) * .60)

            else if matrix.get(volCount, i, 0) > 0 and matrix.get(volCount, i, 1) == 0
                matrix.set(volCount, i, 1, matrix.get(volCount, i, 0) * .40)
                matrix.set(volCount, i, 0, matrix.get(volCount, i, 0) * .60)


if matrix.rows(volCount) > 0  
    matrix.add_row(matrixPlace)
    matrix.add_row(matrixLevels)
    for i = 0 to matrix.rows(volCount) - 1
        matrix.set(matrixPlace, matrix.rows(matrixPlace) - 1, i, matrix.get(volCount, i, 0) - matrix.get(volCount, i, 1))
        matrix.set(matrixLevels, matrix.rows(matrixLevels) - 1, i, array.get(levelsCount, i))

type various
    
    matrix<int>  xCoords
    array <box>  priceBox
    matrix<line> priceLine
    matrix<float> MAX
    matrix<float> MIN
    array <box> finBox 
    array <int> nLevel
    array <int> nLevel2
    matrix<float> value

if array.size(lettersBoxClassic) > 0 
    for i = 0 to array.size(lettersBoxClassic) - 1
        box.delete(array.shift(lettersBoxClassic))


if barstate.islast 

    var label [] finalBox                         = array.new_label()


    var draw  = various.new(

                 matrix.new<int>(1, 8), 
                 array.new_box(), 
                 matrix.new<line>(math.round(500/barDiv), 2))

    calcCoord = various.new(

                 MAX    = matrix.new<float>(0, barDiv, na), 
                 MIN    = matrix.new<float>(0, barDiv, na), 
                 value  = matrix.new<float>(0, 4),
                 finBox = array.new_box(), 
                 nLevel = array.new_int(), nLevel2 = array.new_int())



    if array.size(draw.priceBox) > 0 
        for i = 0 to array.size(draw.priceBox) - 1
            box.delete(array.shift(draw.priceBox))
    
    if array.size(finalBox) > 0 
        for i = 0 to array.size(finalBox) - 1
            label.delete(array.shift(finalBox))
    
    if lastBar
        if array.size(box.all) > 0 
            for i = 0 to array.size(box.all) - 1
                box.delete(array.shift(box.all))

    n1 = 0, n2 = 0
    switch classix
    
        "Pure Ladder" => n1 := 1 , n2 := 1
        =>               n1 := 13, n2 := 5
    
    array.push(calcCoord.nLevel,  array.size(calcCoord.nLevel ) == 0 and classix == "Pure Ladder" ? n : n + n1), 
    array.push(calcCoord.nLevel2, array.size(calcCoord.nLevel2) == 0 and classix == "Pure Ladder" ? n : n + n2), 
    array.push(calcCoord.nLevel2, n[n2]), array.push(calcCoord.nLevel , n[n1])
    
    for i = 2 to math.round(500 / barDiv)
        array.push(calcCoord.nLevel, array.get(calcCoord.nLevel, i - 1) - n1)
        array.push(calcCoord.nLevel2, array.get(calcCoord.nLevel, i - 1) - n2)
    
    for i = matrix.rows(matrixPlace) - 1 to matrix.rows(matrixPlace) - math.round(500 / barDiv)
    
        matrix.add_row(matrixFin)
        matrix.add_row(matrixLevelsFin)
    
        for x = 0 to matrix.columns(matrixPlace) - 1
            
            matrix.set(matrixFin, matrix.rows(matrixFin) - 1, x, matrix.get(matrixPlace, i, x))
            matrix.set(matrixLevelsFin, matrix.rows(matrixLevelsFin) - 1, x, matrix.get(matrixLevels, i, x))
    
    float [] finBoxFloat = array.new_float(), float [] finBoxFloat2 = array.new_float(matrix.rows(matrixFin), 0)
    
    if array.size(calcCoord.finBox) > 0 
        for i = 0 to array.size(calcCoord.finBox) - 1
            box.delete(array.shift(calcCoord.finBox))
    
    for i = matrix.rows(matrixFin) - 1 to 0
        matrix.add_row(calcCoord.MIN), matrix.add_row(calcCoord.MAX)
    
    for i = matrix.rows(matrixFin) - 1 to 0
        for x = matrix.columns(matrixFin) - 1 to 0
            str = ""
            switch math.sign(matrix.get(matrixFin, i, x))
                0 or 1 => str := "+", matrix.set(calcCoord.MAX, i, x, matrix.get(matrixFin, i, x))
                =>        str :=  "", matrix.set(calcCoord.MIN, i, x, matrix.get(matrixFin, i, x))
            
            calc = ((high[i] - low[i]) / barDiv)
            x1 = 0, x2 = 0, x3 = matrix.get(matrixFin, i, x) >= 0
            
            if classix == "Classic"
                if i == 0
                    x1 := x3 ? 4 : 2,  x2 := x3 ? 10 : 8
                else
                    x1 := x3 ? 10 : 8, x2 := x3 ? 4 : 2
            else if classix == "On Bar"
                if i == 0 
                    x1 := x3 ? 0 : -5, x2 := x3 ? 5 : 0 
                else 
                    x1 := x3 ? 5  : 0, x2 := x3 ? 0 : -5
            else 
                x1 := 0, x2 := 1
            
            array.push(calcCoord.finBox, box.new(array.get(calcCoord.nLevel, i) + x1, matrix.get(matrixLevelsFin, i, x) + calc, 
                                         array.get(calcCoord.nLevel2, i) + x2, matrix.get(matrixLevelsFin, i, x),
                                         text = str + str.tostring(matrix.get(matrixFin, i, x), "###,###.00"), 
                                         border_color = boxMerge == false ? chart.bg_color : na, 
                                         bgcolor = color.yellow, 
                                         text_color =showDelt == true ? color.white : #ffffff00, 
                                         text_size = sz
                                         ))

            array.push(finBoxFloat,    matrix.get(matrixFin, i, x))
            array.set(finBoxFloat2, i, array.get(finBoxFloat2, i) + matrix.get(matrixFin, i, x))
            

    matrix.set(draw.xCoords, 0, 6, 0), matrix.set(draw.xCoords, 0, 7, math.round(1e8))
    
    for i = matrix.rows(matrixFin) - 1 to 0
        
        subUp = matrix.submatrix(calcCoord.MAX, i, i + 1, 0, matrix.columns(calcCoord.MAX))
        subDn = matrix.submatrix(calcCoord.MIN, i, i + 1, 0, matrix.columns(calcCoord.MIN))
        
        for x = 0 to matrix.columns(subUp) - 1
            
            matrix.add_row(calcCoord.value)
            matrix.set(calcCoord.value, matrix.rows(calcCoord.value) - 1, 0, nz(matrix.max(subUp)))
            matrix.set(calcCoord.value, matrix.rows(calcCoord.value) - 1, 1, nz(matrix.min(subUp)))
            matrix.set(calcCoord.value, matrix.rows(calcCoord.value) - 1, 2, nz(matrix.min(subDn)))
            matrix.set(calcCoord.value, matrix.rows(calcCoord.value) - 1, 3, nz(matrix.max(subDn)))
            matrix.set(draw.xCoords, 0, 7, math.round(math.min(matrix.get(draw.xCoords, 0, 7), matrix.get(matrixLevelsFin, i, x) * .995)))
    
    for i = 0 to array.size(calcCoord.finBox) - 1
        var iTrack = .0
        if array.get(finBoxFloat, i) >= 0
        
            if matrix.get(calcCoord.value, i, 0) != matrix.get(calcCoord.value, i, 1)
                box.set_bgcolor(array.get(calcCoord.finBox, i), color.from_gradient(array.get(finBoxFloat, i), matrix.get(calcCoord.value, i, 1), 
                 matrix.get(calcCoord.value, i, 0),
                 color.new(c, 90), color.new(c, 10)))
            
            else 
            
                box.set_bgcolor(array.get(calcCoord.finBox, i), color.new(c, 10))
            
            if matrix.get(calcCoord.value, i, 0) >= math.abs(matrix.get(calcCoord.value, i, 2)) and iTrack != array.get(finBoxFloat, i)
                if array.get(finBoxFloat, i) == matrix.get(calcCoord.value, i, 0)
                    box.set_border_color(array.get(calcCoord.finBox, i), c2)
                    iTrack := array.get(finBoxFloat, i)
        else 
            
            if matrix.get(calcCoord.value, i, 2) != matrix.get(calcCoord.value, i, 3)
                box.set_bgcolor(array.get(calcCoord.finBox, i), color.from_gradient(array.get(finBoxFloat, i), 
                 matrix.get(calcCoord.value, i, 2), matrix.get(calcCoord.value, i, 3),
                 color.new(c1, 10), color.new(c1, 90)))
            
            else 
            
                box.set_bgcolor(array.get(calcCoord.finBox, i), color.new(c1, 10))
            
            if math.abs(matrix.get(calcCoord.value, i, 2)) >= matrix.get(calcCoord.value, i, 0) and iTrack != array.get(finBoxFloat, i)
                if array.get(finBoxFloat, i) == matrix.get(calcCoord.value, i, 2)
                    box.set_border_color(array.get(calcCoord.finBox, i), c2) 
                    iTrack := array.get(finBoxFloat, i)


    if hide == false 
        for i = matrix.rows(matrixFin) - 1 to 0
            
            preemptive = switch timeframe.isintraday
                true => " " + str.tostring(hour[i]) + ":" + str.tostring(minute[i])
                => ""
            append = "", col = color(na)
           
            switch math.sign(array.get(finBoxFloat2, i))
                0 or 1 => append := "+", col := c
                =>        append := "" , col := c1
           
            array.push(finalBox, label.new(array.get(calcCoord.nLevel, i), total == false ? matrix.get(draw.xCoords, 0, 7) : high[i] * 1.005, text =  
             "                            " + append + str.tostring(array.get(finBoxFloat2, i), "###,###.00")  + "\n                          (" + str.tostring(month)   + 
                 "/" + str.tostring(dayofmonth) + ")" + preemptive,
                 size = sz2, style = label.style_label_center, color = #ffffff00, textcolor = col, text_font_family = fonT))
    
    if classix != "Pure Ladder"
        if array.size(draw.priceBox) > 0 
            for i = 0 to array.size(draw.priceBox) - 1
                box.delete(array.shift(draw.priceBox))
    
        array.push(
             draw.priceBox, box.new(n + 5, math.max(close, open), n + 13, math.min(close, open), 
                                             border_color = close > open ? c3 : c4, 
                                             bgcolor      = close > open ? 
                                             color.new(c3, 97) : color.new(c4, 97),
                                             border_width = 2
             ))
        array.push(
             draw.priceBox, box.new(n[13], math.max(close[1], open[1]), n[5], math.min(close[1], open[1]), 
                                             border_color = close[1] > open[1] ? c3 : c4, 
                                             bgcolor      = close[1] > open[1] ? 
                                             color.new(c3, 97) : color.new(c4, 97),
                                             border_width = 2
             ))
        for i = 2 to math.round(500/barDiv)
            array.push(
             draw.priceBox, box.new(box.get_left(array.get(draw.priceBox, i - 1)) - 13, close[i], 
                                             box.get_left(array.get(draw.priceBox, i - 1)) - 5, 
                                             open[i], 
                                             border_color = close[i] > open[i] ? c3 : c4,
                                             bgcolor      = close[i] > open[i] ? 
                                             color.new(c3, 97) : color.new(c4, 97), 
                                             border_width = 2
             ))
        if matrix.rows(draw.priceLine) > 0 
            
            for i = 0 to matrix.rows(draw.priceLine) - 1
                line.delete(matrix.get(draw.priceLine, i, 0))
                line.delete(matrix.get(draw.priceLine, i, 1))
            
            for i = 0 to matrix.rows(draw.priceLine) - 1
                x = math.round(math.avg(box.get_left(array.get(draw.priceBox, i)), box.get_right(array.get(draw.priceBox, i))))
                matrix.set(draw.priceLine, i, 0, line.new(x, high[i], x, math.max(open[i], close[i]), color =close[i] > open[i] ? c3 : c4, width = 2))
                matrix.set(draw.priceLine, i, 1, line.new(x, low[i] , x, math.min(open[i], close[i]), color =close[i] > open[i] ? c3 : c4, width = 2))   

    if lastBar 

        if array.size(calcCoord.finBox) > barDiv
            for i = 0 to array.size(calcCoord.finBox) - (barDiv + 1)
                box.delete(array.shift(calcCoord.finBox))
        
        if array.size(draw.priceBox) > 1
            for i = 0 to array.size(draw.priceBox) - 2
                box.delete(array.pop(draw.priceBox))
        
        if matrix.rows(draw.priceLine) > 1
            matrix.reverse(draw.priceLine)
            for i = 0 to matrix.rows(draw.priceLine) - 2
                line.delete(matrix.get(draw.priceLine, i, 0))
                line.delete(matrix.get(draw.priceLine, i, 1))
            matrix.reverse(draw.priceLine)
        
        if array.size(finalBox) > 1
            for i = 1 to array.size(finalBox) - 1
                label.delete(array.shift(finalBox))
        
        if classix == "Pure Ladder"
            if array.size(calcCoord.finBox) > 0 
                for i = 0 to array.size(calcCoord.finBox) - 1
                    box.set_left(array.get(calcCoord.finBox, i), bar_index + 1), box.set_left(array.get(calcCoord.finBox, i), bar_index + 2)



bgcolor(blackBox ? #000000 : na, offset = 20)