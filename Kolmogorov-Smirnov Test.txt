// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Hachann
// Thanks mostly to the NEDL Youtube channel and also balipour.
//@version=4

study("Kolmogorov-Smirnov Test", "KS-t", precision = 3)

// Variables

LR = "Log Returns"
CLOSE = "Close"

// Inputs

src          = input(LR, "Select Source for KS-Test", input.string, options = [LR,CLOSE])
n            = input(252, "Lookback", input.integer)

// Source selection

x = src == LR ? log(close/close[1])*100 : close

// Error function, doesn't exist in TradingView for now

erf(x) =>
    sign = x >=0 ? 1 : -1
    absx = abs(x)
    // Constantes
    a1 =  0.254829592
    a2 = -0.284496736
    a3 =  1.421413741
    a4 = -1.453152027
    a5 =  1.061405429
    p  =  0.3275911
    // Calcul
    t = 1.0/(1.0 + p*absx)
    y = 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-absx*absx)
    sign*y

// Kolmogorov-Smirnov Test for Normal Distribution Assumption

f_KS(x,n) =>
    // Unsorted source array
    src_unsorted = array.new_float(0)
    for i = 0 to n-1
        array.push(src_unsorted, x[i])
    // Creating a sorted source for future calc
    array.sort(src_unsorted, order.ascending)
    src_sorted = array.new_float(0)
    src_sorted := src_unsorted
    // Theorical CDF parameters
    mean = sma(x, n)
    s = array.new_float(0)
    for i = 0 to n-1 
        array.push(s,pow(x[i]-mean,2))
    sum = array.sum(s)
    variance = sum/(n-1)
    sd = sqrt(variance) //Sqrt of variance = sd
    // Empirical CDF
    e_cdf = array.new_int(0)
    for i = 0 to n-1
        array.push(e_cdf, (array.indexof(src_sorted, x) + i)/n) // Funny way to get the Ranking of an Array, needs to be verified.
    diff = array.new_float(0) // = ABS(Empirical CDF - Theorical CDF) per ascending sorted source.
    for i = 0 to n-1
        array.push(diff,abs(array.get(e_cdf,i) - 0.5*(1+erf((array.get(src_sorted,i)-mean/(sqrt(2)*sd))))))
    supremum = array.max(diff)
    KST = supremum * sqrt(n)
    pValue = exp(-pow(supremum,2) * n)
    [KST, pValue]

// Plotting
[KST,pValue] = f_KS(x,n)
kst_color = KST < 1.517 ? #01baef : #e91e63 // 1.517 is the Critical Value for KS-t (1%). If Green, then Normal Distribution assumption is verified.
plot(KST, title="KS-Test", color=kst_color, style=plot.style_columns)
plot(pValue,title="Probability of Being Normaly Distribued", display=display.none)