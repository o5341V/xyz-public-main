// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© LuxAlgo

//@version=5
indicator("Seasonality Widget [LuxAlgo]", "LuxAlgo - Seasonality Widget")
//---------------------------------------------------------------------------------------------------------------------}
//Settings
//---------------------------------------------------------------------------------------------------------------------{
granularity = input.string('Day Of Month', 'Granularity'
  , options = ['Hour', 'Day Of Week', 'Day Of Month', 'Month', 'Day Of Year'])

fromDate = input.time(0, 'From Date')

//Data
analyze = input.string('Price Change (%)'
  , options = ['Price Change', 'Price Change (%)', 'Price Change (Sign)', 'Range', 'Price - SMA', 'Volume', 'Volume - SMA']
  , group = 'Data')

smaLength = input.int(14, 'SMA Length', minval = 2, group = 'Data')

statistic = input.string('Mean'
  , options = ['Mean', 'Median', 'Max', 'Min', 'Max-Min Average'], group = 'Data')

//Filter
filterGranularity = input.string('None', 'Filter Granularity', options = ['None', 'Hour', 'Day Of Week', 'Day Of Month', 'Month', 'Year'], group = 'Filter')
filterInput = input.string('', 'Numerical Filter Input', group = 'Filter'
  , tooltip = 'Determines which of the selected hour/day of week/day of month/month/year to exclude depending on the selected Filter Granularity.\n\nOnly numerical inputs can be provided.\nMultiple values are supported and must be comma separated.')

//Style
bullCss    = input(#089981, 'Bullish Color', inline = 'bull_avg', group = 'Style')
bullAvg    = input(true, 'Average'           , inline = 'bull_avg', group = 'Style')
bullAvgCss = input(color.gray, ''          , inline = 'bull_avg', group = 'Style')

bearCss    = input(#f23645, 'Bearish Color', inline = 'bear_avg', group = 'Style')
bearAvg    = input(true, 'Average'           , inline = 'bear_avg', group = 'Style')
bearAvgCss = input(color.gray, ''          , inline = 'bear_avg', group = 'Style')

highlightNow = input(true, 'Highlight Current Period', group = 'Style')

useGradient = input(true, 'Use Gradient', group = 'Style')

labelSize = input.string('Small', 'Label Size'
  , options = ['Auto', 'Tiny', 'Small', 'Normal']
  , group = 'Style')

//---------------------------------------------------------------------------------------------------------------------}
//UDT
//---------------------------------------------------------------------------------------------------------------------{
type vector
    array<float> v

//---------------------------------------------------------------------------------------------------------------------}
//Function
//---------------------------------------------------------------------------------------------------------------------{
var filter_values = str.split(filterInput, ',')

analyzed_data()=>
    out = switch analyze
        'Price Change'        => close - close[1]
        'Price Change (%)'    => (close - close[1]) / close[1] * 100
        'Price Change (Sign)' => 50 * math.sign(close - close[1]) + 50
        'Range'               => high - low
        'Price - SMA'         => close - ta.sma(close, smaLength)
        'Volume'              => volume
        'Volume - SMA'        => volume - ta.sma(volume, smaLength)

datamap()=>
    var data_map = map.new<int, vector>()

    freq = switch granularity
        'Hour'         => hour
        'Day Of Week'  => dayofweek
        'Day Of Month' => dayofmonth
        'Month'        => month
        'Day Of Year'  => year

    //Filter
    filter_freq = switch filterGranularity
        'Hour'         => hour
        'Day Of Week'  => dayofweek
        'Day Of Month' => dayofmonth
        'Month'        => month
        'Year'         => year

    filter = false
    if filterGranularity != 'None'
        for element in filter_values
            if element == str.tostring(filter_freq)
                filter := true
                break

    output_data = analyzed_data()

    if time >= fromDate and not na(output_data) and not filter
        if not data_map.keys().includes(freq)
            data_map.put(freq, vector.new(array.new<float>(0)))

        if data_map.keys().includes(freq)
            data_map.get(freq).v.push(output_data)

    barstate.islast ? data_map : na

statistic(data_array)=>
    out = switch statistic
        'Mean'            => data_array.avg()
        'Median'          => data_array.median()
        'Max'             => data_array.max()
        'Min'             => data_array.min()
        'Max-Min Average' => math.avg(data_array.max(), data_array.min())

//---------------------------------------------------------------------------------------------------------------------}
//Request Data
//---------------------------------------------------------------------------------------------------------------------{
var axis = line.new(na,na,na,na, color = chart.fg_color)
var bull_avg_lvl  = line.new(na,na,na,na, color = bullAvgCss, style = line.style_dashed)
var bear_avg_lvl  = line.new(na,na,na,na, color = bearAvgCss, style = line.style_dashed)

var tf = switch granularity
    'Hour'         => '60'
    'Day Of Week'  => 'D'
    'Day Of Month' => 'D'
    'Month'        => 'M'
    'Day Of Year'  => 'D'

var ref = switch granularity
    'Hour'         => array.from('12am', '1am', '2am', '3am', '4am', '5am', '6am', '7am', '8am', '9am', '10am', '11am', '12pm', '1pm', '2pm', '3pm', '4pm', '5pm', '6pm', '7pm', '8pm', '9pm', '10pm', '11pm')
    'Day Of Week'  => array.from('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')
    'Month'        => array.from('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December')

var label_size = switch labelSize
    'Auto'   => size.auto
    'Tiny'   => size.tiny
    'Small'  => size.small
    'Normal' => size.normal

chart_freq = switch granularity
    'Hour'         => hour
    'Day Of Week'  => dayofweek
    'Day Of Month' => dayofmonth
    'Month'        => month
    'Day Of Year'  => year

data_map = request.security(syminfo.tickerid, tf, datamap(), lookahead = barmerge.lookahead_on)

n = bar_index

//Raise error
if barstate.islast and na(data_map)
    runtime.error('No data available, try using a timeframe in accordance to the selected granularity.')

//Delte previous graphical elements
for element in box.all
    element.delete()
for element in label.all
    element.delete()

//Set graphical elements
if barstate.islast
    bull = 0., bull_den = 0
    bear = 0., bear_den = 0

    keys = data_map.keys()
    
    //Yearly granularity is already sorted
    if granularity == 'Day Of Year'
        keys.reverse()
    else
        keys.sort(order.descending)

    //Set bars and get averages
    x1 = n
    float min = na
    float max = na
    threshold = analyze == 'Price Change (Sign)' ? 50. : 0.

    for element in keys
        output = statistic(data_map.get(element).v)
        max := math.max(output, nz(max, output))
        min := math.min(output, nz(min, output))

        //Set bars
        box.new(x1-2, output, x1, threshold, na, bgcolor = output > threshold ? bullCss : bearCss)

        //Positive/Negative delta averages
        bull += output > threshold ? output : 0, bull_den += output > threshold ? 1 : 0 
        bear += output < threshold ? output : 0, bear_den += output < threshold ? 1 : 0 

        x1 -= 3

    //Set deltas averages
    if bullAvg
        bull_avg_lvl.set_xy1(n, bull / bull_den)
        bull_avg_lvl.set_xy2(x1+1, bull / bull_den)

    if bearAvg
        bear_avg_lvl.set_xy1(n, bear / bear_den)
        bear_avg_lvl.set_xy2(x1+1, bear / bear_den)
    
    //Horizontal Axis
    histbase = switch analyze
        'Volume' => min
        'Range' => min
        => math.min(min, 0)

    axis.set_xy1(n, histbase)
    axis.set_xy2(x1+1, histbase)

    //Set labels
    x1 := n
    for [index, element] in keys
        x_label = granularity == 'Day Of Year' or granularity == 'Day Of Month' ? str.tostring(element) 
          : granularity == 'Hour' ? ref.get(element) 
          : ref.get(element-1)
        
        //Display x axis labels
        label.new(x1-1, histbase, x_label
          , textcolor = chart.fg_color
          , color = color(na)
          , style = label.style_label_up
          , size = label_size)

        get_bx = box.all.get(index)

        //Reset bars bottom if range/volume is analyzed
        if analyze == 'Volume' or analyze == 'Range' or statistic == 'Max'
            get_bx.set_bottom(min)

            threshold := min

        //Set Gradient
        if useGradient
            get_top = get_bx.get_top()

            css = switch 
                get_top > threshold => color.from_gradient(get_top, threshold, max, color.new(bullCss, 80), bullCss)
                get_top < threshold => color.from_gradient(get_top, min, threshold, bearCss, color.new(bearCss, 80))

            get_bx.set_bgcolor(css)

        //Highlight current period
        if highlightNow and chart_freq == element
            get_bx.set_border_color(chart.fg_color)

        x1 -= 3

//---------------------------------------------------------------------------------------------------------------------}