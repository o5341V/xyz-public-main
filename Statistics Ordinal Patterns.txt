// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Sigaud

//@version=5
indicator("[SGM Ordinal Patterns]", shorttitle="Ordinal Patterns", overlay=true)

////////////
// Inputs //
////////////

color_table = input(#cfcfcf,"color table")
text_color = input(color.black,"color table")

////////////////////////////
// Ordinal Patterns logic //
////////////////////////////

// Function to get the index of an ordinal pattern based on three values
ordinal_pattern(val0, val1, val2) =>
    if (val0 < val1 and val1 < val2)
        0
    else if (val0 < val2 and val2 < val1)
        1
    else if (val1 < val0 and val0 < val2)
        2
    else if (val1 < val2 and val2 < val0)
        3
    else if (val2 < val0 and val0 < val1)
        4
    else if (val2 < val1 and val1 < val0)
        5
    else
        na

///////////////////////
// Backtesting logic //
///////////////////////

// Variables to store counts and future gains of each pattern
var motif_counts = array.new_int(6, 0) // Array to count occurrences of each pattern
var motif_returns = array.new_float(6, na) // Array to store average returns of each pattern
var motif_stddevs = array.new_float(6, na) // Array to store standard deviations of returns for each pattern

// Manually initializing lists for storing future gains of each pattern
var motif_future_gains_0 = array.new_float()
var motif_future_gains_1 = array.new_float()
var motif_future_gains_2 = array.new_float()
var motif_future_gains_3 = array.new_float()
var motif_future_gains_4 = array.new_float()
var motif_future_gains_5 = array.new_float()

// Reset pattern counters and gain lists at each new bar (starting from the third bar)
if (bar_index == 2)  // Ensure there are enough bars
    for i = 0 to 5 by 1
        array.set(motif_counts, i, 0)
    // Reinitialize future gains arrays for each pattern
    motif_future_gains_0 := array.new_float()
    motif_future_gains_1 := array.new_float()
    motif_future_gains_2 := array.new_float()
    motif_future_gains_3 := array.new_float()
    motif_future_gains_4 := array.new_float()
    motif_future_gains_5 := array.new_float()

var line line0 = na
var line line1 = na

var int motif = na  // Declaring the motif variable outside the if block
var int prev_motif = na  // To store the previous pattern

if (bar_index >= 3)  // Ensure there are enough bars
    val0 = close[3]
    val1 = close[2]
    val2 = close[1]
    prev_motif := ordinal_pattern(val0, val1, val2)
    
    // Calculate the future gain relative to the previous bar
    future_gain = (close[0] - close[1]) / close[1] * 100
    
    if not na(prev_motif)
        array.set(motif_counts, prev_motif, array.get(motif_counts, prev_motif) + 1)
        
        // Associate future gain with the previous pattern
        switch prev_motif
            0 => array.push(motif_future_gains_0, future_gain)
            1 => array.push(motif_future_gains_1, future_gain)
            2 => array.push(motif_future_gains_2, future_gain)
            3 => array.push(motif_future_gains_3, future_gain)
            4 => array.push(motif_future_gains_4, future_gain)
            5 => array.push(motif_future_gains_5, future_gain)

        // Calculate return statistics
        gains = switch prev_motif
            0 => motif_future_gains_0
            1 => motif_future_gains_1
            2 => motif_future_gains_2
            3 => motif_future_gains_3
            4 => motif_future_gains_4
            5 => motif_future_gains_5
        
        avg_return = array.sum(gains) / array.size(gains)
        
        // Calculate standard deviation
        sum_squares = 0.0
        for j = 0 to array.size(gains) - 1
            sum_squares := sum_squares + math.pow(array.get(gains, j) - avg_return, 2)
        stddev_return = math.sqrt(sum_squares / array.size(gains))
        
        array.set(motif_returns, prev_motif, avg_return)
        array.set(motif_stddevs, prev_motif, stddev_return)

    // Visualization of the last three closes with lines
    if not na(line0)
        line.delete(line0)
    if not na(line1)
        line.delete(line1)

    line0 := line.new(x1=bar_index[2], y1=close[2], x2=bar_index[1], y2=close[1], color=color.blue, width=2)
    line1 := line.new(x1=bar_index[1], y1=close[1], x2=bar_index[0], y2=close[0], color=color.blue, width=2)

// Calculate the current pattern based on the last three close prices
if (bar_index >= 2)
    val0 = close[2]
    val1 = close[1]
    val2 = close[0]
    motif := ordinal_pattern(val0, val1, val2)

////////////
// Tables //
////////////

// Display results in a table
var table motifs_table = table.new(position.top_right, 7, 7, border_color=color.black, frame_color=color.black, frame_width=1)

// Initialize row headers
if (bar_index == 0)
    table.cell(motifs_table, 0, 0, "Pattern", text_color=text_color, bgcolor=color_table)
    table.cell(motifs_table, 0, 1, "0 - 012", text_color=text_color)
    table.cell(motifs_table, 0, 2, "1 - 021", text_color=text_color)
    table.cell(motifs_table, 0, 3, "2 - 102", text_color=text_color)
    table.cell(motifs_table, 0, 4, "3 - 120", text_color=text_color)
    table.cell(motifs_table, 0, 5, "4 - 201", text_color=text_color)
    table.cell(motifs_table, 0, 6, "5 - 210", text_color=text_color)
    table.cell(motifs_table, 1, 0, "Count", text_color=text_color, bgcolor=color_table)
    table.cell(motifs_table, 2, 0, "Distribution", text_color=text_color, bgcolor=color_table)

// Add counts and distribution boxes for each pattern
max_count = array.max(motif_counts)
for i = 0 to 5 by 1
    count = array.get(motif_counts, i)
    table.cell(motifs_table, 1, i+1, str.tostring(count), text_color=text_color)
    // Create the distribution
    distribution = ""
    for j = 0 to 9 by 1
        if j < math.floor((count / max_count) * 10)
            distribution := distribution + "█"
        else
            distribution := distribution + " "
    table.cell(motifs_table, 2, i+1, distribution, text_color=color.green, text_halign = text.align_left)

// Create the table for pattern analysis
var table pattern_analysis = table.new(position.bottom_right, 7, 4, border_color=color.black, frame_color=color.black, frame_width=1)

// Initialize column headers for pattern analysis
if (bar_index == 0)
    table.cell(pattern_analysis, 0, 0, "Pattern", text_color=text_color, bgcolor=color_table)
    table.cell(pattern_analysis, 0, 1, "Average Return (%)", text_color=text_color, bgcolor=color_table)
    table.cell(pattern_analysis, 0, 2, "Standard Deviation (%)", text_color=text_color, bgcolor=color_table)
    table.cell(pattern_analysis, 0, 3, "Sharpe Ratio", text_color=text_color, bgcolor=color_table)

// Add data for each pattern in the analysis table
for i = 0 to 5 by 1
    avg_return = array.get(motif_returns, i)
    stddev_return = array.get(motif_stddevs, i)
    table.cell(pattern_analysis, i + 1, 0, str.tostring(i), text_color=text_color)
    table.cell(pattern_analysis, i + 1, 1, str.tostring(avg_return, "#.###") + "%", text_color=text_color)
    table.cell(pattern_analysis, i + 1, 2, str.tostring(stddev_return, "#.###") + "%", text_color=text_color)
    table.cell(pattern_analysis, i + 1, 3, str.tostring(avg_return / stddev_return, "#.###"), text_color=text_color)

// Table to display the current and previous patterns
var table current_motif_table = table.new(position.middle_right, 2, 3, border_color=color.black, frame_color=color.black, frame_width=1)
if (bar_index == 0)
    table.cell(current_motif_table, 0, 0, "Pattern", text_color=text_color, bgcolor=color_table)
    table.cell(current_motif_table, 0, 1, "Current", text_color=text_color, bgcolor=color_table)
    table.cell(current_motif_table, 0, 2, "Previous", text_color=text_color, bgcolor=color_table)

if not na(motif)
    table.cell(current_motif_table, 1, 1, str.tostring(motif), text_color=text_color)
if not na(prev_motif)
    table.cell(current_motif_table, 1, 2, str.tostring(prev_motif), text_color=text_color)
