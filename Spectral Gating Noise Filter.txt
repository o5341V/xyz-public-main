// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © The_Peaceful_Lizard/

//@version=5
indicator("Spectral Gating", shorttitle="SG", overlay=true)

length = input.int(3, "Window Size", 2, 6)

type complex
    float re
    float im 

add(complex a, complex b)=>
    complex.new(a.re + b.re, a.im + b.im)
subtract(complex a, complex b)=>
    complex.new(a.re - b.re, a.im - b.im)

multiply(complex a, complex b)=>
    complex.new(a.re * b.re - a.im * b.im, a.re * b.im + a.im * b.re)

radius(complex complex_number)=>
    math.sqrt(math.pow(complex_number.re, 2) + math.pow(complex_number.im, 2))

// Iterative FFT
FFT(fftArray, len) =>
    for s = 1 to math.ceil(math.log(len) / math.log(2))
        m = int(math.pow(2, s))
        halfM = int(m / 2)
        wm = complex.new(math.cos(-2 * math.pi / m), math.sin(-2 * math.pi / m))
        for k = 0 to len - 1 by m
            w = complex.new(1, 0)
            for j = 0 to halfM - 1
                t = multiply(w, array.get(fftArray, k + j + halfM))
                u = array.get(fftArray, k + j)
                array.set(fftArray, k + j, add(u, t))
                array.set(fftArray, k + j + halfM, subtract(u, t))
                w := multiply(w, wm)
    fftArray
// Normalize the output of IFFT
normalizeIFFT(complexArray, len) =>
    normalizedArray = array.new<complex>(len)
    for i = 0 to len - 1
        array.set(normalizedArray, i, complex.new(array.get(complexArray, i).re / len, array.get(complexArray, i).im / len))
    normalizedArray

// Iterative IFFT
IFFT(ifftArray, len) =>
    for s = 1 to math.ceil(math.log(len) / math.log(2))
        m = int(math.pow(2, s))
        halfM = int(m / 2)
        wm = complex.new(math.cos(2 * math.pi / m), math.sin(2 * math.pi / m))
        for k = 0 to len - 1 by m
            w = complex.new(1, 0)
            for j = 0 to halfM - 1
                t = multiply(w, array.get(ifftArray, k + j + halfM))
                u = array.get(ifftArray, k + j)
                array.set(ifftArray, k + j, add(u, t))
                array.set(ifftArray, k + j + halfM, subtract(u, t))
                w := multiply(w, wm)
    normalizeIFFT(ifftArray, len)


// Function to apply threshold to the power spectrum (spectral gating)
applyThreshold(complex[] dftData, thresholdFactor) =>
    int n = array.size(dftData)
    float[] powerSpectrum = array.new_float(n)
    
    // Calculate the power spectrum
    for i = 0 to n - 1
        power = radius(array.get(dftData, i))
        array.set(powerSpectrum, i, power)

    // Calculate the mean of the power spectrum
    float powerMean = array.avg(powerSpectrum)

    // Set the threshold based on the mean and threshold factor
    float threshold = powerMean * (thresholdFactor + 1)
    
    // Suppress frequency components below the threshold
    complex[] filteredData = array.new<complex>(n, complex.new(0, 0))
    for i = 0 to n - 1
        if array.get(powerSpectrum, i) >= threshold
            array.set(filteredData, i, array.get(dftData, i))
        else
            scaleFactor = math.max(0, (array.get(powerSpectrum, i) - threshold) / threshold)
            scaledComplex = multiply(array.get(dftData, i), complex.new(scaleFactor, 0))
            array.set(filteredData, i, scaledComplex)
    
    filteredData

currentPeriod = int(math.pow(2, length)) 


priceData = array.new<complex>(currentPeriod, na)
array.clear(priceData)
for i = 0 to currentPeriod - 1
    array.push(priceData, complex.new(close[i], 0))


dftData = FFT(priceData, currentPeriod)
filteredData = applyThreshold(dftData, length)
idftData = IFFT(filteredData, currentPeriod)

// Plot the filtered data
plot(array.get(idftData, 0).re, color=color.blue, linewidth=1, title="Filtered Data")