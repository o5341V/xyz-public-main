// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © PineCodersTASC

//  TASC Issue: June 2022 - Vol. 40, Issue 7
//     Article:    Ehlers Loops
//              Rotation in Motion
//  Article By: John F. Ehlers
//    Language: TradingView's Pine Script v5
// Provided By: PineCoders, for tradingview.com

//@version=5
indicator("TASC 2022.6 Ehlers' Loops", "ELs", precision=3, max_lines_count=300, max_labels_count=300, max_boxes_count=300)

//== 2 Pole Butterworth Highpass Filter ==//
butterworthHP(float Series, float Period) =>
    var float ALPHA =  math.pi * math.sqrt(2.0) / Period
    var float BETA  =  math.exp(-ALPHA )
    var float COEF2 = -math.pow(BETA, 2)
    var float COEF1 =  math.cos( ALPHA ) * 2.0 * BETA
    var float COEF0 =  (1.0 + COEF1 - COEF2) * 0.25
    float tmp    = nz(Series[1],  Series)
    float whiten =    Series + nz(Series[2], tmp) - 2.0 * tmp 
    float smooth = na, smooth := COEF0 *     whiten     +
                                 COEF1 *  nz(smooth[1]) +
                                 COEF2 *  nz(smooth[2])

//===== 2 Pole Super Smoother Filter =====//
superSmoother(float Series, float Period) =>
    var float ALPHA =  math.pi * math.sqrt(2.0) / Period
    var float BETA  =  math.exp(-ALPHA )
    var float COEF2 = -math.pow(BETA, 2)
    var float COEF1 =  math.cos( ALPHA ) * 2.0 * BETA
    var float COEF0 =  1.0 - COEF1 - COEF2
    float sma2   = math.avg(Series, nz(Series[1], Series))
    float smooth = na, smooth := COEF0 *      sma2      +
                                 COEF1 *  nz(smooth[1]) +
                                 COEF2 *  nz(smooth[2])

//===== Faster Root Mean Square =====//
fastRMS(float Series, float Period) =>
    if Period < 1
        runtime.error("Err: fastRMS(Period=) is less than 1")
    var float COEF0 = 2.0 / (Period + 1)
    var float COEF1 = 1.0 -  COEF0
    float pow = math.pow(Series, 2)
    float ema = na, ema := COEF0 *    pow +
                           COEF1 * nz(ema[1], pow)
    nz(Series / math.sqrt(ema))

string ig_loops ='Ehlers Loops:'
i_source    = input.source(close,      "Source", group=ig_loops)
i_periodLP  = input.int( 20,  "Low-Pass Period", minval= 7, group=ig_loops)
i_periodHP  = input.int(125, "High-Pass Period", minval=20, group=ig_loops)
i_periodRMS = input.int( 80,       "RMS Period",   step=10, group=ig_loops)

//==== Normalized Roofing Filter for Price ====//
float HP       = butterworthHP(i_source, i_periodHP )
float Price    = superSmoother(      HP, i_periodLP )
float PriceRMS =       fastRMS(   Price, i_periodRMS)

//=== Normalized Roofing Filter for Volume ==//
float VolHP  = butterworthHP(volume, i_periodHP )
float Vol    = superSmoother( VolHP, i_periodLP )
float VolRMS =       fastRMS(   Vol, i_periodRMS)

// plot(PriceRMS, "Area", #0077FF40, style=plot.style_area)
// plot(PriceRMS, "PRMS", #0077FF, 2)
// plot(  VolRMS, "VRMS", #FF7700)

// hline(    2.0,   "2σ", #FF0000CC)
// hline(    1.0,   "1σ", #FF000055, hline.style_dotted, 2)
// hline(    0.0, "Zero", #808080)
// hline(   -1.0,  "-1σ", #00FF0055, hline.style_dotted, 2)
// hline(   -2.0,  "-2σ", #00FF00CC)

// constants:
string _B0_ = '🟆', _B1_ = '✸',  _B2_ = '⯁',  _B3_ = '✜',  _B4_ = '⯀',  _B5_ = '◉',  _B6_ = '・',  _B7_ = '🞉'
string _LS0_ = 'dashed', _LS1_ = 'dotted', _LS2_ = 'solid'
_lineStyleHelper(style)=>
    switch style
        'dashed' => line.style_dashed
        'dotted' => line.style_dotted
        'solid' => line.style_solid

_ohlcv () => [open, high, low, close, volume]

EhlersLoop (float source, float vol, hp_period, lp_period, rms_period) => //{
    //==== Normalized Roofing Filter for Price ====//
    float _hp        = butterworthHP(source, hp_period)
    float _price     = superSmoother(   _hp, lp_period)
    float _price_rms =       fastRMS(_price, rms_period)
    //
    //=== Normalized Roofing Filter for Volume ==//
    float _vol_hp  = butterworthHP(    vol, hp_period)
    float _vol     = superSmoother(_vol_hp, lp_period)
    float _vol_rms =       fastRMS(   _vol, rms_period)
    //
    [_vol_rms, _price_rms]
//}

// @function Draws deviation boxes
DrawDeviationBox (int deviations, color bgcolor, int bar_scale=100) =>
    int _halfWidth = int(deviations * bar_scale)
    if _halfWidth > 500
        runtime.error('Width must be less than 500.')
    if barstate.islast
        var Box = box.new(
          bar_index, deviations, bar_index, -deviations,
         border_color=bgcolor, border_style=line.style_dotted,
         bgcolor=color.new(bgcolor, 96), text_size=size.small,
           text=str.tostring(deviations)   +  ' deviations',
           text_color=bgcolor,  text_valign=text.align_bottom)
        box.set_left( Box, bar_index - _halfWidth)
        box.set_right(Box, bar_index + _halfWidth)
//
DrawDeviationBoxLabels (color text_color=#ffffa080, color bg_color=#00000020, int bar_scale=100, string size=size.small) =>
    int _right = bar_index + 3 * bar_scale
    int _left = bar_index - 3 * bar_scale
    var label _l_top_right = label.new(_right,  3.0, 'Up Price | Up Volume'    , color=bg_color, style=label.style_label_down, textcolor=text_color, size=size)
    var label _l_bot_right = label.new(_right, -3.0, 'Down Price | Up Volume'  , color=bg_color, style=label.style_label_up  , textcolor=text_color, size=size)
    var label _l_top_left  = label.new(_left ,  3.0, 'Up Price | down Volume'  , color=bg_color, style=label.style_label_down, textcolor=text_color, size=size)
    var label _l_bot_left  = label.new(_left , -3.0, 'Down Price | down Volume', color=bg_color, style=label.style_label_up  , textcolor=text_color, size=size)
    label.set_x(_l_top_right, _right)
    label.set_x(_l_bot_right, _right)
    label.set_x(_l_top_left, _left)
    label.set_x(_l_bot_left, _left)
//

// @function Helper method to draw the symbol data over the cartesian space, where 1 unit == 1 deviation.
DrawCrockerSegment (
  string symbol, float vol, float price, 
  int depth=5, 
  color tcolor=color.blue, 
  string style=line.style_dashed, 
  string bullet='⦿', 
  string size=size.small,
  int bar_scale=100
  ) => //
  //
    var _Li = array.new<line>(depth)
    var _La = array.new<label>(depth+1)
    float _sump = 0.0
    float _sumv = 0.0
    if bar_index > depth
        for _i = depth to 0
            float _cv = vol[_i+1]
            float _cp = price[_i+1]
            if _i < depth
                int _x1 = bar_index + math.min(500, int(_sumv * bar_scale))
                int _x2 = bar_index + math.min(500, int(_cv * bar_scale))
                //
                line _line = line.new(
                     x1=_x1, y1=_sump, 
                     x2=_x2, y2=_cp, 
                     color=tcolor,
                     style=style, 
                     width=1//math.max(1, int((_i / depth) * 5.0))
                     )
                label _lab = label.new(
                     x=_x2, y=_cp, 
                     text=bullet, 
                     color=color.rgb(0,0,0,99), 
                     style=label.style_label_center, 
                     textcolor=tcolor, size=size)
                //
                line.delete(array.get(_Li, _i))
                array.set(_Li, _i, _line)
                label.delete(array.get(_La, _i+1))
                array.set(_La, _i+1, _lab)
                if _i == depth-1
                    label.delete(array.get(_La, 0))
                    label _lab1 = label.new(
                         x=_x1, y=_sump, 
                         text=symbol, 
                         color=color.rgb(0,0,0,60), 
                         style=label.style_label_center, 
                         textcolor=tcolor, size=size.small)
                    array.set(_La, 0, _lab1)
            _sump := _cp
            _sumv := _cv
//

DrawCandleStick (box body_id, line wickh_id, line wickl_id, int start_idx, int body_size, float o, float h, float l, float c, color body_color=#e3e3e3, color wick_color=#e3e3e3, float bar_scale=100) => //{
    int _body_xcenter = start_idx + int(body_size * 0.5)
    int _body_right = start_idx + body_size
    float _body_top = math.max(o, c)
    float _body_bot = math.min(o, c)
    // var box _body = box.new(start_idx, _body_top, _body_right, _body_bot, border_color=wick_color, bgcolor=body_color)
    // var line _wick_h = line.new(_body_xcenter, _body_top, _body_xcenter, h, color=wick_color)
    // var line _wick_l = line.new(_body_xcenter, _body_bot, _body_xcenter, l, color=wick_color)
    //
    box.set_bgcolor(body_id, body_color), box.set_border_color(body_id, wick_color)
    box.set_lefttop(body_id, start_idx, _body_top), box.set_rightbottom(body_id, _body_right, _body_bot)
    line.set_xy1(wickh_id, _body_xcenter, _body_top), line.set_xy2(wickh_id, _body_xcenter, h), line.set_color(wickh_id, wick_color)
    line.set_xy1(wickl_id, _body_xcenter, _body_bot), line.set_xy2(wickl_id, _body_xcenter, l), line.set_color(wickl_id, wick_color)
// DrawCandleStick(bar_index-400, 10, -2, 3, -3, 2, color.red, color.yellow)
//}
FitOHLCtoRange (float lower_bound, float upper_bound, float o, float h, float l, float c, int length) => //{
    float[] _o = array.new<float>(length)
    float[] _h = array.new<float>(length)
    float[] _l = array.new<float>(length)
    float[] _c = array.new<float>(length)
    for _i = length - 1 to 0
        array.set(_o, _i, o[_i]), array.set(_h, _i, h[_i]), array.set(_l, _i, l[_i]), array.set(_c, _i, c[_i])
    float _hh = array.max(_h), _ll = array.min(_l), _rr = _hh - _ll
    float _boundr = upper_bound - lower_bound
    for _i = 0 to length - 1
        array.set(_o, _i, lower_bound + _boundr * ((array.get(_o, _i) - _ll) / _rr))
        array.set(_h, _i, lower_bound + _boundr * ((array.get(_h, _i) - _ll) / _rr))
        array.set(_l, _i, lower_bound + _boundr * ((array.get(_l, _i) - _ll) / _rr))
        array.set(_c, _i, lower_bound + _boundr * ((array.get(_c, _i) - _ll) / _rr))
    [_o, _h, _l, _c]
// [oo, hh, ll, cc] = FitOHLCtoRange(1.0, 2.0, open, high, low, close, 10)
// DrawCandleStick(bar_index-400, 10, oo, hh, ll, cc, color.red, color.yellow)
//}

DrawCandleStickSection (int start_idx, float lower_bound, float upper_bound, float o, float h, float l, float c, string ticket, color ticket_color, int steps=10, int space=1, int bar_scale=100) => //{
    int _step = math.floor(bar_scale / steps)
    color _bgcol = color.new(ticket_color, 95)
    var box[] _BB = array.new<box>(steps), var line[] _LH = array.new<line>(steps), var line[] _LL = array.new<line>(steps)
    var box _tagbox = box.new(start_idx, upper_bound, start_idx + bar_scale, lower_bound, _bgcol, 1, line.style_dotted, bgcolor=_bgcol, text=ticket, text_size=size.small, text_color=color.new(ticket_color, 70), text_valign=text.align_top)
    box.set_lefttop(_tagbox, start_idx, upper_bound + 0.1), box.set_rightbottom(_tagbox, start_idx + 1 + _step * (steps + 1), lower_bound)
    [_o, _h, _l, _c] = FitOHLCtoRange(lower_bound, upper_bound, o, h, l, c, steps)
    if barstate.isfirst
        for _i = 0 to steps-1
            array.set(_BB, _i, box.new(bar_index, 0.0, bar_index+1, 1.0))
            array.set(_LH, _i, line.new(bar_index, 0.0, bar_index+1, 1.0))
            array.set(_LL, _i, line.new(bar_index, 0.0, bar_index+1, 1.0))
    for _i = steps - 1 to 0
        _ci = array.get(_c, _i)
        _oi = array.get(_o, _i)
        _col = _ci[_i] > _oi[_i] ? color.lime : color.red
        DrawCandleStick(array.get(_BB, _i), array.get(_LH, _i), array.get(_LL, _i), start_idx + bar_scale - _i * (1 + _step), _step, _oi, array.get(_h, _i), array.get(_l, _i), _ci, _col, _col)
// DrawCandleStickSection(bar_index-409, 1.0, 2.0, open, high, low, close)
//}

// Crocker graph inputs:
string ig_graph = 'Graph:'
int i_barScale = input.int(defval=100, title='Bar Scale:', group=ig_graph)
color i_col_devbox = input.color(defval=#ffffa080, title='Deviation Box Color:', group=ig_graph)
// area drawings:
color c_devbox_border = color.rgb(250, 250, 100, 60)
color c_devbox_bg = #00000020//color.rgb(50, 50, 50, 75)

DrawDeviationBox(3, i_col_devbox, i_barScale)
DrawDeviationBox(2, i_col_devbox, i_barScale)
DrawDeviationBox(1, i_col_devbox, i_barScale)

DrawDeviationBoxLabels(c_devbox_border, c_devbox_bg, i_barScale, size.small)

//draw the ticker crocker:
// inputs:
string ig_symbols = 'Symbols:'
string i_t0 = input.symbol(defval='XLE', title='', group=ig_symbols, inline='T0')
string i_t1 = input.symbol(defval='XLF', title='', group=ig_symbols, inline='T1')
string i_t2 = input.symbol(defval='XLK', title='', group=ig_symbols, inline='T2')
string i_t3 = input.symbol(defval='XLP', title='', group=ig_symbols, inline='T3')
string i_t4 = input.symbol(defval='XLU', title='', group=ig_symbols, inline='T4')
string i_t5 = input.symbol(defval='XLV', title='', group=ig_symbols, inline='T5')
color i_col0 = input.color(defval=color.red   , title='', group=ig_symbols, inline='T0')
color i_col1 = input.color(defval=color.lime  , title='', group=ig_symbols, inline='T1')
color i_col2 = input.color(defval=color.blue  , title='', group=ig_symbols, inline='T2')
color i_col3 = input.color(defval=color.orange, title='', group=ig_symbols, inline='T3')
color i_col4 = input.color(defval=color.teal  , title='', group=ig_symbols, inline='T4')
color i_col5 = input.color(defval=color.aqua  , title='', group=ig_symbols, inline='T5')
string i_bul0 = input.string(defval=_B5_, options=[_B0_, _B1_, _B2_, _B3_, _B4_, _B5_, _B6_, _B7_], title='', group=ig_symbols, inline='T0')
string i_bul1 = input.string(defval=_B5_, options=[_B0_, _B1_, _B2_, _B3_, _B4_, _B5_, _B6_, _B7_], title='', group=ig_symbols, inline='T1')
string i_bul2 = input.string(defval=_B5_, options=[_B0_, _B1_, _B2_, _B3_, _B4_, _B5_, _B6_, _B7_], title='', group=ig_symbols, inline='T2')
string i_bul3 = input.string(defval=_B5_, options=[_B0_, _B1_, _B2_, _B3_, _B4_, _B5_, _B6_, _B7_], title='', group=ig_symbols, inline='T3')
string i_bul4 = input.string(defval=_B5_, options=[_B0_, _B1_, _B2_, _B3_, _B4_, _B5_, _B6_, _B7_], title='', group=ig_symbols, inline='T4')
string i_bul5 = input.string(defval=_B5_, options=[_B0_, _B1_, _B2_, _B3_, _B4_, _B5_, _B6_, _B7_], title='', group=ig_symbols, inline='T5')
string i_ls0 = _lineStyleHelper(input.string(defval=_LS0_, options=[_LS0_, _LS1_, _LS2_], title='', group=ig_symbols, inline='T0'))
string i_ls1 = _lineStyleHelper(input.string(defval=_LS0_, options=[_LS0_, _LS1_, _LS2_], title='', group=ig_symbols, inline='T1'))
string i_ls2 = _lineStyleHelper(input.string(defval=_LS0_, options=[_LS0_, _LS1_, _LS2_], title='', group=ig_symbols, inline='T2'))
string i_ls3 = _lineStyleHelper(input.string(defval=_LS0_, options=[_LS0_, _LS1_, _LS2_], title='', group=ig_symbols, inline='T3'))
string i_ls4 = _lineStyleHelper(input.string(defval=_LS0_, options=[_LS0_, _LS1_, _LS2_], title='', group=ig_symbols, inline='T4'))
string i_ls5 = _lineStyleHelper(input.string(defval=_LS0_, options=[_LS0_, _LS1_, _LS2_], title='', group=ig_symbols, inline='T5'))
//
// [v0, p0] = request.security(i_t0, timeframe.period, [VolRMS, PriceRMS], barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
// [v1, p1] = request.security(i_t1, timeframe.period, [VolRMS, PriceRMS], barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
// [v2, p2] = request.security(i_t2, timeframe.period, [VolRMS, PriceRMS], barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
// [v3, p3] = request.security(i_t3, timeframe.period, [VolRMS, PriceRMS], barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
// [v4, p4] = request.security(i_t4, timeframe.period, [VolRMS, PriceRMS], barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
// [v5, p5] = request.security(i_t5, timeframe.period, [VolRMS, PriceRMS], barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
[so0, sh0, sl0, sc0, sv0] = request.security(i_t0, timeframe.period, _ohlcv(), barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
[so1, sh1, sl1, sc1, sv1] = request.security(i_t1, timeframe.period, _ohlcv(), barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
[so2, sh2, sl2, sc2, sv2] = request.security(i_t2, timeframe.period, _ohlcv(), barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
[so3, sh3, sl3, sc3, sv3] = request.security(i_t3, timeframe.period, _ohlcv(), barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
[so4, sh4, sl4, sc4, sv4] = request.security(i_t4, timeframe.period, _ohlcv(), barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
[so5, sh5, sl5, sc5, sv5] = request.security(i_t5, timeframe.period, _ohlcv(), barmerge.gaps_off, barmerge.lookahead_on, ignore_invalid_symbol=true)
[v0, p0] = EhlersLoop(sc0, sv0, i_periodHP, i_periodLP, i_periodRMS)
[v1, p1] = EhlersLoop(sc1, sv1, i_periodHP, i_periodLP, i_periodRMS)
[v2, p2] = EhlersLoop(sc2, sv2, i_periodHP, i_periodLP, i_periodRMS)
[v3, p3] = EhlersLoop(sc3, sv3, i_periodHP, i_periodLP, i_periodRMS)
[v4, p4] = EhlersLoop(sc4, sv4, i_periodHP, i_periodLP, i_periodRMS)
[v5, p5] = EhlersLoop(sc5, sv5, i_periodHP, i_periodLP, i_periodRMS)

int i_depth = input.int(title='Segment Depth:', defval=10)
string i_size = input.string(size.small, options=[size.small, size.normal, size.large, size.huge], inline='LS')

DrawCrockerSegment(array.get(str.split(i_t0, ':'), 1), v0, p0, i_depth, i_col0, i_ls0, i_bul0, i_size, i_barScale)
DrawCrockerSegment(array.get(str.split(i_t1, ':'), 1), v1, p1, i_depth, i_col1, i_ls1, i_bul1, i_size, i_barScale)
DrawCrockerSegment(array.get(str.split(i_t2, ':'), 1), v2, p2, i_depth, i_col2, i_ls2, i_bul2, i_size, i_barScale)
DrawCrockerSegment(array.get(str.split(i_t3, ':'), 1), v3, p3, i_depth, i_col3, i_ls3, i_bul3, i_size, i_barScale)
DrawCrockerSegment(array.get(str.split(i_t4, ':'), 1), v4, p4, i_depth, i_col4, i_ls4, i_bul4, i_size, i_barScale)
DrawCrockerSegment(array.get(str.split(i_t5, ':'), 1), v5, p5, i_depth, i_col5, i_ls5, i_bul5, i_size, i_barScale)

int cs_start_pos = bar_index - (2 * i_depth + 4 * i_barScale)
DrawCandleStickSection(cs_start_pos,  2.05,  2.85, so0, sh0, sl0, sc0, i_t0, i_col0, i_depth, 1, i_barScale)
DrawCandleStickSection(cs_start_pos,  1.05,  1.85, so1, sh1, sl1, sc1, i_t1, i_col1, i_depth, 1, i_barScale)
DrawCandleStickSection(cs_start_pos,  0.05,  0.85, so2, sh2, sl2, sc2, i_t2, i_col2, i_depth, 1, i_barScale)
DrawCandleStickSection(cs_start_pos, -0.95, -0.15, so3, sh3, sl3, sc3, i_t3, i_col3, i_depth, 1, i_barScale)
DrawCandleStickSection(cs_start_pos, -1.95, -1.15, so4, sh4, sl4, sc4, i_t4, i_col4, i_depth, 1, i_barScale)
DrawCandleStickSection(cs_start_pos, -2.95, -2.15, so5, sh5, sl5, sc5, i_t5, i_col5, i_depth, 1, i_barScale)
