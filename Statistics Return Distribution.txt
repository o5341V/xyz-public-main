// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Sigaud

//@version=5
indicator("Return Distribution", shorttitle="Retrn Dist", overlay=true, max_boxes_count=48, max_lines_count=1)

///////////
// Input //
///////////

length = input.int(252, title="Length")
offset = input.int(20, title="Offset")
projection_days = input.int(10, title="Projection Days")
smooth = input.int(10, title="smoothing confidence levels")

///////////////////////
// display parameter //
///////////////////////

dist = input.bool(true, title="plot distribution")
proba = input.bool(true, title="show probabilities")
stats = input.bool(true, title="show distribution stats")
conf_bands = input.bool(false, title="show confidence bands")
conf_line = input.bool(true, title="show confidence lines")

///////////////////////////////////////////////////////////////////////////////////////////////////
// Function to approximate the inverse normal distribution (using Abramowitz and Stegun formula) //
///////////////////////////////////////////////////////////////////////////////////////////////////

inv_norm(p) =>
    a1 = -39.6968302866538
    a2 = 220.946098424521
    a3 = -275.928510446969
    a4 = 138.357751867269
    a5 = -30.6647980661472
    a6 = 2.50662827745924

    b1 = -54.4760987982241
    b2 = 161.585836858041
    b3 = -155.698979859887
    b4 = 66.8013118877197
    b5 = -13.2806815528857

    c1 = -0.00778489400243029
    c2 = -0.322396458041136
    c3 = -2.40075827716184
    c4 = -2.54973253934373
    c5 = 4.37466414146497
    c6 = 2.93816398269878

    d1 = 0.00778469570904146
    d2 = 0.32246712907004
    d3 = 2.44513413714299
    d4 = 3.75440866190742

    p_low = 0.02425
    p_high = 1 - p_low

    if (p < p_low)
        q = math.sqrt(-2 * math.log(p))
        ((((((c1 * q + c2) * q) + c3) * q + c4) * q + c5) * q + c6) / (((((d1 * q + d2) * q) + d3) * q + d4) * q + 1)
    else if (p <= p_high)
        q = p - 0.5
        r = q * q
        ((((((a1 * r + a2) * r) + a3) * r + a4) * r + a5) * r + a6) * q / ((((((b1 * r + b2) * r) + b3) * r + b4) * r + b5) * r + 1)
    else
        q = math.sqrt(-2 * math.log(1 - p))
        -((((((c1 * q + c2) * q) + c3) * q + c4) * q + c5) * q + c6) / (((((d1 * q + d2) * q) + d3) * q + d4) * q + 1)

/////////////////
// calculation //
/////////////////

returns = math.log(close / close[1])
mean = ta.sma(returns, length)
projected_mean = mean * projection_days
volatility = ta.stdev(returns, length) 
proj_volatility = volatility * math.sqrt(projection_days)
skewness = ta.sma(math.pow((returns - mean), 3), length) / math.pow(volatility, 3)
kurtosis = ta.sma(math.pow((returns - mean), 4), length) / math.pow(volatility, 4)

// Calculate confidence interval
conf_level1 = 0.683
conf_level2 = 0.954
conf_level3 = 0.997
z_score1 = inv_norm((1 + conf_level1) / 2)
z_score2 = inv_norm((1 + conf_level2) / 2)
z_score3 = inv_norm((1 + conf_level3) / 2)
upper_conf1 = close * math.exp(projected_mean + z_score1 * proj_volatility)
lower_conf1 = close * math.exp(projected_mean - z_score1 * proj_volatility)
upper_conf2 = close * math.exp(projected_mean + z_score2 * proj_volatility)
lower_conf2 = close * math.exp(projected_mean - z_score2 * proj_volatility)
upper_conf3 = close * math.exp(projected_mean + z_score3 * proj_volatility)
lower_conf3 = close * math.exp(projected_mean - z_score3 * proj_volatility)

//////////////////
// distribution //
//////////////////

histogramResolution = 50

// Create an array to store histogram data
var float[] histogramData = array.new_float(histogramResolution, 0)

// Compute histogram data
for i = 0 to (length - 1)
    binIndex = int((returns[i] - mean) / proj_volatility * 10 + histogramResolution / 2)
    if (binIndex >= 0) and (binIndex < histogramResolution)
        array.set(histogramData, binIndex, array.get(histogramData, binIndex) + 1)

// Find the maximum frequency for normalization
maxFreq = array.max(histogramData)

// Determine the step size for the price levels
priceStep = (ta.highest(high, length) - ta.lowest(low, length)) / histogramResolution

if dist == true
    for i = 0 to (histogramResolution - 1)
        frequency = array.get(histogramData, i)
        intensity = 255 * frequency / maxFreq
        boxSize = int(frequency / maxFreq * 200)  // Size of the box in terms of bars

        priceLevel = close * math.exp(projected_mean) + priceStep * (i - histogramResolution / 2)
        colorShade = priceLevel > close ? color.rgb(0, intensity, 0) : color.rgb(intensity, 0, 0)

        box.new(left=bar_index + offset, top=priceLevel + priceStep / 2, right=bar_index + offset + boxSize, bottom=priceLevel - priceStep / 2, border_color=colorShade, bgcolor=colorShade, border_width=0)

/////////////////////////////
// probability calculation //
/////////////////////////////

gainProb = 0.0
lossProb = 0.0

for i = 0 to (histogramResolution - 1)
    frequency = array.get(histogramData, i)
    priceLevel = close * math.exp(projected_mean) + priceStep * (i - histogramResolution / 2)

    if priceLevel > close
        gainProb := gainProb + frequency
    else
        lossProb := lossProb + frequency

totalProb = gainProb + lossProb

/////////////
// Display //
/////////////

if proba == true
    var table probTable = table.new(position.top_right, 2, 2, border_width=1, frame_color=color.gray, frame_width=1)
    if (bar_index == 0)
        table.cell(probTable, 0, 0, "Gain Probability", bgcolor=color.green, text_color=color.white)
        table.cell(probTable, 0, 1, "Loss Probability", bgcolor=color.red, text_color=color.white)
    table.cell(probTable, 1, 0, str.tostring(gainProb / totalProb * 100, "#.##") + "%", bgcolor=color.new(color.green, 80), text_color=color.black)
    table.cell(probTable, 1, 1, str.tostring(lossProb / totalProb * 100, "#.##") + "%", bgcolor=color.new(color.red, 80), text_color=color.black)

if stats == true
    var table statTable = table.new(position.bottom_right, 2, 4, border_width=1, frame_color=color.gray, frame_width=1)
    if (bar_index == 0)
        table.cell(statTable, 0, 0, "mean return µ", bgcolor=color.gray, text_color=color.white)
        table.cell(statTable, 0, 1, "volatility σ", bgcolor=color.gray, text_color=color.white)
        table.cell(statTable, 0, 2, "skewness", bgcolor=color.gray, text_color=color.white)
        table.cell(statTable, 0, 3, "kurtosis", bgcolor=color.gray, text_color=color.white)
    table.cell(statTable, 1, 0, str.tostring(mean * 100, "#.##") + "%", bgcolor=color.new(color.gray, 80), text_color=color.black)
    table.cell(statTable, 1, 1, str.tostring(volatility * 100, "#.##") + "%", bgcolor=color.new(color.gray, 80), text_color=color.black)
    table.cell(statTable, 1, 2, str.tostring(skewness, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.black)
    table.cell(statTable, 1, 3, str.tostring(kurtosis, "#.##"), bgcolor=color.new(color.gray, 80), text_color=color.black)

// Plot confidence bands
transp1 = conf_bands ? 20 : 100
transp2 = conf_bands ? 40 : 100
transp3 = conf_bands ? 60 : 100

plot(ta.sma(upper_conf1, smooth), "Upper Confidence", color=color.new(color.green, transp1), offset=projection_days)
plot(ta.sma(lower_conf1, smooth), "Lower Confidence", color=color.new(color.red, transp1), offset=projection_days)
plot(ta.sma(upper_conf2, smooth), "Upper Confidence", color=color.new(color.green, transp2), offset=projection_days)
plot(ta.sma(lower_conf2, smooth), "Lower Confidence", color=color.new(color.red, transp2), offset=projection_days)
plot(ta.sma(upper_conf3, smooth), "Upper Confidence", color=color.new(color.green, transp3), offset=projection_days)
plot(ta.sma(lower_conf3, smooth), "Lower Confidence", color=color.new(color.red, transp3), offset=projection_days)

// Plot confidence range
if conf_line == true
    line.new(bar_index, upper_conf1, bar_index + projection_days, upper_conf1, color=color.green)
    line.new(bar_index, upper_conf2, bar_index + projection_days, upper_conf2, color=color.green)
    line.new(bar_index, upper_conf3, bar_index + projection_days, upper_conf3, color=color.green)
    line.new(bar_index, lower_conf1, bar_index + projection_days, lower_conf1, color=color.red)
    line.new(bar_index, lower_conf2, bar_index + projection_days, lower_conf2, color=color.red)
    line.new(bar_index, lower_conf3, bar_index + projection_days, lower_conf3, color=color.red)